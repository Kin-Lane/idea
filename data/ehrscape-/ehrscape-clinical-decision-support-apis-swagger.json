{
	"swagger": "2.0",
	"info": {
		"title": "EhrScape Clinical Decision Support APIs",
		"description": "Lightweight CDS Services to support execution of clinical guidelines",
		"termsOfService": null,
		"version": null
	},
	"host": "rest.ehrscape.com",
	"basePath": "/ThinkCDS/services/CDSResources",
	"schemes": [
		"http"
	],
	"produces": [
		"application/json"
	],
	"consumes": [
		"application/json"
	],
	"paths": {
		"/terminology/codesystem/{codeSystem}/entities": {
			"get": {
				"summary": "List of entities in an explicit version of a single code system",
				"description": "",
				"operationId": "listEntities",
				"parameters": [
					{
						"name": "codelist",
						"in": "query",
						"description": "Filter to results whose code exactly matches one of the codes in this list"
					},
					{
						"name": "codeSystem",
						"in": "path",
						"description": "Identifying code of the codesystem"
					},
					{
						"name": "codesystemversion",
						"in": "query",
						"description": "Version of the codesystem. Defaults to the newest version"
					},
					{
						"name": "matchvalue",
						"in": "query",
						"description": "Filter to results that contain this value, either in code or description"
					},
					{
						"name": "page",
						"in": "query",
						"description": "Page of results to return. Starts with 1"
					},
					{
						"name": "pagesize",
						"in": "query",
						"description": "Size of a single page"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/terminology/codesystem/{codeSystem}/entity/{entity}": {
			"get": {
				"summary": "Returns details about a single entity",
				"description": "",
				"operationId": "getEntityDescription",
				"parameters": [
					{
						"name": "codeSystem",
						"in": "path",
						"description": "Identifying code of the codesystem"
					},
					{
						"name": "codesystemversion",
						"in": "query",
						"description": "Version of the codesystem. Defaults to the newest version"
					},
					{
						"name": "entity",
						"in": "path",
						"description": "code of the parent entity"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/terminology/codesystem/{codeSystem}/entity/{entity}/children": {
			"get": {
				"summary": "List of all children of a single entity",
				"description": "",
				"operationId": "listEntityChildren",
				"parameters": [
					{
						"name": "codelist",
						"in": "query",
						"description": "Filter to results whose code exactly matches one of the codes in this list"
					},
					{
						"name": "codeSystem",
						"in": "path",
						"description": "Identifying code of the codesystem"
					},
					{
						"name": "codesystemversion",
						"in": "query",
						"description": "Version of the codesystem. Defaults to the newest version"
					},
					{
						"name": "entity",
						"in": "path",
						"description": "code of the parent entity"
					},
					{
						"name": "matchvalue",
						"in": "query",
						"description": "Filter to results that contain this value, either in code or description"
					},
					{
						"name": "page",
						"in": "query",
						"description": "Page of results to return. Starts with 1"
					},
					{
						"name": "pagesize",
						"in": "query",
						"description": "Size of a single page"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/terminology/codesystem/{codeSystem}/resolve": {
			"post": {
				"summary": "Resolves a list of entity codes with associated types into a list of actual entity codes",
				"description": "<p>Resolves a list of entity codes with associated types into a list of actual entity codes<p>Each entity code in the input has an associated type. Depending on the type, the code will resolve to the following:<ul><li>fixed - itself<li>tree - itself and all its children</ul>",
				"operationId": "resolveEntityCodes",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "list of entities to be resolved",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "codeSystem",
						"in": "path",
						"description": ""
					},
					{
						"name": "codesystemversion",
						"in": "query",
						"description": ""
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/terminology/codesystem/{codeSystem}/validate": {
			"get": {
				"summary": "Validates a list of entity codes in a given code system",
				"description": "",
				"operationId": "validateCodes",
				"parameters": [
					{
						"name": "codeSystem",
						"in": "path",
						"description": "Identifying code of the codesystem"
					},
					{
						"name": "codesystemversion",
						"in": "query",
						"description": "Version of the codesystem. Defaults to the newest version"
					},
					{
						"name": "entities",
						"in": "query",
						"description": "Codes of the entities to validate"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/terminology/codesystems": {
			"get": {
				"summary": "Lists code systems matching a criteria",
				"description": "Only the newest version of each code system will be returned",
				"operationId": "listCodeSystems",
				"parameters": [
					{
						"name": "codelist",
						"in": "query",
						"description": "Filter to results whose code exactly matches one of the codes in this list"
					},
					{
						"name": "matchvalue",
						"in": "query",
						"description": "Filter to results that contain this value, either in code or description"
					},
					{
						"name": "page",
						"in": "query",
						"description": "Page of results to return. Starts with 1"
					},
					{
						"name": "pagesize",
						"in": "query",
						"description": "Size of a single page"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/composition": {
			"post": {
				"summary": "Creates a new OpenEhr composition.",
				"description": "<p>Saves a new OpenEhr composition to the specified, or the currently active EHR.<p> <p>The composition can be in one of the supported formats (FLAT, STRUCTURED, RAW). Unless the format is RAW, then the templateId parameter is required. The composition data is sent in the request body. An example for the structured format: <pre><code>{n    "ctx": {n      "language": "en",n      "territory": "SI",n      "composer_name": "matijak_test"  n    },tn    "vitals": {n      "vitals": [n        {n          "body_temperature": [n            {n              "any_event": [n                {n                  "description_of_thermal_stress": [n                    "Testdescriptionofsymptoms"n                  ],n                  "temperature": [n                    {n                      "|magnitude": 37.2,n                      "|unit": "u00b0C"n                    }n                  ],n                  "symptoms": [n                    {n                      "|code": "at0.64",n                      "|value": "Chills/rigor/shivering",n                      "|terminology": "local"n                    }n                  ],n                  "time": [n                    "2014-01-22T15: 18: 07.339+01: 00"n                  ]n                }n              ]n            }n          ]n        }n      ],n      "context": [n        {n          "setting": [n            {n              "|code": "238",n              "|value": "othercare",n              "|terminology": "openehr"n            }n          ],n          "start_time": [n            "2014-01-22T15: 18: 07.339+01: 00"n          ]n        }n      ]n    }n  }</code></pre></p><p>EHR id: The EHR to save the composition into, needs to be specified via the ehrId parameter, if it has not already been set on your session by a previous call.</p><p>A note on the ctx/ properties inside the composition data: In the FLAT and STRUCTURED format, the language (ctx/language) and the territory properties (ctx/territory) are required, as they specify the composition locale and language, which is then checked against the template's languages to see if it is supported. Other context-related properties, such as composer_name or start_time may also be specified in this fashion.</p><p>An example of a successful response body:<pre><code>{n  "meta": {n    "href": "http: //example.domain.com: 8082/rest/v1/composition/bddcedc8-46cc-4df6-8b1a-b05534235f17: : example.domain.com: : 1"n  },n  "action": "CREATE"n}</pre></code></p>",
				"operationId": "createComposition",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "The composition to create, in one of the supported formats.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "committerId",
						"in": "query",
						"description": "The external id of the committer user. If omitted, the current sessions logged in users external id will be used, if the user has one."
					},
					{
						"name": "committerName",
						"in": "query",
						"description": "The name of the committer user. If omitted, the current sessions logged in users name will be used."
					},
					{
						"name": "ehrId",
						"in": "query",
						"description": "The EHR id to save the composition into. Required if not already set on the current session by a preceding call."
					},
					{
						"name": "format",
						"in": "query",
						"description": "The format of the composition. Default: FLAT."
					},
					{
						"name": "templateId",
						"in": "query",
						"description": "OpenEhr template id for the composition. Required, unless the composition is in the RAW format, which has this information embedded."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/composition/{uid}": {
			"put": {
				"summary": "Updates an existing OpenEhr composition.",
				"description": "<p>The composition can be in one of the supported formats (FLAT, STRUCTURED, RAW). Unless the format is RAW, then the templateId parameter is required. The composition data is sent in the request body. An example for the structured format: <pre><code>{n    "ctx": {n      "language": "en",n      "territory": "SI",n      "composer_name": "matijak_test"  n    },tn    "vitals": {n      "vitals": [n        {n          "body_temperature": [n            {n              "any_event": [n                {n                  "description_of_thermal_stress": [n                    "Testdescriptionofsymptoms"n                  ],n                  "temperature": [n                    {n                      "|magnitude": 37.2,n                      "|unit": "u00b0C"n                    }n                  ],n                  "symptoms": [n                    {n                      "|code": "at0.64",n                      "|value": "Chills/rigor/shivering",n                      "|terminology": "local"n                    }n                  ],n                  "time": [n                    "2014-01-22T15: 18: 07.339+01: 00"n                  ]n                }n              ]n            }n          ]n        }n      ],n      "context": [n        {n          "setting": [n            {n              "|code": "238",n              "|value": "othercare",n              "|terminology": "openehr"n            }n          ],n          "start_time": [n            "2014-01-22T15: 18: 07.339+01: 00"n          ]n        }n      ]n    }n  }</code></pre></p><p>A note on the ctx/ properties inside the composition data: In the FLAT and STRUCTURED format, the language (ctx/language) and the territory properties (ctx/territory) are required, as they specify the composition locale and language, which is then checked against the template's languages to see if it is supported. Other context-related properties, such as composer_name or start_time may also be specified in this fashion.</p><p>An example of a successful response body:<pre><code>{n  "meta": {n    "href": "http: //example.domain.com: 8082/rest/v1/composition/bddcedc8-46cc-4df6-8b1a-b05534235f17: : example.domain.com: : 2"n  },n  "action": "UPDATE"n}</pre></code></p>",
				"operationId": "updateComposition",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "The composition to create, in one of the supported formats.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "committerId",
						"in": "query",
						"description": "The external id of the committer user. If omitted, the current sessions logged in users external id will be used, if the user has one."
					},
					{
						"name": "committerName",
						"in": "query",
						"description": "The name of the committer user. If omitted, the current sessions logged in users name will be used."
					},
					{
						"name": "format",
						"in": "query",
						"description": "The format of the composition. Default: FLAT."
					},
					{
						"name": "templateId",
						"in": "query",
						"description": "OpenEhr template id for the composition. Required, unless the composition data is in the RAW format, which has this information embedded."
					},
					{
						"name": "uid",
						"in": "path",
						"description": "UID of an existing composition to be updated."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/demographics/ehr/{ehrId}/party": {
			"get": {
				"summary": "Retrieves the demographics info for the specified party.",
				"description": "<p>This method contacts the remote demographics service and returns a JSON description of the party (specified by the partyId path parameter) in whichever format the service provides, along with some meta-data.</p><p>A note about domains: all demographics operations take place within the requesting user's default domain. This means that the user can only query for and add parties that are in his default domain. If the user has no default domain set, a 400 Bad Request (DEMO-6088) error will be thrown.</p><p>Example of a successful response:</p><p><pre style="overflow-y: auto"><code>{n  "meta": {n    "href": "http: //localhost: 8082/rest/v1/demographics/ehr/89e610ee-aed2-41fb-9a70-8d30631bdaec/party"n  },n  "action": "RETRIEVE",n  "party": {n    "id": "1",n    "version": 0,n    "firstNames": "Bruce",n    "lastNames": "Wayne",n    "gender": "MALE",n    "dateOfBirth": "2014-03-03T15: 04: 24.456Z",n    "address": {n      "id": "1",n      "version": 0,n      "address": "FakeStreet15,
				GothamCity"n    },n    "partyAdditionalInfo": [n      {n        "id": "5",n        "version": 0,n        "key": "contact_info_hidden",n        "value": "yes"n      },n      {n        "id": "6",n        "version": 0,n        "key": "title",n        "value": "Mr"n      },n      {n        "id": "7",n        "version": 0,n        "key": "insurance_level",n        "value": "9"n      }n    ]n  }n}</pre></code></p>",
				"operationId": "getPartyByEhrId",
				"parameters": [
					{
						"name": "ehrId",
						"in": "path",
						"description": "EHR ID of the party to retrieve."
					},
					{
						"name": "when",
						"in": "query",
						"description": "The instant of time for which to return the information about the party in the ISO-8601 format (2014-03-03T15:05:43.992Z)."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/demographics/party": {
			"put": {
				"summary": "Updates a party record in the remote demographics store.",
				"description": "<div class="ehr-rest-summary"><p>This method updates a party, specified in the JSON request body.</p></div><p>The JSON request body has to be in the format that the remote demographics service understands. See the documentation for party POST to see a description of the format.</p><p>Successful response:</p><pre style="overflow-y: auto"><code>{n  "meta": {n    "href": "http: //localhost: 8082/rest/v1/demographics/party/16"n  },n  "action": "UPDATE"n}</pre></code></p><p>A note about domains: all demographics operations take place within the requesting user's default domain. This means that the user can only query for and add parties that are in his default domain. If the user has no default domain set, a 400 Bad Request (DEMO-6088) error will be thrown.</p>",
				"operationId": "updateParty",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "The party to update.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/demographics/party/query": {
			"post": {
				"summary": "Queries the demographics store for matching parties.",
				"description": "<div class="ehr-rest-summary"><p>This method queries the demographics store for matching parties, using a JSON array of key-value arguments as the search criteria.</p></div><p>The JSON request body is an array of key-value search criteria that are then used as the WHERE clause of the SQL query (a conjunction (AND) of the individual key-value pairs will be used to produce the WHERE clause).</p><p>The format of the restriction clause:</p><pre style="overflow-y: auto"><code>{n    "key": "string",n    "value": "string"n}</pre></code></p><p>The special key <code>search</code> will perform an OR-search on both the firstNames and the lastNames property of the party.</p><p>A case-insensitive search will be performed for matching keys and values.</p><p>Please note that all properties whose key names start with date or time are considered to be ISO-8601 timestamps (1980-04-12T00:00:00.000Z) and will be attempted to be parsed as such. Failure to parse such criteria will result in a 400 Bad Request error.</p><p>An example of complex search criteria:</p><pre style="overflow-y: auto"><code>[n   {n    "key": "firstNames",n    "value": "*Bruce*"n   },n   {n    "key": "dateOfBirth",n    "value": "1980-04-12T00: 00: 00.000Z"n   },n   {n    "key": "gender",n    "value": "MALE"n   },n   {n    "key": "insuranceLevel",n    "value": "5"n   }n]</pre></code></p><p>This will find all parties whose first names include Bruce that have been born on the 12th of April, 1980, are male and have the additional property insuranceLevel set to 9.</p><p>For string based values, the * character can be used to indicate wildcard-matching behavior.</p><p>An example of a successful response body:</p><pre style="overflow-y: auto"><code>{n  "meta": {n    "href": "http: //localhost: 8082/rest/v1/demographics/party/query/?lastNames=*Way*"n  },n  "action": "RETRIEVE",n  "parties": [n    {n      "id": "1",n      "version": 0,n      "firstNames": "Bruce",n      "lastNames": "Wayne",n      "gender": "MALE",n      "dateOfBirth": "2014-03-03T15: 04: 24.456Z",n      "address": {n        "id": "1",n        "version": 0,n        "address": "FakeStreet15,
				GothamCity"n      },n      "partyAdditionalInfo": [n        {n          "id": "7",n          "version": 0,n          "key": "insurance_level",n          "value": "9"n        },n        {n          "id": "6",n          "version": 0,n          "key": "title",n          "value": "Mr"n        },n        {n          "id": "5",n          "version": 0,n          "key": "contact_info_hidden",n          "value": "yes"n        }n      ]n    },n    {n      "id": "9",n      "version": 0,n      "firstNames": "Selina",n      "lastNames": "Wayne",n      "gender": "FEMALE",n      "dateOfBirth": "1980-03-03T15: 04: 24.456Z",n      "address": {n        "id": "9",n        "version": 0,n        "address": "FakeStreet19,
				GothamCity"n      },n      "partyAdditionalInfo": [n        {n          "id": "15",n          "version": 0,n          "key": "title",n          "value": "Mrs"n        },n        {n          "id": "16",n          "version": 0,n          "key": "insurance_level",n          "value": "10"n        },n        {n          "id": "10",n          "version": 0,n          "key": "contact_info_hidden",n          "value": "no"n        }n      ]n    }n  ]n}</pre></code></p><p>A note about domains: all demographics operations take place within the requesting user's default domain. This means that the user can only query for and add parties that are in his default domain. If the user has no default domain set, a 400 Bad Request (DEMO-6088) error will be thrown.</p>",
				"operationId": "queryParties",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "An array of key-value query criteria.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "maxHits",
						"in": "query",
						"description": "Limit the query results to this many hits."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/demographics/party/{partyId}": {
			"get": {
				"summary": "Retrieves the demographics info for the specified party.",
				"description": "<p>This method contacts the remote demographics service and returns a JSON description of the party (specified by the partyId path parameter) in whichever format the service provides, along with some meta-data.</p><p>A note about domains: all demographics operations take place within the requesting user's default domain. This means that the user can only query for and add parties that are in his default domain. If the user has no default domain set, a 400 Bad Request (DEMO-6088) error will be thrown.</p><p>Example of a successful response:</p><p><pre style="overflow-y: auto"><code>{n  "meta": {n    "href": "http: //localhost: 8082/rest/v1/demographics/party/1"n  },n  "action": "RETRIEVE",n  "party": {n    "id": "1",n    "version": 0,n    "firstNames": "Bruce",n    "lastNames": "Wayne",n    "gender": "MALE",n    "dateOfBirth": "2014-03-03T15: 04: 24.456Z",n    "address": {n      "id": "1",n      "version": 0,n      "address": "FakeStreet15,
				GothamCity"n    },n    "partyAdditionalInfo": [n      {n        "id": "5",n        "version": 0,n        "key": "contact_info_hidden",n        "value": "yes"n      },n      {n        "id": "6",n        "version": 0,n        "key": "title",n        "value": "Mr"n      },n      {n        "id": "7",n        "version": 0,n        "key": "insurance_level",n        "value": "9"n      }n    ]n  }n}</pre></code></p>",
				"operationId": "getParty",
				"parameters": [
					{
						"name": "partyId",
						"in": "path",
						"description": "The external ID of the party to retrieve."
					},
					{
						"name": "when",
						"in": "query",
						"description": "The instant of time for which to return the information about the party in the ISO-8601 format (2014-03-03T15:05:43.992Z)."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/ehr": {
			"post": {
				"summary": "Creates a new EHR.",
				"description": "<p>Creates a new EHR and returns its ID.</p><p>The caller can specify an external subject ID and namespace to whom the new EHR will belong.</p><p>An example of a successful response body:</p><p><pre><code>{n  "meta": {n    "href": "http: //localhost: 8082/rest/v1/ehr/f77f9b4a-cfda-414d-aa6c-4f78bcac7601"n  },n  "action": "CREATE",n  "ehrId": "f77f9b4a-cfda-414d-aa6c-4f78bcac7601"n}</pre></code></p>",
				"operationId": "createEhr",
				"parameters": [
					{
						"name": "committerName",
						"in": "query",
						"description": "The name of the committer user. If omitted, the current sessions logged in users name will be used."
					},
					{
						"name": "subjectId",
						"in": "query",
						"description": "The external ID of the user who will own this EHR."
					},
					{
						"name": "subjectNamespace",
						"in": "query",
						"description": "The namespace the subjectId belongs to."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/ehr/status/{ehrId}": {
			"put": {
				"summary": "Update EHR_STATUS of an EHR.",
				"description": "<p>Updates EHR_STATUS of an EHR.</p><p>An example of a request body:</p><p><pre><code>{n    "subjectId": "90470912",n    "subjectNamespace": "ExternalDB",n    "queryable": true,n    "modifiable": truen}</pre></code></p><p>An example of a successful response body:</p><pre style="overflow-y: auto"><code>{n  "meta": {n    "href": "http: //localhost: 8082/rest/v1/ehr/649eb8dd-787d-4669-bcc9-185903c6ddcb"n  },n  "action": "UPDATE"n}</pre></code></p>",
				"operationId": "updateEhrStatus",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "EHR status.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "ehrId",
						"in": "path",
						"description": "EHR ID."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/ehr/{ehrId}": {
			"get": {
				"summary": "Returns information about the specified EHR.",
				"description": "<p>Returns a JSON representation of the state of the specified EHR.</p><p>An example of a successful response body:</p><p><pre><code>{n  "meta": {n    "href": "http: //localhost: 8082/rest/v1/ehr/f77f9b4a-cfda-414d-aa6c-4f78bcac7601"n  },n  "action": "RETRIEVE",n  "ehrStatus": {n    "subjectId": "90470912",n    "subjectNamespace": "ExternalDB",n    "queryable": true,n    "modifiable": truen  },n  "ehrId": "f77f9b4a-cfda-414d-aa6c-4f78bcac7601"n}</pre></code></p>",
				"operationId": "getEhr",
				"parameters": [
					{
						"name": "ehrId",
						"in": "path",
						"description": "The ID of the EHR to return."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/form": {
			"get": {
				"summary": "Lists Think!Ehr forms.",
				"description": "<p>Returns a list of Think!Ehr form definitions.</p><p>This call only returns form meta-data and no form resources.</p><p>Example of a successful call:<pre><code>{n  "forms": [n    {n      "templateId": "VitalSigns",n      "name": "Basic",n      "version": "1.0.0",n      "createdTimestamp": "2014-03-03T09: 46: 54.272+01: 00",n      "status": "active",n      "category": "Default",n      "creator": "ehrscape",n      "type": "JSON"n    },n    {n      "templateId": "VitalSigns",n      "name": "Extended",n      "version": "1.0.1",n      "createdTimestamp": "2014-03-03T10: 02: 13.135+01: 00",n      "status": "active",n      "category": "Default",n      "creator": "ehrscape",n      "type": "JSON"n    }n  ]n}</code></pre></p>",
				"operationId": "getForms",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/form/{name}/{version}": {
			"get": {
				"summary": "Loads a Think!Ehr form.",
				"description": "<p>Returns a Think!Ehr form denoted by its name and version.</p><p>This call can return only the form and form resource meta-data (the default), or it can already expand the specified (or all) form  resources. See the description of the resources parameter for details.</p><p>In case of resource expansion, for resources that are of the source type (text, JSON etc.), this method will do its best to transform the resource content into the correct JSON type (for example, a JSON object, or a JSON text node). For binary resources, the content resource property will contain raw bytes.</p><p>Example of a successful call, with the form-layout property expanded (?resources=form-layout):<pre><code>{n  "meta": {n    "href": "http: //localhost: 8082/rest/v1/form/TM_Simple_Vital_Functions/1.5.1"n  },n  "form": {n    "templateId": "TM-SimpleVitalFunctions",n    "name": "TM_Simple_Vital_Functions",n    "version": "1.5.1",n    "createdTimestamp": "2013-12-10T16: 27: 41.277+01: 00",n    "status": "active",n    "category": "Default",n    "creator": "admin",n    "type": "JSON",n    "resources": [n      {n        "name": "form-description",n        "mimetype": "application/json",n        "type": "source",n        "href": "http: //localhost: 8082/rest/v1/form/TM_Simple_Vital_Functions/1.5.1/resource/form-description"n      },n      {n        "name": "form-language",n        "mimetype": "text/plain",n        "type": "source",n        "href": "http: //localhost: 8082/rest/v1/form/TM_Simple_Vital_Functions/1.5.1/resource/form-language"n      },n      {n        "name": "form-layout",n        "mimetype": "application/json",n        "type": "source",n        "href": "http: //localhost: 8082/rest/v1/form/TM_Simple_Vital_Functions/1.5.1/resource/form-layout",n        "content": [n          {n            "id": "row0",n            "idx": 0,n            "cols": [n              {n                "id": "row0-col0",n                "children": [],n                "rows": [n                  {n                    "id": "row0-col0-row0",n                    "idx": 0,n                    "cols": [n                      {n                        "id": "row0-col0-row0-col0",n                        "children": [n                          {n                            "id": "simple_vital_functions/body_weight/any_event/weight",n                            "idx": 0n                          }n                        ]n                      },n                      {n                        "id": "row0-col0-row0-col1",n                        "children": [n                          {n                            "id": "simple_vital_functions/height_length/any_event/height_length",n                            "idx": 0n                          }n                        ]n                      },n                      {n                        "id": "row0-col0-row0-col2",n                        "children": [n                          {n                            "id": "simple_vital_functions/body_mass_index/any_event/body_mass_index",n                            "idx": 0n                          }n                        ]n                      }n                    ]n                  },n                  {n                    "id": "row0-col0-row1",n                    "idx": 1,n                    "cols": [n                      {n                        "id": "row0-col0-row1-col0",n                        "children": [n                          {n                            "id": "simple_vital_functions/body_temperature/any_event/temperature",n                            "idx": 0n                          }n                        ]n                      },n                      {n                        "id": "row0-col0-row1-col1",n                        "children": [n                          {n                            "id": "simple_vital_functions/pulse/any_event/rate",n                            "idx": 0n                          },n                          {n                            "id": "simple_vital_functions/respirations/any_event/rate",n                            "idx": 1n                          }n                        ]n                      },n                      {n                        "id": "row0-col0-row1-col2",n                        "children": [n                          {n                            "id": "simple_vital_functions/blood_pressure/any_event/systolic",n                            "idx": 0n                          },n                          {n                            "id": "simple_vital_functions/blood_pressure/any_event/diastolic",n                            "idx": 1n                          }n                        ]n                      },n                      {n                        "id": "row0-col0-row1-col3",n                        "children": [n                          {n                            "id": "simple_vital_functions/indirect_oximetry/spo2",n                            "idx": 0n                          }n                        ]n                      }n                    ]n                  },n                  {n                    "id": "row0-col0-row2",n                    "idx": 2,n                    "cols": [n                      {n                        "id": "row0-col0-row2-col0",n                        "children": [n                          {n                            "id": "simple_vital_functions/story_or_history/pain/nil_significant",n                            "idx": 0n                          }n                        ]n                      },n                      {n                        "id": "row0-col0-row2-col1",n                        "children": [n                          {n                            "id": "simple_vital_functions/story_or_history/pain/observed_current_intensity/degree",n                            "idx": 0n                          }n                        ]n                      }n                    ]n                  }n                ]n              }n            ]n          }n        ]n      },n      {n        "name": "form-title",n        "mimetype": "text/plain",n        "type": "source",n        "href": "http: //localhost: 8082/rest/v1/form/TM_Simple_Vital_Functions/1.5.1/resource/form-title"n      }n    ]n  }n}</code></pre></p>",
				"operationId": "getForm",
				"parameters": [
					{
						"name": "name",
						"in": "path",
						"description": "The name of the form."
					},
					{
						"name": "resources",
						"in": "query",
						"description": "Which, if any, resources to expand. Possible values are NONE, ALL, SOURCE, BINARY or a comma-separated list of names of resources to load. Default: NONE."
					},
					{
						"name": "version",
						"in": "path",
						"description": "The version of the form, such as 1.0.0."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/form/{name}/{version}/resource/{resource}": {
			"get": {
				"summary": "Loads a Think!Ehr form resource content.",
				"description": "<p>Returns a Think!Ehr form resource content, optionally enveloped with meta-data.</p><p>Unless the envelope parameter is true, this method will return the actual contents of the resource as a response, with the  Content-Type HTTP header set to the correct media type for the resource (such as application/json, text/plain or image/jpeg). For example, if the resource is actually a JPEG image, the actual image will be returned in the HTTP response, with the Content-Type header set to image/jpeg.</p><p>If, however, the envelope parameter is set to true, then the usual envelope response will be returned, with all the meta-data about the resource, as explained in the model. Example: </p><p><pre><code>{n  "meta": {n    "href": "http: //localhost: 8082/rest/v1/form/UnitTestDemoForm/1.0.0/resource/form-language"n  },n  "formName": "UnitTestDemoForm",n  "formVersion": "1.0.0",n  "resource": {n    "name": "form-language",n    "mimetype": "text/plain",n    "type": "source",n    "href": "http: //localhost: 8082/rest/v1/form/UnitTestDemoForm/1.0.0/resource/form-language",n    "content": "en"n  }n}</pre></code></p><p>As usual, non-binary resources will be converted from bytes to their appropriate representation (text or JSON) within the envelope. Binary resources' content property will contain a raw byte representation of the resource.</p>",
				"operationId": "getFormResource",
				"parameters": [
					{
						"name": "envelope",
						"in": "query",
						"description": "Whether or not to wrap a response in a JSON object that includes meta-data, or just return the resource content (default)."
					},
					{
						"name": "name",
						"in": "path",
						"description": "The name of the form."
					},
					{
						"name": "resource",
						"in": "path",
						"description": "The name of the form resource."
					},
					{
						"name": "version",
						"in": "path",
						"description": "The version of the form, such as 1.0.0."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/import/csv": {
			"post": {
				"summary": "Import CSV data.",
				"description": "<p>Data needs to be properly formatted as CSV. The first row needs to contain column names which must match ids (paths) from web template - specified by query parameter templateId.</p><p>EHR matching is possible in 2 ways:</p><ul><li>- a column 'ehrId' is present in which case data is added to existing EHRs</li><li>- a column 'subjectId' is present in which case new EHRs will be created as required (in this case query parameter subjectNamespace is mandatory)</li></ul><p/><p>Example of a correct CSV file:<pre style="overflow-y: auto;overflow-x: auto"><code>subjectId,ctx/language,ctx/territory,vital_signs/body_temperature:0/any_event:0/temperature|magnitude,vital_signs/body_temperature:0/any_event:0/temperature|unitn1001,en,SI,37.1,u00b0Cn1002,en,SI,37.2,u00b0Cn1003,en,SI,37.3,u00b0Cn1004,en,SI,37.4,u00b0Cn1005,en,SI,37.5,u00b0Cn</code></pre></p><p>Result will be returned as a CSV file as well with 2 additional columns:</p><ul><li>- composition uid for successfully imported rows</li><li>- error message(s) for those rows where import failed</li></ul><p/><p>Example response file:<pre style="overflow-y: auto;overflow-x: auto"><code>"subjectId","ctx/language","ctx/territory","vital_signs/body_temperature: 0/any_event: 0/temperature|magnitude","vital_signs/body_temperature: 0/any_event: 0/temperature|unit","compositionUid","errors"n"1001","en","SI","37.1","u00b0C","326d42ff-fbcb-4c5c-9f59-dab03c035c2d: : demo: : 1",n"1002","en","SI","37.2","u00b0C","513e2bd8-cefc-4423-b84a-97f1436d726f: : demo: : 1",n"1003","en","SI","37.3","u00b0C","e0dcb42f-48c4-4fbe-9843-e45d552720b5: : demo: : 1",n"1004","en","SI","37.4","u00b0C","17663474-0512-4144-a6c2-b531f4073687: : demo: : 1",n"1005","en","SI","37.5","u00b0C","f044855d-5fd4-4106-95e2-9acff6b372c0: : demo: : 1",n</code></pre></p>",
				"operationId": "importData",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "committerName",
						"in": "query",
						"description": "Committer name (if not specified username is used instead)."
					},
					{
						"name": "composerName",
						"in": "query",
						"description": "Composer name (if not specified username is used instead)."
					},
					{
						"name": "converterLocale",
						"in": "query",
						"description": "Converter locale - specify when numeric values are formatted in a specific locale."
					},
					{
						"name": "subjectNamespace",
						"in": "query",
						"description": "Subject namespace (required when using subjectIds to identify EHRs)."
					},
					{
						"name": "templateId",
						"in": "query",
						"description": "Template ID"
					},
					{
						"name": "templateLanguage",
						"in": "query",
						"description": "Template language"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/presentation": {
			"post": {
				"summary": "Returns presentation documents for a specified AQL query.",
				"description": "<p>Returns presentation documents returned by the AQL query. Their content can be filtered by forms specified in request body.</p><p>Query should only return COMPOSITIONs, all other values will be ignored.</p> Several forms can be specified for filtering - they will be matched to the template of each composition. Compositions without a matching form for filtering will be returned with basic reference model filtering.</p><p>Here is how parameters (AQL query and its parameters as well as forms) are specified in the JSON body: </p><p><pre style="overflow-y: auto"><code>{n  "queryRequestData": {n    "aql": "SELECTcFROMCompositioncCONTAINSOBSERVATIONo[
					openEHR-EHR-OBSERVATION.body_temperature-zn.v1
				]WHEREo/data[
					at0002
				]/events[
					at0003
				]/data[
					at0001
				]/items[
					at0004
				]/value/magnitude<: tempFETCH1",n    "aqlParameters": {n      "temp": 40n    }n  },n  "formData": [n    {n      "formName": "DemoVitals",n      "versionString": "1.0.0"n    }n  ]n}</code></pre></p><p>The returned result-set is a collection of presentation documents.</p><p>An example of a successful response body:</p><p><pre style="overflow-y: auto"><code>[n    {n      "metadata": {n        "startTime": "2014-03-11T10: 27: 09.933+01: 00",n        "composer": "restTest",n        "name": "Vitals",n        "templateId": "DemoVitals"n      },n      "composition": {n        "rmType": "COMPOSITION",n        "label": "Vitals",n        "children": [n          {n            "rmType": "SECTION",n            "label": "Vitals",n            "children": [n              {n                "rmType": "OBSERVATION",n                "label": "Bodytemperature",n                "children": [n                  {n                    "rmType": "DV_QUANTITY",n                    "label": "Temperature",n                    "displayValue": "37.2u00b0C",n                    "rawValue": {n                      "magnitude": 37.2,n                      "units": "u00b0C",n                      "other_reference_ranges": []n                    },n                    "aqlPath": "/content[
					openEHR-EHR-SECTION.ispek_dialog.v1,
					'Vitals'
				]/items[
					openEHR-EHR-OBSERVATION.body_temperature-zn.v1
				]/data[
					at0002
				]/events[
					at0003
				]/data[
					at0001
				]/items[
					at0004
				]/value"n                  }n                ],n                "aqlPath": "/content[
					openEHR-EHR-SECTION.ispek_dialog.v1,
					'Vitals'
				]/items[
					openEHR-EHR-OBSERVATION.body_temperature-zn.v1
				]"n              }n            ],n            "aqlPath": "/content[
					openEHR-EHR-SECTION.ispek_dialog.v1,
					'Vitals'
				]"n          }n        ]n      }n    }n]</pre></code></p>",
				"operationId": "getPresentationDocuments",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/query": {
			"post": {
				"summary": "Querying with named parameter support.",
				"description": "<p>Returns the data produced by the specified query, supporting named parameter expansion.</p><p>The query to execute is specified as a JSON object, with one property describing the AQL and another describing a map of named parameters whose values are expanded before querying. See the model description below.<p>Here is how the AQL query and its parameters are specified in the JSON body: </p><p><pre style="overflow-y: auto"><code>{n"aql": "selecto/data[
					at0002
				]/events[
					at0003andname/value='Anyevent'
				]/data[
					at0001
				]/items[
					at0004
				]/value/magnitudeastemperature,
				o/data[
					at0002
				]/events[
					at0003andname/value='Anyevent'
				]/data[
					at0001
				]/items[
					at0004
				]/value/unitsasunitfromEHR[
					ehr_id/value='554f896d-faca-4513-bddf-664541146308d'
				]CONTAINSObservationo[
					openEHR-EHR-OBSERVATION.body_temperature-zn.v1
				]WHEREo/data[
					at0002
				]/events[
					at0003andname/value='Anyevent'
				]/data[
					at0001
				]/items[
					at0004
				]/value/magnitude>: temperatureando/data[
					at0002
				]/events[
					at0003andname/value='Anyevent'
				]/data[
					at0001
				]/items[
					at0.63andname/value='Symptoms'
				]/value/defining_code/code_string=: chillsorderbytemperaturedescfetch3",nn"aqlParameters": n{n   "temperature": 38.5,n   "chills": "at0.64"n }n}</code></pre></p><p>The :parameterName syntax (in the above example, :temperature and :chills) is used in the AQL string to mark the places where parameters will be expanded.</p>Note that the parameter types of the JSON request body are important. They need to roughly correspond to parameter types in the OpenEHR reference model. This means that if, for example, the property you're using in your query condition is a decimal value (like in the example above), then the JSON property should be an unquoted decimal value as well.<p>The $ehrUid placeholder will be replaced with the session's currently active EHR id, if there is one.</p><p>The returned result-set is an array of rows as returned by the query. Each row is a JSON object whose properties correspond to columns returned by the AQL query. These column properties have the same name as aliases in the SELECT clause of the query. In absence of these aliases, numeric marking of columns in the format #0, #1 ... is used.</p><p>This POST method does not in any way alter the server state, its purpose is to facilitate submission of queries in the HTTP body as JSON, supporting named parameter expansion. This enables us to determine the type of parameters more easily.</p><p>An example of a successful response body, querying for the three highest temperatures greater than 38.5 u00b0C whose symptoms also include chills, inside an EHR, with the unit and temperature SELECT aliases: </p><p><pre style="overflow-y: auto"><code>{n  "meta": {n    "href": "http: //localhost: 8082/rest/v1/query/?aql=select%20o/data%5Bat0002%5D/events%5Bat0003%20and%20name/value%3D'Any%20event'%5D/data%5Bat0001%5D/items%5Bat0004%5D/value/magnitude%20as%20temperature,
				%20o/data%5Bat0002%5D/events%5Bat0003%20and%20name/value%3D'Any%20event'%5D/data%5Bat0001%5D/items%5Bat0004%5D/value/units%20as%20unit%20from%20EHR%5Behr_id/value%3D'554f896d-faca-4513-bddf-664541146308d'%5D%20CONTAINS%20Observation%20o%5BopenEHR-EHR-OBSERVATION.body_temperature-zn.v1%5D%20WHERE%20o/data%5Bat0002%5D/events%5Bat0003%20and%20name/value%3D'Any%20event'%5D/data%5Bat0001%5D/items%5Bat0004%5D/value/magnitude%20%3E%2038.5%20and%20o/data%5Bat0002%5D/events%5Bat0003%20and%20name/value%3D'Any%20event'%5D/data%5Bat0001%5D/items%5Bat0.63%20and%20name/value%3D'Symptoms'%5D/value/defining_code/code_string%3D'at0.64'%20order%20by%20temperature%20desc%20fetch%203"n  },n  "resultSet": [n    {n      "unit": "u00b0C",n      "temperature": 38.8n    },n    {n      "unit": "u00b0C",n      "temperature": 38.8n    },n    {n      "unit": "u00b0C",n      "temperature": 38.8n    }n  ],n  "aql": "selecto/data[
					at0002
				]/events[
					at0003andname/value='Anyevent'
				]/data[
					at0001
				]/items[
					at0004
				]/value/magnitudeastemperature,
				o/data[
					at0002
				]/events[
					at0003andname/value='Anyevent'
				]/data[
					at0001
				]/items[
					at0004
				]/value/unitsasunitfromEHR[
					ehr_id/value='554f896d-faca-4513-bddf-664541146308d'
				]CONTAINSObservationo[
					openEHR-EHR-OBSERVATION.body_temperature-zn.v1
				]WHEREo/data[
					at0002
				]/events[
					at0003andname/value='Anyevent'
				]/data[
					at0001
				]/items[
					at0004
				]/value/magnitude>: temperatureando/data[
					at0002
				]/events[
					at0003andname/value='Anyevent'
				]/data[
					at0001
				]/items[
					at0.63andname/value='Symptoms'
				]/value/defining_code/code_string=: chillsorderbytemperaturedescfetch3",n  "executedAql": "selecto/data[
					at0002
				]/events[
					at0003andname/value='Anyevent'
				]/data[
					at0001
				]/items[
					at0004
				]/value/magnitudeastemperature,
				o/data[
					at0002
				]/events[
					at0003andname/value='Anyevent'
				]/data[
					at0001
				]/items[
					at0004
				]/value/unitsasunitfromEHR[
					ehr_id/value='554f896d-faca-4513-bddf-664541146308d'
				]CONTAINSObservationo[
					openEHR-EHR-OBSERVATION.body_temperature-zn.v1
				]WHEREo/data[
					at0002
				]/events[
					at0003andname/value='Anyevent'
				]/data[
					at0001
				]/items[
					at0004
				]/value/magnitude>38.5ando/data[
					at0002
				]/events[
					at0003andname/value='Anyevent'
				]/data[
					at0001
				]/items[
					at0.63andname/value='Symptoms'
				]/value/defining_code/code_string='at0.64'orderbytemperaturedescfetch3",n  "aqlParameters": {n    "temperature": 38.5,n    "chills": "at0.64"n  }n}</pre></code></p>",
				"operationId": "query",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "A JSON object representing the AQL query and its parameters (see model).",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/session": {
			"put": {
				"summary": "Pings an OpenEhr session.",
				"description": "<p>Pings the OpenEhr session specified by its ID, keeping it alive.</p><p>The purpose of this method is to enable clients to provide heartbeat functionality with regards to an OpenEhr session. Each session has a limited amount of time before it expires (configured on OpenEhr server) - this method touches the session and extends its lifespan for another such cycle.</p><p>This method can also be used to determine whether or not a session is still alive - a 204 response indicates that it is and a 404 that it is not.</p>",
				"operationId": "ping",
				"parameters": [
					{
						"name": "Ehr-Session",
						"in": "header",
						"description": "The ID of the session to ping. Required if this is not specified via the sessionId query parameter."
					},
					{
						"name": "sessionId",
						"in": "query",
						"description": "The ID of the session to ping. Required if this is not specified via the Ehr-Session HTTP header."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/session/ehr/{ehrId}": {
			"put": {
				"summary": "Sets the EHR on the session.",
				"description": "<p>Sets the specified EHR on the session.</p><p>This method will set the specified EHR ID to the specified, currently open EHR session. This EHR ID can then be used for query placeholder expansion (where it will replace the $ehrUid placeholder) and other calls where an EHR is expected to be set.</p><p>Example of a successful call response:<pre style="overflow-y: auto;"><code>{n  "meta": {n    "href": "http: //localhost: 8082/rest/v1/session/?sessionId=336c21cc-b37a-45ca-924e-f53530d1bb1e"n  },n  "action": "EXECUTE",n  "sessionId": "336c21cc-b37a-45ca-924e-f53530d1bb1e",n  "ehrId": "8846225a-daad-46ac-8ea3-ef866b019123"n}</code></pre></p>",
				"operationId": "useEhr",
				"parameters": [
					{
						"name": "Ehr-Session",
						"in": "header",
						"description": "The ID of the session to set the EHR on. Required if this is not specified via the sessionId query parameter."
					},
					{
						"name": "ehrId",
						"in": "path",
						"description": "The ID of the EHR to set on the session."
					},
					{
						"name": "sessionId",
						"in": "query",
						"description": "The ID of the session to set the EHR on. Required if this is not specified via the Ehr-Session HTTP header."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/session/ehr/{subjectNamespace}/{subjectId}": {
			"put": {
				"summary": "Sets the EHR on the session (via subject namespace and ID).",
				"description": "<p>Sets the EHR on the session, first finding it via the specified subject namespace and ID.</p><p>This method will set the EHR ID found via the subject namespace and ID to the specified, currently open EHR session. This EHR ID can then be used for query placeholder expansion (where it will replace the $ehrUid placeholder) and other calls where an EHR is expected to be set.</p><p>Example of a successful call response:<pre style="overflow-y: auto;"><code>{n  "meta": {n    "href": "http: //localhost: 8082/rest/v1/session/?sessionId=336c21cc-b37a-45ca-924e-f53530d1bb1e"n  },n  "action": "EXECUTE",n  "sessionId": "336c21cc-b37a-45ca-924e-f53530d1bb1e",n  "ehrId": "8846225a-daad-46ac-8ea3-ef866b019123"n}</code></pre></p>",
				"operationId": "findAndUseEhr",
				"parameters": [
					{
						"name": "Ehr-Session",
						"in": "header",
						"description": "The ID of the session to set the EHR on. Required if this is not specified via the sessionId query parameter."
					},
					{
						"name": "sessionId",
						"in": "query",
						"description": "The ID of the session to set the EHR on. Required if this is not specified via the Ehr-Session HTTP header."
					},
					{
						"name": "subjectId",
						"in": "path",
						"description": "The subject ID."
					},
					{
						"name": "subjectNamespace",
						"in": "path",
						"description": "The namespace where the subject ID lives."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/smart/records/{ehrId}/{modelName}": {
			"get": {
				"summary": "Returns SMART records for a patient.",
				"description": "",
				"operationId": "getRecords",
				"parameters": [
					{
						"name": "ehrId",
						"in": "path",
						"description": "EHR id."
					},
					{
						"name": "modelName",
						"in": "path",
						"description": "SMART model name."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/smart/records/{ehrId}/{modelName}/{recordId}": {
			"get": {
				"summary": "Returns specific SMART record for a patient.",
				"description": "",
				"operationId": "getRecord",
				"parameters": [
					{
						"name": "ehrId",
						"in": "path",
						"description": "EHR id."
					},
					{
						"name": "modelName",
						"in": "path",
						"description": "SMART model name."
					},
					{
						"name": "recordId",
						"in": "path",
						"description": "Record id."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/tagging": {
			"post": {
				"summary": "Tags the specified composition and/or its sub-structures.",
				"description": "<p>Tags something within the specified composition, or else the composition itself.</p><p>What to tag and how is specified in the HTTP request body. Please see the model description for the parameter. Basically, it consists of the composition unique ID that we want to tag, then a set of tag-AQL path pairs that specify the string tag and the path within the composition to tag. If this path is null, then the entire composition is considered to be tagged.<p>Example of a request:<pre><code>{n  "compositionUid": "843cd28d-5aa7-43cc-b112-b7848a79aea7: : default: : 1",n  "tags": [n    {n      "tag": "ENCOUNTER: 1"n    },n    {n      "tag": "CARE"n    },n    {n      "tag": "ENCOUNTER: 1",n      "aqlPath": "/content[
					openEHR-EHR-SECTION.section_a.v1
				]/items[
					at0001
				]/name"n    }n  ]n}</code></pre></p>",
				"operationId": "tag",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "The tag request object specifies what to tag and how.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/tagging/{compositionUid}": {
			"get": {
				"summary": "Returns tags for the specified composition.",
				"description": "<p>Returns a set of tag-AQL path pairs that show what and how is tagged within the specified composition.</p><p>If the returned tag object's AQL path is null, this signifies that the entire composition is tagged with the returned tag. Otherwise, the AQL path points to the object (composition sub-structure) that is tagged.</p><p>Example of a successful call:<pre><code>{n    "meta": {n        "href": "http: //localhost: 8082/rest/v1/tagging/843cd28d-5aa7-43cc-b112-b7848a79aea7/"n    },n    "action": "RETRIEVE",n    "tags": [n        {n            "tag": "ENCOUNTER: 1"n        },n        {n            "tag": "CARE"n        },n        {n            "tag": "ENCOUNTER: 1",n            "aqlPath": "/content[
					openEHR-EHR-SECTION.section_a.v1
				]/items[
					at0001
				]/name"n        },n        {n            "tag": "SWAGGER4",n            "aqlPath": "/content[
					openEHR-EHR-SECTION.section_a.v1
				]/items[
					at0001
				]/name"n        },n        {n            "tag": "SWAGGER3"n        },n        {n            "tag": "SWAGGER2"n        },n        {n            "tag": "SWAGGER"n        }n    ]n}</code></pre></p>",
				"operationId": "getTags",
				"parameters": [
					{
						"name": "compositionUid",
						"in": "path",
						"description": "The ID of the composition whose tags to return."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/template": {
			"post": {
				"summary": "Uploads an operational template.",
				"description": "<p>This call allows uploading openEHR operational templates prepared by the openEHR modelling tools.</p>",
				"operationId": "saveTemplate",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/template/{templateId}": {
			"get": {
				"summary": "Loads an OpenEhr web template.",
				"description": "<p>Returns an OpenEhr template in its web-appropriate representation (as a JSON object).</p><p>A note on languages: the web template will be generated with localized names for all the languages that the underlying template supports, unless it is specified differently via the defaultLanguage and languages query parameters, both of which are optional. The defaultLanguage parameter determines the default name for each web template node (the localizedName property), whereas the languages parameter will generate additional localized names inside the localizedNames map for all the languages listed in this parameter (different languages should be separated by a comma: en,sl,no). See the example below.</p><p>Note that the underlying OpenEhr template needs to support these languages, or else a 400 error (bad request) will be returned (TMPL-3061).<p>Example of a successful call response:<pre style="overflow-y: auto;overflow-x: auto;height: 500px;"><code>{n  "meta": {n    "href": "http: //localhost: 8082/rest/v1/template/Demo%20Vitals"n  },n  "webTemplate": {n    "templateId": "DemoVitals",n    "version": "1.1",n    "defaultLanguage": "en",n    "languages": [n      "en",n      "sl"n    ],n    "tree": {n      "id": "vitals",n      "name": "Vitals",n      "localizedName": "Vitals",n      "rmType": "COMPOSITION",n      "nodeId": "openEHR-EHR-COMPOSITION.encounter.v1",n      "min": 1,n      "max": 1,n      "localizedNames": {n        "sl": "Encounter",n        "en": "Encounter"n      },n      "aqlPath": "",n      "children": [n        {n          "id": "vitals",n          "name": "Vitals",n          "localizedName": "Vitals",n          "rmType": "SECTION",n          "nodeId": "openEHR-EHR-SECTION.ispek_dialog.v1",n          "min": 0,n          "max": 1,n          "localizedNames": {n            "sl": "Dialog",n            "en": "Dialog"n          },n          "aqlPath": "/content[
					openEHR-EHR-SECTION.ispek_dialog.v1,
					'Vitals'
				]",n          "children": [n            {n              "id": "haemoglobin_a1c",n              "name": "HaemoglobinA1c",n              "localizedName": "HaemoglobinA1c",n              "rmType": "OBSERVATION",n              "nodeId": "openEHR-EHR-OBSERVATION.lab_test-hba1c.v1",n              "min": 0,n              "max": -1,n              "localizedNames": {n                "sl": "HemoglobinA1c",n                "en": "HaemoglobinA1c"n              },n              "aqlPath": "/content[
					openEHR-EHR-SECTION.ispek_dialog.v1,
					'Vitals'
				]/items[
					openEHR-EHR-OBSERVATION.lab_test-hba1c.v1
				]",n              "children": [n                {n                  "id": "requestor_order_identifier",n                  "name": "Requestororderidentifier",n                  "localizedName": "Requestororderidentifier",n                  "rmType": "DV_TEXT",n                  "nodeId": "at0062",n                  "min": 0,n                  "max": 1,n                  "dependsOn": [n                    "any_event"n                  ],n                  "localizedNames": {n                    "sl": "IDnarou010dnika",n                    "en": "Requestororderidentifier"n                  },n                  "aqlPath": "/content[
					openEHR-EHR-SECTION.ispek_dialog.v1,
					'Vitals'
				]/items[
					openEHR-EHR-OBSERVATION.lab_test-hba1c.v1
				]/protocol[
					at0004
				]/items[
					at0062
				]/value",n                  "input": {n                    "type": "TEXT"n                  }n                },n                {n                  "id": "receiver_order_identifier",n                  "name": "ReceiverorderIdentifier",n                  "localizedName": "ReceiverorderIdentifier",n                  "rmType": "DV_TEXT",n                  "nodeId": "at0063",n                  "min": 0,n                  "max": 1,n                  "dependsOn": [n                    "any_event"n                  ],n                  "localizedNames": {n                    "sl": "IDprejemnika",n                    "en": "ReceiverorderIdentifier"n                  },n                  "aqlPath": "/content[
					openEHR-EHR-SECTION.ispek_dialog.v1,
					'Vitals'
				]/items[
					openEHR-EHR-OBSERVATION.lab_test-hba1c.v1
				]/protocol[
					at0004
				]/items[
					at0063
				]/value",n                  "input": {n                    "type": "TEXT"n                  }n                },n                {n                  "id": "laboratory_test_result_identifier",n                  "name": "Laboratorytestresultidentifier",n                  "localizedName": "Laboratorytestresultidentifier",n                  "rmType": "DV_TEXT",n                  "nodeId": "at0068",n                  "min": 0,n                  "max": 1,n                  "dependsOn": [n                    "any_event"n                  ],n                  "localizedNames": {n                    "sl": "IDlaboratorijskegatesta",n                    "en": "Laboratorytestresultidentifier"n                  },n                  "aqlPath": "/content[
					openEHR-EHR-SECTION.ispek_dialog.v1,
					'Vitals'
				]/items[
					openEHR-EHR-OBSERVATION.lab_test-hba1c.v1
				]/protocol[
					at0004
				]/items[
					at0068
				]/value",n                  "input": {n                    "type": "TEXT"n                  }n                },n                {n                  "id": "datetime_result_issued",n                  "name": "Datetimeresultissued",n                  "localizedName": "Datetimeresultissued",n                  "rmType": "DV_DATE_TIME",n                  "nodeId": "at0075",n                  "min": 0,n                  "max": 1,n                  "dependsOn": [n                    "any_event"n                  ],n                  "localizedNames": {n                    "sl": "Datuminu010dasdobljenihrezultatov",n                    "en": "Datetimeresultissued"n                  },n                  "annotations": {n                    "comment": "Thedateandtimerelatedtotheresultsstatusis\nusefulforversioncontrolandcumulativeresultsforthereport.\n"n                  },n                  "aqlPath": "/content[
					openEHR-EHR-SECTION.ispek_dialog.v1,
					'Vitals'
				]/items[
					openEHR-EHR-OBSERVATION.lab_test-hba1c.v1
				]/protocol[
					at0004
				]/items[
					at0075
				]/value",n                  "input": {n                    "type": "DATETIME"n                  }n                },n                {n                  "id": "any_event",n                  "name": "Anyevent",n                  "localizedName": "Anyevent",n                  "rmType": "EVENT",n                  "nodeId": "at0002",n                  "min": 0,n                  "max": -1,n                  "localizedNames": {n                    "sl": "*Anyevent(en)",n                    "en": "Anyevent"n                  },n                  "aqlPath": "/content[
					openEHR-EHR-SECTION.ispek_dialog.v1,
					'Vitals'
				]/items[
					openEHR-EHR-OBSERVATION.lab_test-hba1c.v1
				]/data[
					at0001
				]/events[
					at0002
				]",n                  "children": [n                    {n                      "id": "test_name",n                      "name": "Testname",n                      "localizedName": "Testname",n                      "rmType": "DV_TEXT",n                      "nodeId": "at0005",n                      "min": 0,n                      "max": 1,n                      "localizedNames": {n                        "sl": "Nazivtesta",n                        "en": "Testname"n                      },n                      "aqlPath": "/content[
					openEHR-EHR-SECTION.ispek_dialog.v1,
					'Vitals'
				]/items[
					openEHR-EHR-OBSERVATION.lab_test-hba1c.v1
				]/data[
					at0001
				]/events[
					at0002
				]/data[
					at0003
				]/items[
					at0005
				]/value",n                      "input": {n                        "type": "TEXT"n                      }n                    },n                    {n                      "id": "diagnostic_service",n                      "name": "Diagnosticservice",n                      "localizedName": "Diagnosticservice",n                      "rmType": "DV_TEXT",n                      "nodeId": "at0077",n                      "min": 0,n                      "max": 1,n                      "localizedNames": {n                        "sl": "Nazivdiagnostiu010dnegalaboratorija",n                        "en": "Diagnosticservice"n                      },n                      "aqlPath": "/content[
					openEHR-EHR-SECTION.ispek_dialog.v1,
					'Vitals'
				]/items[
					openEHR-EHR-OBSERVATION.lab_test-hba1c.v1
				]/data[
					at0001
				]/events[
					at0002
				]/data[
					at0003
				]/items[
					at0077
				]/value",n                      "input": {n                        "type": "TEXT"n                      }n                    },n                    {n                      "id": "test_status",n                      "name": "Teststatus",n                      "localizedName": "Teststatus",n                      "rmType": "DV_CODED_TEXT",n                      "nodeId": "at0073",n                      "min": 0,n                      "max": 1,n                      "localizedNames": {n                        "sl": "Statustesta",n                        "en": "Teststatus"n                      },n                      "aqlPath": "/content[
					openEHR-EHR-SECTION.ispek_dialog.v1,
					'Vitals'
				]/items[
					openEHR-EHR-OBSERVATION.lab_test-hba1c.v1
				]/data[
					at0001
				]/events[
					at0002
				]/data[
					at0003
				]/items[
					at0073
				]/value/defining_code",n                      "input": {n                        "type": "CODED_TEXT",n                        "list": [n                          {n                            "value": "at0037",n                            "label": "Interim",n                            "localizedLabels": {n                              "sl": "Zau010dasen",n                              "en": "Interim"n                            }n                          },n                          {n                            "value": "at0038",n                            "label": "Final",n                            "localizedLabels": {n                              "sl": "Konu010dni",n                              "en": "Final"n                            }n                          },n                          {n                            "value": "at0039",n                            "label": "Supplementary",n                            "localizedLabels": {n                              "sl": "Dodaten",n                              "en": "Supplementary"n                            }n                          },n                          {n                            "value": "at0040",n                            "label": "Corrected(amended)",n                            "localizedLabels": {n                              "sl": "Popravek",n                              "en": "Corrected(amended)"n                            }n                          },n                          {n                            "value": "at0074",n                            "label": "Aborted",n                            "localizedLabels": {n                              "sl": "Nirazvit",n                              "en": "Aborted"n                            }n                          },n                          {n                            "value": "at0079",n                            "label": "Neverperformed",n                            "localizedLabels": {n                              "sl": "Nikoliizveden",n                              "en": "Neverperformed"n                            }n                          }n                        ]n                      }n                    },n                    {n                      "id": "hba1c",n                      "name": "HbA1c",n                      "localizedName": "HbA1c",n                      "rmType": "DV_PROPORTION",n                      "nodeId": "at0078.1",n                      "min": 0,n                      "max": 1,n                      "localizedNames": {n                        "sl": "HbA1c",n                        "en": "HbA1c"n                      },n                      "aqlPath": "/content[
					openEHR-EHR-SECTION.ispek_dialog.v1,
					'Vitals'
				]/items[
					openEHR-EHR-OBSERVATION.lab_test-hba1c.v1
				]/data[
					at0001
				]/events[
					at0002
				]/data[
					at0003
				]/items[
					at0078.1
				]/value",n                      "input": {n                        "type": "PROPORTION",n                        "list": [n                          {n                            "value": "%",n                            "label": "%",n                            "validation": {n                              "range": {n                                "minOp": ">=",n                                "min": 0,n                                "maxOp": "<=",n                                "max": 100n                              }n                            }n                          }n                        ]n                      }n                    },n                    {n                      "id": "overall_interpretation",n                      "name": "Overallinterpretation",n                      "localizedName": "Overallinterpretation",n                      "rmType": "DV_TEXT",n                      "nodeId": "at0057",n                      "min": 0,n                      "max": 1,n                      "localizedNames": {n                        "sl": "Dodatneopombe",n                        "en": "Overallinterpretation"n                      },n                      "aqlPath": "/content[
					openEHR-EHR-SECTION.ispek_dialog.v1,
					'Vitals'
				]/items[
					openEHR-EHR-OBSERVATION.lab_test-hba1c.v1
				]/data[
					at0001
				]/events[
					at0002
				]/data[
					at0003
				]/items[
					at0057
				]/value",n                      "input": {n                        "type": "TEXT"n                      }n                    },n                    {n                      "id": "time",n                      "name": "Time",n                      "rmType": "DV_DATE_TIME",n                      "min": 1,n                      "max": 1,n                      "aqlPath": "/content[
					openEHR-EHR-SECTION.ispek_dialog.v1,
					'Vitals'
				]/items[
					openEHR-EHR-OBSERVATION.lab_test-hba1c.v1
				]/data[
					at0001
				]/events[
					at0002
				]/time",n                      "input": {n                        "type": "DATETIME"n                      },n                      "inContext": truen                    }n                  ]n                },n                {n                  "id": "subject",n                  "name": "Subject",n                  "rmType": "PARTY_PROXY",n                  "min": 1,n                  "max": 1,n                  "aqlPath": "/content[
					openEHR-EHR-SECTION.ispek_dialog.v1,
					'Vitals'
				]/items[
					openEHR-EHR-OBSERVATION.lab_test-hba1c.v1
				]/subject",n                  "inContext": truen                },n                {n                  "id": "encoding",n                  "name": "Encoding",n                  "rmType": "CODE_PHRASE",n                  "min": 1,n                  "max": 1,n                  "aqlPath": "/content[
					openEHR-EHR-SECTION.ispek_dialog.v1,
					'Vitals'
				]/items[
					openEHR-EHR-OBSERVATION.lab_test-hba1c.v1
				]/encoding",n                  "input": {n                    "type": "CODED_TEXT"n                  },n                  "inContext": truen                },n                {n                  "id": "language",n                  "name": "Language",n                  "rmType": "CODE_PHRASE",n                  "min": 1,n                  "max": 1,n                  "aqlPath": "/content[
					openEHR-EHR-SECTION.ispek_dialog.v1,
					'Vitals'
				]/items[
					openEHR-EHR-OBSERVATION.lab_test-hba1c.v1
				]/language",n                  "input": {n                    "type": "CODED_TEXT"n                  },n                  "inContext": truen                }n              ]n            },n            {n              "id": "body_temperature",n              "name": "Bodytemperature",n              "localizedName": "Bodytemperature",n              "rmType": "OBSERVATION",n              "nodeId": "openEHR-EHR-OBSERVATION.body_temperature-zn.v1",n              "min": 0,n              "max": -1,n              "localizedNames": {n                "sl": "Telesnatemperatura",n                "en": "Bodytemperature"n              },n              "aqlPath": "/content[
					openEHR-EHR-SECTION.ispek_dialog.v1,
					'Vitals'
				]/items[
					openEHR-EHR-OBSERVATION.body_temperature-zn.v1
				]",n              "children": [n                {n                  "id": "site_of_measurement",n                  "name": "Siteofmeasurement",n                  "localizedName": "Siteofmeasurement",n                  "rmType": "DV_CODED_TEXT",n                  "nodeId": "at0021.1",n                  "min": 0,n                  "max": 1,n                  "dependsOn": [n                    "any_event"n                  ],n                  "localizedNames": {n                    "sl": "Lokacija",n                    "en": "Siteofmeasurement"n                  },n                  "aqlPath": "/content[
					openEHR-EHR-SECTION.ispek_dialog.v1,
					'Vitals'
				]/items[
					openEHR-EHR-OBSERVATION.body_temperature-zn.v1
				]/protocol[
					at0020
				]/items[
					at0021.1
				]/value/defining_code",n                  "input": {n                    "type": "CODED_TEXT",n                    "list": [n                      {n                        "value": "at0.60",n                        "label": "Buccal",n                        "localizedLabels": {n                          "sl": "Notranjastranliu010dnice",n                          "en": "Buccal"n                        }n                      },n                      {n                        "value": "at0.61",n                        "label": "Sublingual",n                        "localizedLabels": {n                          "sl": "Podjezikom",n                          "en": "Sublingual"n                        }n                      },n                      {n                        "value": "at0022",n                        "label": "Mouth",n                        "localizedLabels": {n                          "sl": "Usta",n                          "en": "Mouth"n                        }n                      },n                      {n                        "value": "at0023",n                        "label": "Earcanal",n                        "localizedLabels": {n                          "sl": "Vuu0161esu",n                          "en": "Earcanal"n                        }n                      },n                      {n                        "value": "at0024",n                        "label": "Axilla",n                        "localizedLabels": {n                          "sl": "Podpazduho",n                          "en": "Axilla"n                        }n                      },n                      {n                        "value": "at0025",n                        "label": "Rectum",n                        "localizedLabels": {n                          "sl": "Rektalno",n                          "en": "Rectum"n                        }n                      },n                      {n                        "value": "at0026",n                        "label": "Nasopharynx",n                        "localizedLabels": {n                          "sl": "Nazofarinks",n                          "en": "Nasopharynx"n                        }n                      },n                      {n                        "value": "at0027",n                        "label": "Urinarybladder",n                        "localizedLabels": {n                          "sl": "Seu010dnimehur",n                          "en": "Urinarybladder"n                        }n                      },n                      {n                        "value": "at0028",n                        "label": "Intravascular",n                        "localizedLabels": {n                          "sl": "Intravaskularno",n                          "en": "Intravascular"n                        }n                      },n                      {n                        "value": "at0043",n                        "label": "Skin",n                        "localizedLabels": {n                          "sl": "Nakou017ei",n                          "en": "Skin"n                        }n                      },n                      {n                        "value": "at0051",n                        "label": "Vagina",n                        "localizedLabels": {n                          "sl": "Vaginalno",n                          "en": "Vagina"n                        }n                      },n                      {n                        "value": "at0054",n                        "label": "Oesophagus",n                        "localizedLabels": {n                          "sl": "Vpou017eiralniku",n                          "en": "Oesophagus"n                        }n                      },n                      {n                        "value": "at0055",n                        "label": "Inguinalskincrease",n                        "localizedLabels": {n                          "sl": "Vustih",n                          "en": "Inguinalskincrease"n                        }n                      }n                    ]n                  }n                },n                {n                  "id": "other_site_of_measurement",n                  "name": "Othersiteofmeasurement",n                  "localizedName": "Othersiteofmeasurement",n                  "rmType": "DV_TEXT",n                  "nodeId": "at0.62",n                  "min": 0,n                  "max": 1,n                  "dependsOn": [n                    "any_event"n                  ],n                  "localizedNames": {n                    "sl": "Drugo",n                    "en": "Othersiteofmeasurement"n                  },n                  "aqlPath": "/content[
					openEHR-EHR-SECTION.ispek_dialog.v1,
					'Vitals'
				]/items[
					openEHR-EHR-OBSERVATION.body_temperature-zn.v1
				]/protocol[
					at0020
				]/items[
					at0.62
				]/value",n                  "input": {n                    "type": "TEXT"n                  }n                },n                {n                  "id": "any_event",n                  "name": "Anyevent",n                  "localizedName": "Anyevent",n                  "rmType": "EVENT",n                  "nodeId": "at0003",n                  "min": 0,n                  "max": -1,n                  "localizedNames": {n                    "sl": "*Anyevent(en)",n                    "en": "Anyevent"n                  },n                  "aqlPath": "/content[
					openEHR-EHR-SECTION.ispek_dialog.v1,
					'Vitals'
				]/items[
					openEHR-EHR-OBSERVATION.body_temperature-zn.v1
				]/data[
					at0002
				]/events[
					at0003
				]",n                  "children": [n                    {n                      "id": "body_exposure",n                      "name": "Bodyexposure",n                      "localizedName": "Bodyexposure",n                      "rmType": "DV_CODED_TEXT",n                      "nodeId": "at0030",n                      "min": 0,n                      "max": 1,n                      "dependsOn": [n                        "symptoms",n                        "temperature"n                      ],n                      "localizedNames": {n                        "sl": "Obleka",n                        "en": "Bodyexposure"n                      },n                      "aqlPath": "/content[
					openEHR-EHR-SECTION.ispek_dialog.v1,
					'Vitals'
				]/items[
					openEHR-EHR-OBSERVATION.body_temperature-zn.v1
				]/data[
					at0002
				]/events[
					at0003
				]/state[
					at0029
				]/items[
					at0030
				]/value/defining_code",n                      "input": {n                        "type": "CODED_TEXT",n                        "list": [n                          {n                            "value": "at0031",n                            "label": "Naked",n                            "localizedLabels": {n                              "sl": "Nag",n                              "en": "Naked"n                            }n                          },n                          {n                            "value": "at0032",n                            "label": "Reducedclothing/bedding",n                            "localizedLabels": {n                              "sl": "Premaloobleu010den(zavit)",n                              "en": "Reducedclothing/bedding"n                            }n                          },n                          {n                            "value": "at0033",n                            "label": "Appropriateclothing/bedding",n                            "localizedLabels": {n                              "sl": "Primernoobleu010den(zavit)",n                              "en": "Appropriateclothing/bedding"n                            }n                          },n                          {n                            "value": "at0034",n                            "label": "Increasedclothing/bedding",n                            "localizedLabels": {n                              "sl": "Preveu010dobleu010den(zavit)",n                              "en": "Increasedclothing/bedding"n                            }n                          }n                        ],n                        "defaultValue": {n                          "value": "at0033",n                          "label": "Appropriateclothing/bedding",n                          "localizedLabels": {n                            "sl": "Primernoobleu010den(zavit)",n                            "en": "Appropriateclothing/bedding"n                          }n                        }n                      }n                    },n                    {n                      "id": "description_of_thermal_stress",n                      "name": "Descriptionofthermalstress",n                      "localizedName": "Descriptionofthermalstress",n                      "rmType": "DV_TEXT",n                      "nodeId": "at0041",n                      "min": 0,n                      "max": 1,n                      "dependsOn": [n                        "symptoms",n                        "temperature"n                      ],n                      "localizedNames": {n                        "sl": "Opis",n                        "en": "Descriptionofthermalstress"n                      },n                      "aqlPath": "/content[
					openEHR-EHR-SECTION.ispek_dialog.v1,
					'Vitals'
				]/items[
					openEHR-EHR-OBSERVATION.body_temperature-zn.v1
				]/data[
					at0002
				]/events[
					at0003
				]/state[
					at0029
				]/items[
					at0041
				]/value",n                      "input": {n                        "type": "TEXT"n                      }n                    },n                    {n                      "id": "temperature",n                      "name": "Temperature",n                      "localizedName": "Temperature",n                      "rmType": "DV_QUANTITY",n                      "nodeId": "at0004",n                      "min": 0,n                      "max": 1,n                      "localizedNames": {n                        "sl": "Telesnatemperatura",n                        "en": "Temperature"n                      },n                      "aqlPath": "/content[
					openEHR-EHR-SECTION.ispek_dialog.v1,
					'Vitals'
				]/items[
					openEHR-EHR-OBSERVATION.body_temperature-zn.v1
				]/data[
					at0002
				]/events[
					at0003
				]/data[
					at0001
				]/items[
					at0004
				]/value",n                      "input": {n                        "type": "QUANTITY",n                        "list": [n                          {n                            "value": "u00b0C",n                            "label": "u00b0C",n                            "validation": {n                              "precision": {n                                "min": 1,n                                "max": 1n                              }n                            }n                          },n                          {n                            "value": "u00b0F",n                            "label": "u00b0F",n                            "validation": {n                              "precision": {n                                "min": 1,n                                "max": 1n                              }n                            }n                          }n                        ]n                      }n                    },n                    {n                      "id": "symptoms",n                      "name": "Symptoms",n                      "localizedName": "Symptoms",n                      "rmType": "DV_CODED_TEXT",n                      "nodeId": "at0.63",n                      "min": 0,n                      "max": 2,n                      "localizedNames": {n                        "sl": "Ugotovitve",n                        "en": "Symptoms"n                      },n                      "aqlPath": "/content[
					openEHR-EHR-SECTION.ispek_dialog.v1,
					'Vitals'
				]/items[
					openEHR-EHR-OBSERVATION.body_temperature-zn.v1
				]/data[
					at0002
				]/events[
					at0003
				]/data[
					at0001
				]/items[
					at0.63
				]/value/defining_code",n                      "input": {n                        "type": "CODED_TEXT",n                        "list": [n                          {n                            "value": "at0.64",n                            "label": "Chills/rigor/shivering",n                            "localizedLabels": {n                              "sl": "Mrazenje/mrzlica",n                              "en": "Chills/rigor/shivering"n                            }n                          },n                          {n                            "value": "at0.65",n                            "label": "Goose-bumps",n                            "localizedLabels": {n                              "sl": "Kurjapolt",n                              "en": "Goose-bumps"n                            }n                          }n                        ]n                      }n                    },n                    {n                      "id": "time",n                      "name": "Time",n                      "rmType": "DV_DATE_TIME",n                      "min": 1,n                      "max": 1,n                      "aqlPath": "/content[
					openEHR-EHR-SECTION.ispek_dialog.v1,
					'Vitals'
				]/items[
					openEHR-EHR-OBSERVATION.body_temperature-zn.v1
				]/data[
					at0002
				]/events[
					at0003
				]/time",n                      "input": {n                        "type": "DATETIME"n                      },n                      "inContext": truen                    }n                  ]n                },n                {n                  "id": "subject",n                  "name": "Subject",n                  "rmType": "PARTY_PROXY",n                  "min": 1,n                  "max": 1,n                  "aqlPath": "/content[
					openEHR-EHR-SECTION.ispek_dialog.v1,
					'Vitals'
				]/items[
					openEHR-EHR-OBSERVATION.body_temperature-zn.v1
				]/subject",n                  "inContext": truen                },n                {n                  "id": "encoding",n                  "name": "Encoding",n                  "rmType": "CODE_PHRASE",n                  "min": 1,n                  "max": 1,n                  "aqlPath": "/content[
					openEHR-EHR-SECTION.ispek_dialog.v1,
					'Vitals'
				]/items[
					openEHR-EHR-OBSERVATION.body_temperature-zn.v1
				]/encoding",n                  "input": {n                    "type": "CODED_TEXT"n                  },n                  "inContext": truen                },n                {n                  "id": "language",n                  "name": "Language",n                  "rmType": "CODE_PHRASE",n                  "min": 1,n                  "max": 1,n                  "aqlPath": "/content[
					openEHR-EHR-SECTION.ispek_dialog.v1,
					'Vitals'
				]/items[
					openEHR-EHR-OBSERVATION.body_temperature-zn.v1
				]/language",n                  "input": {n                    "type": "CODED_TEXT"n                  },n                  "inContext": truen                }n              ]n            }n          ]n        },n        {n          "id": "context",n          "rmType": "EVENT_CONTEXT",n          "nodeId": "",n          "min": 1,n          "max": 1,n          "aqlPath": "/context",n          "children": [n            {n              "id": "setting",n              "name": "Setting",n              "rmType": "DV_CODED_TEXT",n              "min": 1,n              "max": 1,n              "aqlPath": "/context/setting",n              "input": {n                "type": "CODED_TEXT"n              },n              "inContext": truen            },n            {n              "id": "start_time",n              "name": "Start_time",n              "rmType": "DV_DATE_TIME",n              "min": 1,n              "max": 1,n              "aqlPath": "/context/start_time",n              "input": {n                "type": "DATETIME"n              },n              "inContext": truen            }n          ]n        },n        {n          "id": "composer",n          "name": "Composer",n          "rmType": "PARTY_PROXY",n          "min": 1,n          "max": 1,n          "aqlPath": "/composer",n          "inContext": truen        }n      ]n    }n  }n}</code></pre></p>",
				"operationId": "getTemplate",
				"parameters": [
					{
						"name": "defaultLanguage",
						"in": "query",
						"description": "The default language to generate the returned web template with."
					},
					{
						"name": "languages",
						"in": "query",
						"description": "Other languages to include in the returned web template, separated by a comma."
					},
					{
						"name": "templateId",
						"in": "path",
						"description": "The ID of the template to load."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/template/{templateId}/example": {
			"get": {
				"summary": "Returns an example of data values for a web template.",
				"description": "<p>Returns an example of data values for a ThinkEhr web template.</p><p>This method will show all the web template paths that can be filled out in order to successfully save a composition in the web template format. It will do its best to generate legal exampledata values for those paths, taking into account the data type and validation constraints.</p><p>Two parameters control the output of this call. The format parameter controls whether the produced output will be the web template composition values in either the FLAT or the STRUCTURED (hierarchical) JSON format. The exampleFilter parameter controls whether the example will show the values as they would be submitted to the server (INPUT) or received from the server (OUTPUT), since the latter one is more detailed.</p><p>The two language parameters determine the languages that the web template will be generated with before its example values will be produced and returned. See the documentation for the {templateId} call for more information on web template languages.</p><p>Example of a successful call response (FLAT INPUT):<pre style="overflow-y: auto;overflow-x: auto;height: 500px;"><code>{n  "ctx/language": "en",n  "ctx/territory": "US",n  "ctx/composer_name": "SilviaBlake",n  "ctx/time": "2014-05-26T10: 06: 08.356+02: 00",n  "ctx/id_namespace": "HOSPITAL-NS",n  "ctx/id_scheme": "HOSPITAL-NS",n  "ctx/participation_name": "Dr.MarcusJohnson",n  "ctx/participation_function": "requester",n  "ctx/participation_mode": "face-to-facecommunication",n  "ctx/participation_id": "199",n  "ctx/participation_name: 1": "LaraMarkham",n  "ctx/participation_function: 1": "performer",n  "ctx/participation_id: 1": "198",n  "ctx/health_care_facility|name": "Hospital",n  "ctx/health_care_facility|id": "9091",n  "vitals/vitals/haemoglobin_a1c: 0/any_event: 0/test_name": "Testname90",n  "vitals/vitals/haemoglobin_a1c: 0/any_event: 0/diagnostic_service": "Diagnosticservice31",n  "vitals/vitals/haemoglobin_a1c: 0/any_event: 0/test_status|at0037": true,n  "vitals/vitals/haemoglobin_a1c: 0/any_event: 0/test_status|code": "at0037",n  "vitals/vitals/haemoglobin_a1c: 0/any_event: 0/hba1c|numerator": 79.56,n  "vitals/vitals/haemoglobin_a1c: 0/any_event: 0/hba1c|denominator": 100,n  "vitals/vitals/haemoglobin_a1c: 0/any_event: 0/overall_interpretation": "Overallinterpretation53",n  "vitals/vitals/haemoglobin_a1c: 0/requestor_order_identifier": "Ident.86",n  "vitals/vitals/haemoglobin_a1c: 0/receiver_order_identifier": "Ident.80",n  "vitals/vitals/haemoglobin_a1c: 0/laboratory_test_result_identifier": "Ident.40",n  "vitals/vitals/haemoglobin_a1c: 0/datetime_result_issued": "2014-05-26T08: 06: 08.360Z",n  "vitals/vitals/body_temperature: 0/any_event: 0/temperature|magnitude": 31.8,n  "vitals/vitals/body_temperature: 0/any_event: 0/temperature|unit": "u00b0C",n  "vitals/vitals/body_temperature: 0/any_event: 0/symptoms|at0.64": true,n  "vitals/vitals/body_temperature: 0/any_event: 0/symptoms: 0|code": "at0.64",n  "vitals/vitals/body_temperature: 0/any_event: 0/body_exposure|at0033": true,n  "vitals/vitals/body_temperature: 0/any_event: 0/body_exposure|code": "at0033",n  "vitals/vitals/body_temperature: 0/any_event: 0/description_of_thermal_stress": "Descriptionofthermalstress91",n  "vitals/vitals/body_temperature: 0/site_of_measurement|at0054": true,n  "vitals/vitals/body_temperature: 0/site_of_measurement|code": "at0054",n  "vitals/vitals/body_temperature: 0/other_site_of_measurement": "Othersiteofmeasurement30"n}</code></pre></p>",
				"operationId": "getTemplateExample",
				"parameters": [
					{
						"name": "defaultLanguage",
						"in": "query",
						"description": "The default language to generate the web template with."
					},
					{
						"name": "exampleFilter",
						"in": "query",
						"description": "The type of example to produce - intended for input (sent to the server), output (received back from the server) etc."
					},
					{
						"name": "format",
						"in": "query",
						"description": "The format of JSON representation of the example composition to return. Default: FLAT."
					},
					{
						"name": "languages",
						"in": "query",
						"description": "Other languages to include in the web template, separated by a comma."
					},
					{
						"name": "templateId",
						"in": "path",
						"description": "The ID of the template to load."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/view/{ehrId}/allergy": {
			"get": {
				"summary": "Gets allergies for a patient",
				"description": "",
				"operationId": "get_allergy",
				"parameters": [
					{
						"name": "ehrId",
						"in": "path",
						"description": "EHR ID"
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Maximum number of results to return (default = 10, max = 100)"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/view/{ehrId}/blood_pressure": {
			"get": {
				"summary": "Gets recorded blood pressures for a patient",
				"description": "",
				"operationId": "get_blood_pressure",
				"parameters": [
					{
						"name": "ehrId",
						"in": "path",
						"description": "EHR ID"
					},
					{
						"name": "from",
						"in": "query",
						"description": "Limit by date from"
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Maximum number of results to return (default = 10, max = 100)"
					},
					{
						"name": "to",
						"in": "query",
						"description": "Limit by date to"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/view/{ehrId}/body_temperature": {
			"get": {
				"summary": "Gets recorded body temperatures for a patient",
				"description": "",
				"operationId": "get_body_temperature",
				"parameters": [
					{
						"name": "ehrId",
						"in": "path",
						"description": "EHR ID"
					},
					{
						"name": "from",
						"in": "query",
						"description": "Limit by date from"
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Maximum number of results to return (default = 10, max = 100)"
					},
					{
						"name": "to",
						"in": "query",
						"description": "Limit by date to"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/view/{ehrId}/height": {
			"get": {
				"summary": "Gets recorded heights for a patient",
				"description": "",
				"operationId": "get_height",
				"parameters": [
					{
						"name": "ehrId",
						"in": "path",
						"description": "EHR ID"
					},
					{
						"name": "from",
						"in": "query",
						"description": "Limit by date from"
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Maximum number of results to return (default = 10, max = 100)"
					},
					{
						"name": "to",
						"in": "query",
						"description": "Limit by date to"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/view/{ehrId}/labs": {
			"get": {
				"summary": "Lab results",
				"description": "",
				"operationId": "get_labs",
				"parameters": [
					{
						"name": "ehrId",
						"in": "path",
						"description": "EHR ID"
					},
					{
						"name": "from",
						"in": "query",
						"description": "Limit by date from"
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Maximum number of results to return (default = 10, max = 100)"
					},
					{
						"name": "to",
						"in": "query",
						"description": "Limit by date to"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/view/{ehrId}/medication": {
			"get": {
				"summary": "Gets medications prescribed for a a patient",
				"description": "",
				"operationId": "get_medication",
				"parameters": [
					{
						"name": "ehrId",
						"in": "path",
						"description": "EHR ID"
					},
					{
						"name": "from",
						"in": "query",
						"description": "Limit by date from"
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Maximum number of results to return (default = 10, max = 100)"
					},
					{
						"name": "to",
						"in": "query",
						"description": "Limit by date to"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/view/{ehrId}/problem": {
			"get": {
				"summary": "Gets problems/diagnoses for a patient",
				"description": "",
				"operationId": "get_problem",
				"parameters": [
					{
						"name": "ehrId",
						"in": "path",
						"description": "EHR ID"
					},
					{
						"name": "from",
						"in": "query",
						"description": "Limit by date from"
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Maximum number of results to return (default = 10, max = 100)"
					},
					{
						"name": "to",
						"in": "query",
						"description": "Limit by date to"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/view/{ehrId}/pulse": {
			"get": {
				"summary": "Gets pulse measurements for a patient",
				"description": "",
				"operationId": "get_pulse",
				"parameters": [
					{
						"name": "ehrId",
						"in": "path",
						"description": "EHR ID"
					},
					{
						"name": "from",
						"in": "query",
						"description": "Limit by date from"
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Maximum number of results to return (default = 10, max = 100)"
					},
					{
						"name": "to",
						"in": "query",
						"description": "Limit by date to"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/view/{ehrId}/spO2": {
			"get": {
				"summary": "Gets SpO2 measurements for a patient",
				"description": "",
				"operationId": "get_spO2",
				"parameters": [
					{
						"name": "ehrId",
						"in": "path",
						"description": "EHR ID"
					},
					{
						"name": "from",
						"in": "query",
						"description": "Limit by date from"
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Maximum number of results to return (default = 10, max = 100)"
					},
					{
						"name": "to",
						"in": "query",
						"description": "Limit by date to"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/view/{ehrId}/weight": {
			"get": {
				"summary": "Gets recorded weights for a patient",
				"description": "",
				"operationId": "get_weight",
				"parameters": [
					{
						"name": "ehrId",
						"in": "path",
						"description": "EHR ID"
					},
					{
						"name": "from",
						"in": "query",
						"description": "Limit by date from"
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Maximum number of results to return (default = 10, max = 100)"
					},
					{
						"name": "to",
						"in": "query",
						"description": "Limit by date to"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/guide": {
			"get": {
				"summary": "List available guides.",
				"description": "",
				"operationId": "getGuides",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/guide/execute/{guideId}/{ehrIds}": {
			"get": {
				"summary": "Execute guide on given EHR IDs",
				"description": "",
				"operationId": "executeGuide",
				"parameters": [
					{
						"name": "Authorization",
						"in": "header",
						"description": "ThinkEhr credentials as HTTP Basic Authorization."
					},
					{
						"name": "Ehr-Session",
						"in": "header",
						"description": "Active Ehr Session token."
					},
					{
						"name": "ehrIds",
						"in": "path",
						"description": "Comma separated list of EHR ids, * for all."
					},
					{
						"name": "guideId",
						"in": "path",
						"description": "Guide ID."
					},
					{
						"name": "persist",
						"in": "query",
						"description": "Should save result of execution into EHR?"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/guide/upload": {
			"post": {
				"summary": "Uploads new guide definition.",
				"description": "",
				"operationId": "uploadGuide",
				"parameters": [
					{
						"name": "guide",
						"in": "form",
						"description": "Base64 encoded guide definition."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/guide/{guideId}": {
			"delete": {
				"summary": "Deletes guide.",
				"description": "",
				"operationId": "deleteGuide",
				"parameters": [
					{
						"name": "guideId",
						"in": "path",
						"description": "Guide ID."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/guide/{guideId}/gdl": {
			"get": {
				"summary": "Returns guide definition.",
				"description": "Guideline is defined in GDL. <a href='https://github.com/openEHR/gdl-tools/blob/master/cds/docs/specs/gdl-specs.pdf?raw=true' target='_blank'>GDL Specification</a>",
				"operationId": "getGuideGDL",
				"parameters": [
					{
						"name": "guideId",
						"in": "path",
						"description": "Guide ID."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/guide/{guideId}/toggleGuidePersistence": {
			"put": {
				"summary": "Toggles default behaviour of persisting guide execution result.",
				"description": "",
				"operationId": "toggleGuidePersistence",
				"parameters": [
					{
						"name": "guideId",
						"in": "path",
						"description": "Guide ID."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		}
	},
	"definitions": {
	}
}