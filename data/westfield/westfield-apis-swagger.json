{
  "swagger": "2.0",
  "info": {
    "version": "1",
    "title": "Westfield APIs",
    "description": "Westfield APIs"
  },
  "host": "api.westfield.io",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/categories": {
      "get": {
        "summary": "All categories",
        "description": "Returns a list of 0 or more categories, filtered according to the parameters provided.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Version of the API",
            "type": "string",
            "required": true,
            "default": 1
          },
          {
            "name": "westfield_locale",
            "description": "Westfield locale strings comprise a formal locale code with an optional centre code, separated by a '|' character",
            "type": "string",
            "in": "query",
            "pattern": "^[a-z]{2}(-[A-Z]{2})?(\\|[a-z]+)?$"
          },
          {
            "name": "max_depth",
            "type": "integer",
            "description": "How many levels of nested child categories should be returned. If this param is missing, no child categories will be returned.",
            "in": "query",
            "default": 0
          },
          {
            "name": "updated_since",
            "description": "Return categories that were updated after the specified date-time (supplied as ISO8601 Zulu Time)",
            "type": "string",
            "format": "date-time",
            "in": "query"
          },
          {
            "name": "deleted",
            "description": "Include deleted categories in the response",
            "type": "boolean",
            "in": "query"
          },
          {
            "name": "parent_id",
            "description": "The ID of the parent category.",
            "type": "integer",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of categories with localised names",
            "schema": {
              "$ref": "#/definitions/categoriesListResponse"
            }
          }
        }
      },
      "post": {
        "summary": "Create a new category",
        "description": "Creates a new category",
        "parameters": [
          {
            "name": "version",
            "description": "Version of the API",
            "type": "string",
            "in": "query",
            "required": true,
            "default": 1
          },
          {
            "name": "category",
            "description": "The created Category details",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/categoryPayload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created category",
            "schema": {
              "$ref": "#/definitions/categoryResponse"
            }
          },
          "422": {
            "description": "Unprocessable entity or request",
            "schema": {
              "$ref": "#/definitions/Category422Response"
            }
          }
        }
      },
      "x-services": [
        "category"
      ]
    },
    "/categories/{category_id}": {
      "get": {
        "summary": "Get a specific category",
        "description": "Returns information about a specific category.",
        "parameters": [
          {
            "name": "category_id",
            "description": "ID of category to get",
            "type": "integer",
            "in": "path",
            "required": true
          },
          {
            "name": "version",
            "description": "Version of the API",
            "type": "string",
            "in": "query",
            "required": true,
            "default": 1
          },
          {
            "name": "westfield_locale",
            "description": "Westfield locale strings comprise a language code with an optional centre code, separated by a '|' character",
            "type": "string",
            "in": "query",
            "pattern": "^[a-z]{2}(-[A-Z]{2})?(\\|[a-z]+)?$",
            "required": false
          },
          {
            "name": "max_depth",
            "type": "integer",
            "description": "How many levels of nested child categories should be returned. If this param is missing, no child categories will be returned.",
            "in": "query",
            "default": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Information about requested category.",
            "schema": {
              "$ref": "#/definitions/categoryResponse"
            }
          },
          "404": {
            "description": "Category not found",
            "schema": {
              "$ref": "#/definitions/404Response"
            }
          }
        }
      },
      "put": {
        "summary": "Update an existing category",
        "description": "Updates an existing category",
        "parameters": [
          {
            "name": "category_id",
            "description": "ID of the category to update",
            "type": "integer",
            "in": "path",
            "required": true
          },
          {
            "name": "version",
            "description": "Version of the API",
            "type": "string",
            "in": "query",
            "required": true,
            "default": 1
          },
          {
            "name": "category",
            "description": "The updated Category details",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/categoryPayload"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No data"
          },
          "404": {
            "description": "Category not found",
            "schema": {
              "$ref": "#/definitions/404Response"
            }
          },
          "422": {
            "description": "Unprocessable entity or request",
            "schema": {
              "$ref": "#/definitions/Category422Response"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an existing category",
        "description": "Deletes an existing category",
        "parameters": [
          {
            "name": "category_id",
            "description": "ID of the category to delete",
            "type": "integer",
            "in": "path",
            "required": true
          },
          {
            "name": "version",
            "description": "Version of the API",
            "type": "string",
            "in": "query",
            "required": true,
            "default": 1
          }
        ],
        "responses": {
          "204": {
            "description": "No data"
          },
          "404": {
            "description": "Category not found",
            "schema": {
              "$ref": "#/definitions/404Response"
            }
          }
        }
      },
      "x-services": [
        "category"
      ]
    },
    "/centres/{centre_id}/services": {
      "get": {
        "summary": "Services available to shoppers in Westfield Centres",
        "description": "Returns a list of all services available to shoppers in Westfield Centres.\n",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API Version",
            "type": "string",
            "default": "1"
          },
          {
            "name": "centre_id",
            "description": "Filter the list of services by centre",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "Return a specific page of results",
            "type": "integer"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Limit the number of results returned per page",
            "type": "integer"
          },
          {
            "name": "updated_since",
            "description": "Return services that were updated at or after the specified date-time (supplied as ISO8601 Zulu Time)",
            "type": "string",
            "in": "query",
            "format": "date-time"
          },
          {
            "name": "deleted",
            "description": "Include deleted services in the response",
            "type": "boolean",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of services",
            "schema": {
              "$ref": "#/definitions/servicesListResponse"
            }
          }
        }
      },
      "post": {
        "summary": "Creates a new service",
        "description": "Creates a new service with the supplied attributes.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Version of the API",
            "type": "string",
            "required": true
          },
          {
            "name": "centre_id",
            "description": "Filter the list of services by centre",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "service",
            "in": "body",
            "description": "Payload of data to create a service",
            "schema": {
              "$ref": "#/definitions/servicePayload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Information about the new service",
            "schema": {
              "$ref": "#/definitions/serviceResponse"
            }
          },
          "422": {
            "description": "Validation error information",
            "schema": {
              "$ref": "#/definitions/Service422Response"
            }
          }
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "/centres/{centre_id}/services/{service_id}": {
      "get": {
        "summary": "Service information",
        "description": "Return information about a specific service.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API Version",
            "type": "string",
            "default": "1"
          },
          {
            "name": "centre_id",
            "description": "Filter the list of services by centre",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "service_id",
            "in": "path",
            "description": "Service identifier",
            "type": "integer",
            "format": "int64",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Service information",
            "schema": {
              "$ref": "#/definitions/serviceResponse"
            }
          },
          "404": {
            "description": "Service not found error",
            "schema": {
              "$ref": "#/definitions/404Response"
            }
          }
        }
      },
      "patch": {
        "summary": "Update information about a specific service.",
        "description": "Update information about a specific service.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Version of the API",
            "type": "string",
            "required": true
          },
          {
            "name": "centre_id",
            "description": "The centre associated with the service",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "service_id",
            "in": "path",
            "description": "ID of service to fetch",
            "type": "integer",
            "format": "int64",
            "required": true
          },
          {
            "name": "service",
            "in": "body",
            "description": "Payload of data to update a service",
            "schema": {
              "$ref": "#/definitions/servicePayload"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Requested service was not found",
            "schema": {
              "$ref": "#/definitions/404Response"
            }
          },
          "422": {
            "description": "Validation error information",
            "schema": {
              "$ref": "#/definitions/Service422Response"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a service.",
        "description": "Delete a service.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Version of the API",
            "type": "string",
            "default": "1"
          },
          {
            "name": "centre_id",
            "description": "The centre associated with the service",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "service_id",
            "in": "path",
            "description": "ID of service to delete",
            "type": "integer",
            "format": "int64",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Requested service was not found",
            "schema": {
              "$ref": "#/definitions/404Response"
            }
          }
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "/centres/services/types": {
      "get": {
        "summary": "Service Types",
        "description": "Returns a list of all available service types",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API Version",
            "type": "string",
            "default": "1"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Return a specific page of results",
            "type": "integer"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Limit the number of results returned per page",
            "type": "integer"
          },
          {
            "name": "updated_since",
            "description": "Return service types that were updated at or after the specified date-time (supplied as ISO8601 Zulu Time)",
            "type": "string",
            "in": "query",
            "format": "date-time"
          },
          {
            "name": "deleted",
            "description": "Include deleted service types in the response",
            "type": "boolean",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of service types",
            "schema": {
              "$ref": "#/definitions/serviceTypesListResponse"
            }
          }
        }
      },
      "post": {
        "summary": "Create a new service type.",
        "description": "Create a new service type.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Version of the API",
            "type": "string",
            "default": "1"
          },
          {
            "name": "service_type",
            "in": "body",
            "description": "Payload of data to create a service type",
            "schema": {
              "$ref": "#/definitions/serviceTypePayload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Information about the new service type",
            "schema": {
              "$ref": "#/definitions/serviceTypeResponse"
            }
          },
          "422": {
            "description": "Validation error information",
            "schema": {
              "$ref": "#/definitions/ServiceType422Response"
            }
          }
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "/centres/services/types/{service_type_id}": {
      "get": {
        "summary": "Service type information",
        "description": "Return information about a specific service type",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API Version",
            "type": "string",
            "default": "1"
          },
          {
            "name": "service_type_id",
            "in": "path",
            "description": "Service type identifier",
            "type": "integer",
            "format": "int64",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Service type information",
            "schema": {
              "$ref": "#/definitions/serviceTypeResponse"
            }
          },
          "404": {
            "description": "Service type not found error",
            "schema": {
              "$ref": "#/definitions/404Response"
            }
          }
        }
      },
      "patch": {
        "summary": "Update information about a service type.",
        "description": "Update information about a service type.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Version of the API",
            "type": "string",
            "required": true
          },
          {
            "name": "service_type_id",
            "in": "path",
            "description": "ID of service to fetch",
            "type": "integer",
            "format": "int64",
            "required": true
          },
          {
            "name": "service_type",
            "in": "body",
            "description": "Payload of data to update a service type",
            "schema": {
              "$ref": "#/definitions/serviceTypePayload"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Requested service type was not found",
            "schema": {
              "$ref": "#/definitions/404Response"
            }
          },
          "422": {
            "description": "Validation error information",
            "schema": {
              "$ref": "#/definitions/ServiceType422Response"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a service type.",
        "description": "Delete a service type.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Version of the API",
            "type": "string",
            "default": "1"
          },
          {
            "name": "service_type_id",
            "in": "path",
            "description": "ID of service to delete",
            "type": "integer",
            "format": "int64",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Requested service type was not found",
            "schema": {
              "$ref": "#/definitions/404Response"
            }
          }
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "/centres": {
      "get": {
        "summary": "Centres (Index)",
        "description": "Returns all centre data filtered by query parameters",
        "parameters": [
          {
            "name": "country",
            "in": "query",
            "description": "Filter by country",
            "type": "string"
          },
          {
            "name": "enabled",
            "in": "query",
            "description": "Filter by enabled (true) or disabled (false) centres. Default is true.",
            "default": true,
            "type": "boolean"
          },
          {
            "name": "max_distance",
            "in": "query",
            "description": "Combined with near_to, determines the distance limit when requesting nearby centres. Default is 30km.",
            "type": "integer"
          },
          {
            "name": "near_to",
            "in": "query",
            "description": "A centre identifier. Returns the three closest centres within max_distance of the specified centre. Result is sorted by distance from the specified centre.",
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by retail (true) or non-retail (false) centres. Default is true.",
            "type": "boolean"
          },
          {
            "name": "state",
            "in": "query",
            "description": "Filter by state",
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "API Version",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of centres",
            "schema": {
              "$ref": "#/definitions/centreListResponse"
            }
          }
        }
      },
      "post": {
        "summary": "Centre (Create)",
        "description": "Create a new centre",
        "parameters": [
          {
            "name": "centre_data",
            "in": "body",
            "description": "Data for a new centre",
            "required": true,
            "schema": {
              "$ref": "#/definitions/centre_new"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "API Version",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the successfully created centre with a response header location field containing the URI",
            "schema": {
              "$ref": "#/definitions/centreCreateResponse"
            },
            "headers": {
              "location": {
                "description": "URI of created centre.",
                "type": "string"
              }
            }
          },
          "422": {
            "description": "Centre was not created. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/422CentreResponse"
            }
          }
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "/centres/{centre_id}": {
      "get": {
        "summary": "Centre (Show)",
        "description": "Returns data for the specified centre",
        "parameters": [
          {
            "name": "centre_id",
            "in": "path",
            "description": "Centre identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "API Version",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns data for the specifed centre",
            "schema": {
              "$ref": "#/definitions/centreResponse"
            }
          },
          "404": {
            "description": "Centre data specified by centre_id does not exist",
            "schema": {
              "$ref": "#/definitions/404Response"
            }
          }
        }
      },
      "patch": {
        "summary": "Centre (Update)",
        "description": "Updates supplied data for a centre",
        "parameters": [
          {
            "name": "centre_id",
            "in": "path",
            "description": "Centre identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "centre_data",
            "in": "body",
            "description": "Data to be updated",
            "schema": {
              "$ref": "#/definitions/centre_new"
            },
            "required": true
          },
          {
            "name": "version",
            "in": "query",
            "description": "API Version",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the centre. Response is empty."
          },
          "404": {
            "description": "Centre data specified by centre_id does not exist",
            "schema": {
              "$ref": "#/definitions/404Response"
            }
          },
          "422": {
            "description": "Centre could not be updated. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/422CentreResponse"
            }
          }
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "/notices": {
      "get": {
        "summary": "Notices (List)",
        "description": "Returns notices filtered by query parameters",
        "parameters": [
          {
            "name": "active",
            "in": "query",
            "description": "Filter to select active (true) or inactive (false) notices",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "centre_id",
            "in": "query",
            "description": "Filter to select notices for the centre with this identifier",
            "required": false,
            "type": "string"
          },
          {
            "name": "featured",
            "in": "query",
            "description": "Filter to select only featured (true) notices",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "version",
            "in": "query",
            "description": "API Version",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of selected notices",
            "schema": {
              "$ref": "#/definitions/noticeListResponse"
            }
          }
        }
      },
      "post": {
        "summary": "Notices (Create)",
        "description": "Create a new notice",
        "parameters": [
          {
            "name": "notice_data",
            "in": "body",
            "description": "Data for a new notice",
            "required": true,
            "schema": {
              "$ref": "#/definitions/notice_new"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "API Version",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the successfully created notice with a response header location field containing the URI",
            "schema": {
              "$ref": "#/definitions/noticeCreateResponse"
            },
            "headers": {
              "location": {
                "description": "URI of created notice.",
                "type": "string"
              }
            }
          },
          "422": {
            "description": "Notice was not created. Returns an array of error messages explaining the problems with the provided attributes",
            "schema": {
              "$ref": "#/definitions/422NoticeResponse"
            }
          }
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "/notices/{notice_id}": {
      "get": {
        "summary": "Notice (Show)",
        "description": "Returns data for the specified notice",
        "parameters": [
          {
            "name": "notice_id",
            "in": "path",
            "description": "Identifier of notice",
            "required": true,
            "type": "integer"
          },
          {
            "name": "version",
            "in": "query",
            "description": "API Version",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns data for the specified notice",
            "schema": {
              "$ref": "#/definitions/noticeResponse"
            }
          },
          "404": {
            "description": "Notice data specified by notice_id does not exist",
            "schema": {
              "$ref": "#/definitions/404Response"
            }
          }
        }
      },
      "patch": {
        "summary": "Notice (Update)",
        "description": "Updates supplied data for a notice",
        "parameters": [
          {
            "name": "notice_id",
            "in": "path",
            "description": "Identifier of notice",
            "required": true,
            "type": "integer"
          },
          {
            "name": "notice_data",
            "in": "body",
            "description": "Payload of data to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/notice_new"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "API Version",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Notice updated successfully. Response is empty."
          },
          "404": {
            "description": "Notice specified by notice_id does not exist",
            "schema": {
              "$ref": "#/definitions/404Response"
            }
          },
          "422": {
            "description": "Notice could not be updated. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/422NoticeResponse"
            }
          }
        }
      },
      "delete": {
        "summary": "Notice (Delete)",
        "description": "Delete the speciied notice",
        "parameters": [
          {
            "name": "notice_id",
            "in": "path",
            "description": "Identifier of notice",
            "required": true,
            "type": "integer"
          },
          {
            "name": "version",
            "in": "query",
            "description": "API Version",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Notice successfully deleted"
          },
          "404": {
            "description": "Notice specified by notice_id does not exist",
            "schema": {
              "$ref": "#/definitions/404Response"
            }
          }
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "/centres/parkings": {
      "post": {
        "summary": "Parkings (Create)",
        "description": "Create a centre parking detail",
        "parameters": [
          {
            "name": "parking_data",
            "in": "body",
            "description": "POST payload of data for a new parking record",
            "schema": {
              "$ref": "#/definitions/parking_new"
            },
            "required": true
          },
          {
            "name": "version",
            "in": "query",
            "description": "API Version",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the successfully created parking data with a response header location field containing the URI",
            "schema": {
              "$ref": "#/definitions/parkingCreateResponse"
            },
            "headers": {
              "location": {
                "description": "URI of created parking data",
                "type": "string"
              }
            }
          }
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "/centres/parkings/{id}": {
      "get": {
        "summary": "Parking (Show)",
        "description": "Returns parking data for the specified centre",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Centre identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "API Version",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns parking details for the specified centre",
            "schema": {
              "$ref": "#/definitions/parkingResponse"
            }
          },
          "404": {
            "description": "Parking data specified by id does not exist",
            "schema": {
              "$ref": "#/definitions/404Response"
            }
          }
        }
      },
      "patch": {
        "summary": "Parkings (Update)",
        "description": "Updates the supplied parking data",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Centre identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "parking_data",
            "in": "body",
            "description": "Payload of data to be updated",
            "schema": {
              "$ref": "#/definitions/parking_new"
            },
            "required": true
          },
          {
            "name": "version",
            "in": "query",
            "description": "API Version",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Parking data updated successfully. Response is empty."
          },
          "404": {
            "description": "Parking specified by id does not exist",
            "schema": {
              "$ref": "#/definitions/404Response"
            }
          }
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "/countries": {
      "get": {
        "summary": "List of countries",
        "description": "Returns a list of countries",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API Version",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of countries",
            "schema": {
              "$ref": "#/definitions/countryListResponse"
            }
          }
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "/states": {
      "get": {
        "summary": "List of state",
        "description": "Returns a list of states",
        "parameters": [
          {
            "name": "country",
            "in": "query",
            "description": "Filters states by the given country",
            "required": false,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "API Version",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of selected states.",
            "schema": {
              "$ref": "#/definitions/stateListResponse"
            }
          }
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "/curations": {
      "get": {
        "summary": "List of curations",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API version",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "query",
            "description": "Filter by curation code",
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter by curation ID",
            "type": "integer"
          },
          {
            "name": "centre_id",
            "in": "query",
            "description": "Filter by centre ID",
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Filter by country",
            "type": "string"
          },
          {
            "name": "current",
            "in": "query",
            "description": "Show only current (non-expired) curations",
            "type": "boolean"
          },
          {
            "name": "category",
            "in": "query",
            "description": "Filter by category",
            "type": "string"
          },
          {
            "name": "sub_category",
            "in": "query",
            "description": "Filter by sub-category",
            "type": "string"
          },
          {
            "name": "available_on_or_after",
            "in": "query",
            "description": "Show only curations available from a specified date",
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the maximum number of results returned.",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Curations index response",
            "schema": {
              "$ref": "#/definitions/curationsListResponse"
            }
          }
        }
      },
      "post": {
        "summary": "Create a new curation",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API version",
            "required": true,
            "type": "string"
          },
          {
            "name": "curation",
            "in": "body",
            "description": "Payload data for creating a new curation",
            "schema": {
              "$ref": "#/definitions/curationPayload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Information about the new curation.",
            "schema": {
              "$ref": "#/definitions/curationCreateResponse"
            }
          },
          "422": {
            "description": "Unprocessable entity or request",
            "schema": {
              "$ref": "#/definitions/curation422Response"
            }
          }
        }
      },
      "x-services": [
        "collection"
      ]
    },
    "/curations/{curation_id}": {
      "get": {
        "summary": "Find a curation",
        "parameters": [
          {
            "name": "curation_id",
            "in": "path",
            "description": "Curation ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "version",
            "in": "query",
            "description": "API Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Information about the new curation.",
            "schema": {
              "$ref": "#/definitions/curationResponse"
            }
          },
          "404": {
            "description": "Unprocessable entity or request",
            "schema": {
              "$ref": "#/definitions/404Response"
            }
          }
        }
      },
      "put": {
        "summary": "Update an existing curation",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API version",
            "required": true,
            "type": "string"
          },
          {
            "name": "curation_id",
            "in": "path",
            "description": "ID of curation to delete",
            "required": true,
            "type": "integer"
          },
          {
            "name": "curation",
            "in": "body",
            "description": "Payload data for updating a curation",
            "schema": {
              "$ref": "#/definitions/curationPayload"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No data"
          },
          "404": {
            "description": "Unprocessable entity or request",
            "schema": {
              "$ref": "#/definitions/404Response"
            }
          },
          "422": {
            "description": "Unprocessable entity or request",
            "schema": {
              "$ref": "#/definitions/curation422Response"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a curation",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API version",
            "required": true,
            "type": "string"
          },
          {
            "name": "curation_id",
            "in": "path",
            "description": "ID of curation to delete",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "No data"
          },
          "404": {
            "description": "Unprocessable entity or request",
            "schema": {
              "$ref": "#/definitions/404Response"
            }
          }
        }
      },
      "x-services": [
        "collection"
      ]
    },
    "/search": {
      "get": {
        "description": "Do a search",
        "operationId": "search",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Version of the API",
            "required": false,
            "type": "string",
            "default": "1"
          },
          {
            "name": "term",
            "in": "query",
            "description": "The search term",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results to return per result type",
            "required": false,
            "default": 5,
            "type": "integer"
          },
          {
            "name": "centre_id",
            "in": "query",
            "description": "Filter by centre_id",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Which page of results to retrieve",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "How to sort results (product results only)",
            "required": false,
            "type": "string",
            "enum": [
              "price_low_high_sort",
              "price_high_low_sort",
              "store_name_sort",
              "product_name_sort",
              "largest_discount_sort",
              "most_recent_sort"
            ]
          },
          {
            "name": "facets",
            "in": "query",
            "description": "Which facets to filter by, eg country, price",
            "required": false,
            "type": "string"
          },
          {
            "name": "types[]",
            "enum": [
              "stores",
              "events",
              "deals",
              "productcurations",
              "centreservices",
              "centreinformations",
              "storecategories",
              "productbrands",
              "productcategories",
              "retailchains",
              "colours",
              "editorials",
              "products",
              "movies",
              "centredirectories"
            ],
            "in": "query",
            "description": "Which kinds of results to return, eg products, deals",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Search",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SearchResponse"
                  }
                },
                "metadata": {
                  "type": "object"
                },
                "errors": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "x-services": [
        "search"
      ]
    },
    "/events": {
      "get": {
        "summary": "Events happening at centres",
        "description": "Returns a list of all events happening at all centres (or a specific centre).",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API version",
            "type": "string",
            "required": true
          },
          {
            "name": "published",
            "in": "query",
            "description": "Filter by published status",
            "type": "boolean"
          },
          {
            "name": "centre_id",
            "in": "query",
            "description": "Filter by centre",
            "type": "string"
          },
          {
            "name": "featured",
            "in": "query",
            "description": "Filter by featured",
            "type": "boolean"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Return a specific page of results",
            "type": "integer"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Limit the number of results returned per page",
            "type": "integer"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order results by this attribute",
            "type": "string"
          },
          {
            "name": "direction",
            "in": "query",
            "description": "Order results in this direction (asc/desc)",
            "type": "string"
          },
          {
            "name": "deleted",
            "description": "Include deleted events in the response",
            "type": "boolean",
            "in": "query"
          },
          {
            "name": "updated_at",
            "description": "Return events that were updated after the specified date-time (supplied in ISO8601 format)",
            "type": "string",
            "format": "date-time",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of events",
            "schema": {
              "$ref": "#/definitions/eventsListResponse"
            }
          }
        }
      },
      "post": {
        "summary": "Create a new event",
        "description": "Creates a new event",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API version",
            "type": "string",
            "required": true
          },
          {
            "name": "event_data",
            "in": "body",
            "required": true,
            "description": "Payload of data to create an event",
            "schema": {
              "$ref": "#/definitions/eventCreateParameters"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created event",
            "schema": {
              "$ref": "#/definitions/eventResponse"
            }
          },
          "422": {
            "description": "Unprocessable entity or request",
            "schema": {
              "$ref": "#/definitions/Event422Response"
            }
          }
        }
      },
      "x-services": [
        "event"
      ]
    },
    "/events/{event_id}": {
      "get": {
        "summary": "Get a specific event",
        "description": "Returns information about a specific event.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API version",
            "type": "string",
            "required": true
          },
          {
            "name": "event_id",
            "in": "path",
            "description": "ID of event to get",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Information about requested event.",
            "schema": {
              "$ref": "#/definitions/eventResponse"
            }
          },
          "404": {
            "description": "Event not found",
            "schema": {
              "$ref": "#/definitions/404Response"
            }
          }
        }
      },
      "put": {
        "summary": "Update an existing event",
        "description": "Updates an existing event",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API version",
            "type": "string",
            "required": true
          },
          {
            "name": "event_id",
            "in": "path",
            "description": "ID of event to update",
            "required": true,
            "type": "integer"
          },
          {
            "name": "event_data",
            "in": "body",
            "required": true,
            "description": "Payload of data to update an event",
            "schema": {
              "$ref": "#/definitions/eventUpdateParameters"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No data"
          },
          "404": {
            "description": "Event not found",
            "schema": {
              "$ref": "#/definitions/404Response"
            }
          },
          "422": {
            "description": "Unprocessable entity or request",
            "schema": {
              "$ref": "#/definitions/Event422Response"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an existing event",
        "description": "Deletes an existing event",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API version",
            "type": "string",
            "required": true
          },
          {
            "name": "event_id",
            "in": "path",
            "description": "ID of event to get",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "No data"
          },
          "404": {
            "description": "Event not found",
            "schema": {
              "$ref": "#/definitions/404Response"
            }
          }
        }
      },
      "x-services": [
        "event"
      ]
    },
    "/centres/{centre_id}/movies": {
      "get": {
        "summary": "Movies available to shoppers in Westfield Centres",
        "description": "Returns a list of all movies available to shoppers in Westfield Centres. Does not return movies which have no currently available sessions.\n",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API Version",
            "type": "string",
            "required": true
          },
          {
            "name": "centre_id",
            "description": "Return movies playing in the specified centre",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "date",
            "description": "Return movies playing on a specified date",
            "type": "string",
            "format": "date",
            "in": "query"
          },
          {
            "name": "start_date",
            "description": "Return movies with sessions on or after a specified date",
            "type": "string",
            "format": "date",
            "in": "query"
          },
          {
            "name": "end_date",
            "description": "Return movies with sessions on or before a specified date",
            "type": "string",
            "format": "date",
            "in": "query"
          },
          {
            "name": "deleted",
            "description": "Include deleted movies in response",
            "type": "boolean",
            "in": "query"
          },
          {
            "name": "updated_since",
            "description": "Return movies updated since a specified date and time",
            "type": "string",
            "format": "date-time",
            "in": "query"
          },
          {
            "name": "fields",
            "description": "Specify a list of attributes to be returned. If empty or not supplied, all attributes will be returned",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of movies and session times",
            "schema": {
              "$ref": "#/definitions/moviesListResponse"
            }
          },
          "404": {
            "description": "Specified centre was not found",
            "schema": {
              "$ref": "#/definitions/404Response"
            }
          }
        }
      },
      "x-services": [
        "movie"
      ]
    },
    "/centres/{centre_id}/movies/{movie_id}": {
      "get": {
        "summary": "Information about a specific movie",
        "description": "Returns information about a specific movie",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API Version",
            "type": "string",
            "required": true
          },
          {
            "name": "centre_id",
            "description": "Return movies playing in the specified centre",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "movie_id",
            "in": "path",
            "description": "Movie ID",
            "type": "integer",
            "format": "int64",
            "required": true
          },
          {
            "name": "start_date",
            "description": "Return movie sessions on or after a specified date",
            "type": "string",
            "format": "date",
            "in": "query"
          },
          {
            "name": "end_date",
            "description": "Return movie sessions on or before a specified date",
            "type": "string",
            "format": "date",
            "in": "query"
          },
          {
            "name": "fields",
            "description": "Specify a list of attributes to be returned. If empty or not supplied, all attributes will be returned",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Information and session times for the requested movie",
            "schema": {
              "$ref": "#/definitions/movieResponse"
            }
          },
          "404": {
            "description": "Movie or centre was not found",
            "schema": {
              "$ref": "#/definitions/404Response"
            }
          }
        }
      },
      "x-services": [
        "movie"
      ]
    },
    "/password_resets": {
      "post": {
        "summary": "Initiate an EmailPassword account password reset",
        "description": "Initiate an EmailPassword account password reset",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Version of the API",
            "type": "string",
            "required": true,
            "default": "1"
          },
          {
            "name": "email",
            "in": "body",
            "description": "The email address of the account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset token",
            "schema": {
              "$ref": "#/definitions/passwordResetTokenResponse"
            }
          },
          "404": {
            "description": "Incorrect email address"
          },
          "422": {
            "description": "Validation error"
          }
        }
      },
      "x-services": [
        "access"
      ]
    },
    "/password_resets/{id}": {
      "put": {
        "summary": "Update an EmailPassword account password",
        "description": "Update an EmailPassword account password",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Version of the API",
            "type": "string",
            "required": true,
            "default": "1"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Password reset token",
            "type": "string",
            "required": true
          },
          {
            "name": "password",
            "in": "body",
            "description": "The new password",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password_confirmation",
            "in": "body",
            "description": "The new password again",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Incorrect password reset token"
          },
          "422": {
            "description": "Validation error"
          }
        }
      },
      "x-services": [
        "access"
      ]
    },
    "/people": {
      "get": {
        "summary": "Accounts with access to Westfield APIs",
        "description": "Returns a list of accounts (paginated)",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Version of the API",
            "type": "string",
            "required": true,
            "default": "1"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Restricts type of accounts returned.",
            "type": "string",
            "required": false
          },
          {
            "name": "q",
            "in": "query",
            "description": "Searches the accounts after they have been restricted.",
            "type": "string",
            "required": false
          },
          {
            "name": "role",
            "in": "query",
            "description": "Restricts the type of the accounts returned by the role.",
            "type": "string",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page of the matching accounts to return.",
            "type": "integer",
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of accounts per page to return.",
            "type": "integer",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Page with a list of matching accounts",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Page"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/emptyErrorResponse"
            }
          }
        }
      },
      "post": {
        "summary": "Create an account for a person with a username and a password.",
        "description": "Create an account for a person and returns it if created.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Version of the API",
            "type": "string",
            "required": true,
            "default": "1"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created account object",
            "schema": {
              "$ref": "#/definitions/AccountResponse"
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "schema": {
              "$ref": "#/definitions/emptyErrorResponse"
            }
          }
        }
      },
      "x-services": [
        "access"
      ]
    },
    "/people/{uuid}": {
      "get": {
        "summary": "Account for a specified UUID.",
        "description": "Returns a specific account for a UUID.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Version of the API",
            "type": "string",
            "required": true,
            "default": "1"
          },
          {
            "name": "uuid",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "type",
            "in": "query",
            "description": "UUID for the account to be returned.",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Account for the specified UUID",
            "schema": {
              "$ref": "#/definitions/AccountResponse"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/emptyErrorResponse"
            }
          }
        }
      },
      "put": {
        "summary": "Update an account for a person with a username and a password.",
        "description": "Updates an account for a person and returns it if updated.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Version of the API",
            "type": "integer",
            "required": true,
            "default": 1
          },
          {
            "name": "uuid",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAccount"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created account object",
            "schema": {
              "$ref": "#/definitions/AccountResponse"
            }
          },
          "401": {
            "description": "Unprocessable entity",
            "schema": {
              "$ref": "#/definitions/emptyErrorResponse"
            }
          }
        }
      },
      "delete": {
        "summary": "Deletes the account and associated data.",
        "description": "Deletes the account and associated data.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Version of the API",
            "type": "string",
            "required": true,
            "default": "1"
          },
          {
            "name": "uuid",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Account and associated data deleted"
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/emptyErrorResponse"
            }
          }
        }
      },
      "x-services": [
        "access"
      ]
    },
    "/token": {
      "post": {
        "summary": "Create OAuth token.",
        "description": "If you send the grant type `client_credentials` you must also provide the `client_id` and `client_secret`. If you send the grant type `password` you must also provide the `username` and `password`; you may optionally provide `client_id` and `client_secret`. If you send the grant type as `authorization_code`, you must provide the `client_id` and `client_secret` along with the `code` and `redirect_uri`.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Version of the API",
            "type": "string",
            "required": true,
            "default": "1"
          },
          {
            "in": "query",
            "name": "grant_type",
            "type": "string",
            "description": "Grant Type",
            "required": true,
            "enum": [
              "client_credentials",
              "password",
              "authorization_code"
            ]
          },
          {
            "in": "query",
            "name": "client_id",
            "type": "string",
            "description": "OAuth Client ID",
            "required": false
          },
          {
            "in": "query",
            "name": "client_secret",
            "type": "string",
            "description": "OAuth Client Secret",
            "required": false
          },
          {
            "in": "query",
            "name": "username",
            "type": "string",
            "description": "Username",
            "required": false
          },
          {
            "in": "query",
            "name": "password",
            "type": "string",
            "description": "Password",
            "required": false
          },
          {
            "in": "query",
            "name": "redirect_uri",
            "type": "string",
            "description": "the redirect_uri specified when registering the app and in the /authorize call (must match exactly).",
            "required": false
          },
          {
            "in": "query",
            "name": "code",
            "type": "string",
            "description": "The code parameter returned by the /authorize step.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          },
          "401": {
            "description": "Authenticate failure"
          }
        }
      },
      "x-services": [
        "access"
      ]
    },
    "/revoke": {
      "post": {
        "summary": "Revoke an OAuth token",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Version of the API",
            "type": "string",
            "required": true,
            "default": "1"
          },
          {
            "in": "query",
            "name": "token",
            "type": "string",
            "description": "Access Token string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "x-services": [
        "access"
      ]
    },
    "/token/info": {
      "get": {
        "summary": "Returns Information about an OAuth Access token.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Version of the API",
            "type": "string",
            "required": true,
            "default": "1"
          },
          {
            "in": "query",
            "name": "access_token",
            "type": "string",
            "description": "Access token",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns token information.",
            "schema": {
              "$ref": "#/definitions/TokenInfo"
            }
          },
          "401": {
            "description": "The request is missing a required parameter, includes an unsupported parameter value, or is otherwise malformed.",
            "schema": {
              "$ref": "#/definitions/emptyErrorResponse"
            }
          }
        }
      },
      "x-services": [
        "access"
      ]
    },
    "/metadata": {
      "post": {
        "summary": "Create one or more pieces of metadata for a given UUID.",
        "description": "Returns a list of accounts (paginated).",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Version of the API",
            "type": "string",
            "required": true,
            "default": "1"
          },
          {
            "name": "metadata",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Metadata"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Page with a list of matching accounts",
            "schema": {
              "$ref": "#/definitions/Metadata"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/emptyErrorResponse"
            }
          }
        }
      },
      "x-services": [
        "access"
      ]
    },
    "/metadata_snapshots/{id}": {
      "get": {
        "summary": "Returns metadata about a specific UUID over time.",
        "description": "Return all metadata for a specific UUID from the first recorded instance until now.\n",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Version of the API",
            "type": "string",
            "required": true,
            "default": "1"
          },
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "timestamp",
            "in": "query",
            "description": "The upper bound for the interval to collect the snapshot `[t,t'`] where `t` is the first point in time metadata was recorded, and `t'` is the initial snapshot interval. If no interval is provided all of the snapshot information up until the current time is returned.\n",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Page with a list of matching accounts",
            "schema": {
              "$ref": "#/definitions/MetadataSnapshot"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/emptyErrorResponse"
            }
          }
        }
      },
      "x-services": [
        "access"
      ]
    },
    "/metadata_snapshots": {
      "post": {
        "summary": "Returns metadata about a specific UUID over time.",
        "description": "Return all metadata for a UUID from the first recorded instance to now.\n",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Version of the API",
            "type": "string",
            "required": true,
            "default": "1"
          },
          {
            "name": "timestamp",
            "description": "The upper bound for the interval to collect the snapshot `[t,t']` where `t` is the first point in time metadata was recorded, and `t'` is the upper bound of the interval. If no upper bound is provided all of the snapshot information up until the current time is returned.\n",
            "in": "query",
            "type": "string",
            "required": false
          },
          {
            "name": "uuids",
            "description": "Set of UUIDs for requesting metadata snapshots for multiple UUIDs.\n",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Page with a list of matching accounts",
            "schema": {
              "$ref": "#/definitions/MetadataSnapshotBulkResponse"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/emptyErrorResponse"
            }
          }
        }
      },
      "x-services": [
        "access"
      ]
    },
    "/deals": {
      "get": {
        "summary": "Returns all deals",
        "description": "Returns a list of all deals available to shoppers in Westfield Centres",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API Version",
            "type": "string",
            "required": true
          },
          {
            "name": "version_header",
            "in": "header",
            "description": "API Version",
            "type": "string"
          },
          {
            "name": "all",
            "in": "query",
            "description": "Return all deals",
            "type": "string"
          },
          {
            "name": "centre",
            "description": "Filter by centre code",
            "type": "string",
            "in": "query"
          },
          {
            "name": "retailer",
            "description": "Filter by retailer ID",
            "type": "integer",
            "in": "query"
          },
          {
            "name": "campaign",
            "description": "Filter by campagin ID",
            "type": "integer",
            "in": "query"
          },
          {
            "name": "campaign_code",
            "description": "Filter by campaign code",
            "type": "string",
            "in": "query"
          },
          {
            "name": "featured",
            "description": "Filter by featured",
            "type": "boolean",
            "in": "query"
          },
          {
            "name": "country",
            "description": "Filter by country",
            "type": "string",
            "in": "query"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Return specified page of results",
            "type": "integer"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Limit results per page",
            "type": "integer"
          },
          {
            "name": "fields",
            "description": "Filter the fields of each retailer that are included in the returned data.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of deals",
            "schema": {
              "$ref": "#/definitions/dealsListResponse"
            }
          }
        }
      },
      "post": {
        "summary": "Create a new deal",
        "description": "Creates a new deal",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API Version",
            "type": "string",
            "required": true
          },
          {
            "name": "version_header",
            "in": "header",
            "description": "API Version",
            "type": "string"
          },
          {
            "name": "deal_data",
            "in": "body",
            "required": true,
            "description": "Payload of data to create a deal",
            "schema": {
              "$ref": "#/definitions/dealCreateParameters"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created Deal",
            "schema": {
              "$ref": "#/definitions/dealResponse"
            }
          },
          "422": {
            "description": "Unprocessable entity or request",
            "schema": {
              "$ref": "#/definitions/Deal422Response"
            }
          }
        }
      },
      "x-services": [
        "deal"
      ]
    },
    "/deals/{deal_id}": {
      "get": {
        "summary": "Information about a specific deal",
        "description": "Returns information about a specific deal",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API Version",
            "type": "string",
            "required": true
          },
          {
            "name": "version_header",
            "in": "header",
            "description": "API Version",
            "type": "string"
          },
          {
            "name": "deal_id",
            "in": "path",
            "description": "ID of deal to fetch",
            "required": true,
            "type": "integer"
          },
          {
            "name": "fields",
            "description": "Filter the fields of each retailer that are included in the returned data.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Information about the requested deal",
            "schema": {
              "$ref": "#/definitions/dealResponse"
            }
          },
          "404": {
            "description": "Deal not found",
            "schema": {
              "$ref": "#/definitions/404Response"
            }
          }
        }
      },
      "put": {
        "summary": "Update an existing deal",
        "description": "Updates an existing deal",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API Version",
            "type": "string",
            "required": true
          },
          {
            "name": "version_header",
            "in": "header",
            "description": "API Version",
            "type": "string"
          },
          {
            "name": "deal_id",
            "in": "path",
            "description": "ID of deal to update",
            "type": "integer",
            "required": true
          },
          {
            "name": "deal_data",
            "in": "body",
            "required": true,
            "description": "Payload of data to update a deal",
            "schema": {
              "$ref": "#/definitions/dealUpdateParameters"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the deal. Response is empty"
          },
          "404": {
            "description": "Deal not found",
            "schema": {
              "$ref": "#/definitions/404Response"
            }
          },
          "422": {
            "description": "Unprocessable entity or request",
            "schema": {
              "$ref": "#/definitions/Deal422Response"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an existing deal",
        "description": "Deletes an existing deal",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API Version",
            "type": "string",
            "required": true
          },
          {
            "name": "version_header",
            "in": "header",
            "description": "API Version",
            "type": "string"
          },
          {
            "name": "deal_id",
            "in": "path",
            "description": "ID of deal to delete",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "No data"
          },
          "404": {
            "description": "Deal not found",
            "schema": {
              "$ref": "#/definitions/404Response"
            }
          }
        }
      },
      "x-services": [
        "deal"
      ]
    },
    "/centres/{centre_id}/trading-hours": {
      "get": {
        "summary": "Trading hours for a centre",
        "description": "Returns a list of times the centre is open for trading.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Version of the API",
            "type": "string",
            "required": true
          },
          {
            "name": "centre_id",
            "in": "path",
            "required": true,
            "description": "The centre id you'd like the hours for",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of trading hours",
            "schema": {
              "$ref": "#/definitions/centreTradingHoursListResponse"
            }
          }
        }
      },
      "post": {
        "summary": "Create one or more trading hours for a centre",
        "description": "Create one or more trading hours for a centre.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Version of the API",
            "type": "string",
            "required": true
          },
          {
            "name": "centre_id",
            "in": "path",
            "description": "The centre ID the trading hours apply to",
            "type": "string"
          },
          {
            "name": "centre_trading_hour_data",
            "in": "body",
            "required": true,
            "description": "Payload of data to create centre trading hours",
            "schema": {
              "$ref": "#/definitions/createCentreHoursParameters"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "List of trading hours",
            "schema": {
              "$ref": "#/definitions/centreTradingHoursListResponse"
            }
          }
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "/centres/{centre_id}/trading-hours/{trading_hour_id}": {
      "delete": {
        "summary": "Delete a centre trading hour",
        "description": "Delete a trading hour for a centre",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Version of the API",
            "type": "string",
            "required": true
          },
          {
            "name": "centre_id",
            "in": "path",
            "required": true,
            "description": "The centre this trading hour belongs to",
            "type": "string"
          },
          {
            "name": "trading_hour_id",
            "in": "path",
            "required": true,
            "description": "The trading hour ID to destroy",
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "No data"
          },
          "404": {
            "description": "Requested trading hour was not found",
            "schema": {
              "$ref": "#/definitions/404Response"
            }
          }
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "/centres/{centre_id}/trading-hours/range": {
      "get": {
        "summary": "Return a list of trading hours for a date range",
        "description": "Return a list of trading hours between a specified date range",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Version of the API",
            "type": "string",
            "required": true
          },
          {
            "name": "centre_id",
            "in": "path",
            "required": true,
            "description": "The centre id you'd like the hours for",
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "required": true,
            "description": "Date you'd like the hours from",
            "type": "string",
            "format": "date"
          },
          {
            "name": "to",
            "in": "query",
            "required": true,
            "description": "Date you'd like the hours to",
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "List of trading hours",
            "schema": {
              "$ref": "#/definitions/centreTradingHoursListResponse"
            }
          }
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "/stores/{store_id}/trading-hours": {
      "get": {
        "summary": "Get a list of trading hours for a store",
        "description": "Returns a list of trading hours for a specific store",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Version of the API",
            "type": "string",
            "required": true
          },
          {
            "name": "centre_id",
            "in": "query",
            "required": true,
            "description": "The centre ID you'd like the hours for",
            "type": "string"
          },
          {
            "name": "store_id",
            "in": "path",
            "required": true,
            "description": "The store ID you'd like the hours for",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Information about the requested trading hour",
            "schema": {
              "$ref": "#/definitions/storeTradingHoursListResponse"
            }
          }
        }
      },
      "post": {
        "summary": "Create one or more store trading hours",
        "description": "Create one or more trading hours for a specific store",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Version of the API",
            "type": "string",
            "required": true
          },
          {
            "name": "store_id",
            "in": "path",
            "required": true,
            "description": "The store ID you'd like the hours for",
            "type": "string"
          },
          {
            "name": "centre_trading_hour_data",
            "in": "body",
            "required": true,
            "description": "Payload of data to create store trading hours",
            "schema": {
              "$ref": "#/definitions/createStoreHoursParameters"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Information about the requested trading hour",
            "schema": {
              "$ref": "#/definitions/storeTradingHoursListResponse"
            }
          },
          "422": {
            "description": "Trading hour was not valid",
            "schema": {
              "$ref": "#/definitions/tradingHour422Response"
            }
          }
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "/stores/{store_id}/trading-hours/{trading_hour_id}": {
      "delete": {
        "summary": "Destroy a store trading hour",
        "description": "Destroy a specific trading hour for a store",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Version of the API",
            "type": "string",
            "required": true
          },
          {
            "name": "trading_hour_id",
            "in": "path",
            "required": true,
            "description": "The trading hour ID to destroy",
            "type": "integer"
          },
          {
            "name": "store_id",
            "in": "path",
            "required": true,
            "description": "The store this trading hour belongs to",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No data"
          },
          "404": {
            "description": "Requested store was not found",
            "schema": {
              "$ref": "#/definitions/404Response"
            }
          }
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "/stores/{store_id}/trading-hours/range": {
      "get": {
        "summary": "Get a range of store trading hours",
        "description": "Returns a list of store trading hours between a specified date range",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Version of the API",
            "type": "string",
            "required": true
          },
          {
            "name": "centre_id",
            "in": "query",
            "required": true,
            "description": "The centre id you'd like the hours for",
            "type": "string"
          },
          {
            "name": "store_id",
            "in": "path",
            "required": true,
            "description": "The store ID you'd like the hours for",
            "type": "integer"
          },
          {
            "name": "from",
            "in": "query",
            "required": true,
            "description": "Date you'd like the hours from",
            "type": "string",
            "format": "date"
          },
          {
            "name": "to",
            "in": "query",
            "required": true,
            "description": "Date you'd like the hours to",
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "List of store trading hours",
            "schema": {
              "$ref": "#/definitions/storeTradingHoursListResponse"
            }
          }
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "/products/{product_uuid}": {
      "get": {
        "summary": "Information about a specific product",
        "description": "Returns information about a specific product",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Version of the API",
            "type": "string"
          },
          {
            "name": "version_header",
            "in": "header",
            "description": "API Version",
            "type": "string",
            "required": true
          },
          {
            "name": "product_uuid",
            "in": "path",
            "description": "UUID of product to fetch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Information about the requested <object>",
            "schema": {
              "$ref": "#/definitions/productResponse"
            }
          }
        }
      },
      "x-services": [
        "consumption"
      ]
    },
    "/retailers": {
      "get": {
        "summary": "Returns a list of retailers",
        "description": "Returns a list of retailers operating in Westfield Centres filtered by query parameters.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API Version",
            "type": "string",
            "required": true
          },
          {
            "name": "campaign_id",
            "description": "Filter to retailers that are part of any campaign (true) or that are part of a specific campaign (integer ID).",
            "type": "integer",
            "in": "query"
          },
          {
            "name": "category_id",
            "description": "Filter to retailers that belong to the category with the specified ID.",
            "type": "integer",
            "in": "query"
          },
          {
            "name": "centre",
            "description": "Filter to retailers that have stores in the centre.",
            "type": "string",
            "in": "query"
          },
          {
            "name": "country",
            "description": "Filter to retailers that have stores in the country.",
            "type": "string",
            "in": "query"
          },
          {
            "name": "fields",
            "description": "Filter the fields of each retailer that are included in the returned data.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "id",
            "description": "Filter to the retailer with the first ID in the list.",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "csv",
            "in": "query"
          },
          {
            "name": "name",
            "description": "Filter to the retailers matching the name. Partial matching is supported with wildcards.",
            "type": "string",
            "in": "query"
          },
          {
            "name": "page",
            "description": "When per_page is specified returns page X.",
            "type": "integer",
            "default": 1,
            "in": "query"
          },
          {
            "name": "per_page",
            "description": "Limit the list of retailers to X items.",
            "type": "integer",
            "default": 50,
            "maximum": 500,
            "in": "query"
          },
          {
            "name": "product_upload_enabled",
            "description": "Filter the list of retailers by product upload enabled (true) or don't filter (false).",
            "type": "boolean",
            "default": false,
            "in": "query"
          },
          {
            "name": "q",
            "description": "Filter the list of retailers based on partial match of name or retailer code.",
            "type": "string",
            "in": "query"
          },
          {
            "name": "retailer_code",
            "description": "Filter to the retailers with the specified codes.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query"
          },
          {
            "name": "deleted_at",
            "description": "Filter retailer to show deleted records.",
            "type": "boolean",
            "default": false,
            "in": "query"
          },
          {
            "name": "updated_since",
            "description": "Filter the retailers to show only those that have been updated since the given date-time.",
            "type": "string",
            "format": "date-time",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of retailers",
            "schema": {
              "$ref": "#/definitions/retailersListResponse"
            }
          }
        }
      },
      "post": {
        "summary": "Creates a retailer",
        "description": "Creates a retailer operating in Westfield Centres and returns it.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API Version",
            "type": "string",
            "required": true
          },
          {
            "name": "retailer_data",
            "in": "body",
            "description": "Payload of data to create a retailer.",
            "schema": {
              "$ref": "#/definitions/retailerCreateParameters"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Details of the newly created retailer",
            "schema": {
              "$ref": "#/definitions/retailerResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/401Response"
            }
          },
          "422": {
            "description": "Retailer is invalid",
            "schema": {
              "$ref": "#/definitions/Retailer422Response"
            }
          }
        }
      },
      "x-services": [
        "store"
      ]
    },
    "/retailers/{retailer_code}": {
      "get": {
        "summary": "Returns a specific retailer",
        "description": "Returns a specific retailer operating in Westfield Centres specified by ID.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API Version",
            "type": "string",
            "required": true
          },
          {
            "name": "retailer_code",
            "description": "Unique code for the retailer",
            "required": true,
            "type": "string",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Retailer's details",
            "schema": {
              "$ref": "#/definitions/retailerResponse"
            }
          },
          "404": {
            "description": "Retailer not found",
            "schema": {
              "$ref": "#/definitions/404Response"
            }
          }
        }
      },
      "patch": {
        "summary": "Updates an existing retailer",
        "description": "Updates an existing retailer operating in Westfield Centres and returns it.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API Version",
            "type": "string",
            "required": true
          },
          {
            "name": "retailer_code",
            "description": "retailer code",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "retailer_data",
            "in": "body",
            "description": "Payload of updated data about the retailer",
            "schema": {
              "$ref": "#/definitions/retailerUpdateParameters"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the retailer"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/401Response"
            }
          },
          "404": {
            "description": "Retailer not found",
            "schema": {
              "$ref": "#/definitions/404Response"
            }
          },
          "422": {
            "description": "Retailer is invalid",
            "schema": {
              "$ref": "#/definitions/Retailer422Response"
            }
          }
        }
      },
      "x-services": [
        "store"
      ]
    },
    "/stores": {
      "get": {
        "summary": "Returns a list of stores",
        "description": "Returns a list of stores in Westfield Centres filtered by query parameters.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API Version",
            "type": "string",
            "required": true
          },
          {
            "name": "category_id",
            "description": "Filter to stores that belong to the category with the specified ID.",
            "type": "integer",
            "in": "query"
          },
          {
            "name": "centre",
            "description": "Filter to stores in the centre.",
            "type": "string",
            "in": "query"
          },
          {
            "name": "centre_id",
            "description": "Filter to stores in the centre.",
            "type": "string",
            "in": "query"
          },
          {
            "name": "disabled",
            "description": "Filter to stores that are enabled (false) or disabled (true) in the Westfield system.",
            "type": "boolean",
            "default": false,
            "in": "query"
          },
          {
            "name": "featured",
            "description": "Filter to stores that are currently being promoted on the website.",
            "type": "boolean",
            "in": "query"
          },
          {
            "name": "fields",
            "description": "Filter the fields of each store that are included in the returned data.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "major",
            "description": "Filter to major stores in a centre, such as anchor stores.",
            "type": "boolean",
            "in": "query"
          },
          {
            "name": "page",
            "description": "When per_page is specified as a number returns page X.",
            "type": "integer",
            "default": 1,
            "in": "query"
          },
          {
            "name": "per_page",
            "description": "Limit the list of stores to X items",
            "type": "integer",
            "default": 50,
            "maximum": 500,
            "in": "query"
          },
          {
            "name": "q",
            "description": "Filter the list of stores based on partial match of name.",
            "type": "string",
            "in": "query"
          },
          {
            "name": "with_first_letter",
            "description": "Filter the list of stores based on the normalized first letter of name.",
            "type": "string",
            "in": "query"
          },
          {
            "name": "retailer_code",
            "description": "Filter to stores belonging to the retailer with the specified code.",
            "type": "string",
            "in": "query"
          },
          {
            "name": "retailer_id",
            "description": "Filter to stores belonging to the specified retailer.",
            "type": "integer",
            "in": "query"
          },
          {
            "name": "country",
            "description": "Filter to stores within the specified country.",
            "type": "string",
            "in": "query"
          },
          {
            "name": "sort",
            "description": "Sort the list of stores by the specified field.",
            "type": "string",
            "enum": [
              "abn",
              "centre_id",
              "dining_cuisine",
              "dining_image_ref",
              "dining_menu_ref",
              "email_address",
              "lease_id",
              "name",
              "phone_no",
              "shop_no",
              "store_front_image_ref",
              "url"
            ],
            "in": "query"
          },
          {
            "name": "sort_dir",
            "description": "Sort the list of stores in ascending (asc) or descending (desc) order.",
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query"
          },
          {
            "name": "deleted_at",
            "description": "Filter stores to show deleted records.",
            "type": "boolean",
            "default": false,
            "in": "query"
          },
          {
            "name": "updated_since",
            "description": "Filter the stores to show only those that have been updated since the given date-time.",
            "type": "string",
            "format": "date-time",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of stores",
            "schema": {
              "$ref": "#/definitions/storesListResponse"
            }
          }
        }
      },
      "post": {
        "summary": "Creates a store",
        "description": "Creates a store in a Westfield Centre and returns it.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API Version",
            "type": "string",
            "required": true
          },
          {
            "name": "store_data",
            "in": "body",
            "description": "Payload of data to create a store.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storeCreateParameters"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Details of the newly created store",
            "schema": {
              "$ref": "#/definitions/storeResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/401Response"
            }
          },
          "422": {
            "description": "Store is invalid",
            "schema": {
              "$ref": "#/definitions/Store422Response"
            }
          }
        }
      },
      "x-services": [
        "store"
      ]
    },
    "/stores/{store_id}": {
      "get": {
        "summary": "Returns a specific store",
        "description": "Returns a specific store in a Westfield Centre specified by ID.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API Version",
            "type": "string",
            "required": true
          },
          {
            "name": "store_id",
            "description": "ID of the store",
            "required": true,
            "type": "integer",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Store's details",
            "schema": {
              "$ref": "#/definitions/storeResponse"
            }
          },
          "404": {
            "description": "Store not found",
            "schema": {
              "$ref": "#/definitions/404Response"
            }
          }
        }
      },
      "patch": {
        "summary": "Updates an existing store",
        "description": "Updates an existing store in a Westfield Centre.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API Version",
            "type": "string",
            "required": true
          },
          {
            "name": "store_id",
            "description": "ID of the store",
            "required": true,
            "type": "integer",
            "in": "path"
          },
          {
            "name": "store_data",
            "in": "body",
            "description": "Payload of updated data about the store.",
            "schema": {
              "$ref": "#/definitions/storeUpdateParameters"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the store"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/401Response"
            }
          },
          "404": {
            "description": "Store not found",
            "schema": {
              "$ref": "#/definitions/404Response"
            }
          },
          "422": {
            "description": "Store is invalid",
            "schema": {
              "$ref": "#/definitions/Store422Response"
            }
          }
        }
      },
      "x-services": [
        "store"
      ]
    }
  },
  "definitions": {
    "metaResponse": {
      "description": "Response metadata",
      "required": [
        "api_version",
        "deprecation_information"
      ],
      "additionalProperties": false,
      "properties": {
        "api_version": {
          "description": "API Version",
          "type": "string",
          "example": "1"
        },
        "page": {
          "description": "Current page number",
          "type": "integer",
          "example": 1
        },
        "page_count": {
          "description": "Total number of pages",
          "type": "integer",
          "example": 10
        },
        "per_page": {
          "description": "Number of results per page",
          "type": "integer",
          "example": 25
        },
        "total": {
          "description": "Total number of results for all pages",
          "type": "integer",
          "example": 100
        },
        "deprecation_information": {
          "description": "End-of-life information about the deprecation of the endpoint.\nIf this has content you must act on it",
          "$ref": "#/definitions/deprecationInformation"
        }
      },
      "x-services": [
        "shared"
      ]
    },
    "deprecationInformation": {
      "description": "End-of-life information about the deprecation of the endpoint.\nIf this has content you must act on it",
      "additionalProperties": false,
      "properties": {
        "deprecated_at": {
          "description": "The date-time that an endpoint was deprecated",
          "type": "string",
          "format": "date-time",
          "example": "2018-03-21T00:00:00Z"
        },
        "goes_away_at": {
          "description": "The date-time that an endpoint will be retired and unavailable",
          "type": "string",
          "format": "date-time",
          "example": "2018-06-21T00:00:00Z"
        },
        "more_info": {
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "shared"
      ]
    },
    "410ErrorDetails": {
      "description": "Details on an HTTP-410 error",
      "required": [
        "message",
        "params"
      ],
      "additionalProperties": false,
      "properties": {
        "message": {
          "description": "Error description",
          "type": "string"
        },
        "params": {
          "description": "Request parameters supplied",
          "type": "object"
        }
      },
      "x-services": [
        "shared"
      ]
    },
    "500ErrorDetails": {
      "description": "Details on an HTTP-500 error",
      "required": [
        "message",
        "params"
      ],
      "additionalProperties": false,
      "properties": {
        "message": {
          "description": "Error description",
          "type": "string"
        },
        "params": {
          "description": "Request parameters supplied",
          "type": "object"
        }
      },
      "x-services": [
        "shared"
      ]
    },
    "404ErrorDetails": {
      "description": "Details on an HTTP-404 error",
      "required": [
        "message",
        "params"
      ],
      "additionalProperties": false,
      "properties": {
        "message": {
          "description": "Error description",
          "type": "string"
        },
        "params": {
          "description": "Request parameters supplied",
          "type": "object"
        }
      },
      "x-services": [
        "shared"
      ]
    },
    "404Error": {
      "description": "Describes the HTTP-404 error",
      "required": [
        "base"
      ],
      "additionalProperties": false,
      "properties": {
        "base": {
          "description": "A list of the HTTP-404 error details",
          "type": "array",
          "items": {
            "$ref": "#/definitions/404ErrorDetails"
          }
        }
      },
      "x-services": [
        "shared"
      ]
    },
    "404Response": {
      "description": "An HTTP-404 response from the server",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "description": "The `data` component of the response",
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "description": "The `errors` component of the response",
          "$ref": "#/definitions/404Error"
        },
        "meta": {
          "description": "The `meta` component of the response",
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "shared"
      ]
    },
    "emptyObject": {
      "description": "Empty object",
      "x-services": [
        "shared"
      ]
    },
    "emptyErrorResponse": {
      "description": "Empty error response",
      "x-services": [
        "shared"
      ]
    },
    "centreLink": {
      "description": "A link and id associated with a specific centre",
      "required": [
        "centre",
        "href"
      ],
      "additionalProperties": false,
      "properties": {
        "centre": {
          "type": "string",
          "description": "Unique ID of the centre"
        },
        "href": {
          "type": "string",
          "description": "Link to the centre"
        }
      },
      "x-services": [
        "shared"
      ]
    },
    "imageLink": {
      "description": "A link associated with a specific image",
      "required": [
        "href"
      ],
      "additionalProperties": false,
      "properties": {
        "href": {
          "type": "string",
          "description": "Canonical link to the image"
        }
      },
      "x-services": [
        "shared"
      ]
    },
    "genericLink": {
      "description": "A URL",
      "required": [
        "href"
      ],
      "additionalProperties": false,
      "properties": {
        "href": {
          "type": "string",
          "description": "The absolute URL being linked to.",
          "example": "https://api.example.tes/something/delicious.json"
        }
      },
      "x-services": [
        "shared"
      ]
    },
    "500Error": {
      "description": "Something went wrong",
      "x-services": [
        "shared"
      ]
    },
    "422Error": {
      "description": "This should not be used. It's ambiguous as to which kind of 422 is returned. Instead use '{kind}422Error', eg, 'Product422Error'",
      "x-services": [
        "shared"
      ]
    },
    "422Response": {
      "description": "This should not be used. It's ambiguous as to which kind of 422 is returned. Instead use '{kind}422Error', eg, 'Product422Error'",
      "x-services": [
        "shared"
      ]
    },
    "422ErrorDetails": {
      "description": "This should not be used. It's ambiguous as to which kind of 422 is returned. Instead use '{kind}422Error', eg, 'Product422Error'",
      "x-services": [
        "shared"
      ]
    },
    "validationError": {
      "description": "This should not be used. It's ambiguous as to which kind of validationError is returned. Instead use '{kind}422Error', eg, 'Product422Error'",
      "x-services": [
        "shared"
      ]
    },
    "link": {
      "description": "This should not be used. The type of link should be specified (image, service, external, etc)",
      "x-services": [
        "shared"
      ]
    },
    "retailerLink": {
      "description": "A link associated with a specific retailer",
      "required": [
        "href"
      ],
      "additionalProperties": false,
      "properties": {
        "href": {
          "type": "string",
          "description": "Link to the retailer"
        }
      },
      "x-services": [
        "shared"
      ]
    },
    "retailerLinks": {
      "description": "Links associated with a specific retailer",
      "required": [
        "self",
        "logo"
      ],
      "additionalProperties": false,
      "properties": {
        "self": {
          "description": "Canonical link to retailer",
          "$ref": "#/definitions/retailerLink"
        },
        "logo": {
          "description": "Link to retailer logo",
          "$ref": "#/definitions/imageLink"
        }
      },
      "x-services": [
        "shared"
      ]
    },
    "location": {
      "description": "Jibestream location association IDs and metadata",
      "required": [
        "level_id",
        "level_name",
        "location_id",
        "name",
        "primary"
      ],
      "properties": {
        "primary": {
          "type": "boolean",
          "description": "Primary level"
        },
        "location_id": {
          "type": "string",
          "description": "Jibestream location ID"
        },
        "name": {
          "type": "string",
          "description": "Location description",
          "example": "Next to Bloomingdales"
        },
        "level_id": {
          "type": "string",
          "description": "Jibestream floor ID"
        },
        "level_name": {
          "type": "string",
          "description": "Level description",
          "example": "Floor 1"
        }
      },
      "x-services": [
        "shared"
      ]
    },
    "translation": {
      "description": "A translated name and westfield_locale string pair",
      "required": [
        "name",
        "westfield_locale"
      ],
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "description": "The translated name",
          "example": "Handbags"
        },
        "westfield_locale": {
          "type": "string",
          "description": "Westfield locale strings comprise a language code with an optional centre code, separated by a '|' character.",
          "pattern": "^[a-z]{2}(-[A-Z]{2})?(\\|[a-z]+)?$",
          "example": "en|bondijunction"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "manualSortOrder": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "additionalProperties": false,
      "x-services": [
        "category"
      ]
    },
    "childrenSortOrder": {
      "type": "object",
      "description": "An ordering for the children of this class",
      "example": "{us:['cat1', 'cat2'], au: ['cat2', 'cat1']}",
      "additionalProperties": false,
      "properties": {
        "default": {
          "description": "Default ordering of child elements",
          "$ref": "#/definitions/manualSortOrder"
        },
        "au": {
          "description": "Ordering of the child elements for AU centres",
          "$ref": "#/definitions/manualSortOrder"
        },
        "us": {
          "description": "Ordering of the child elements for US centres",
          "$ref": "#/definitions/manualSortOrder"
        },
        "nz": {
          "description": "Ordering of the child elements for NZ centres",
          "$ref": "#/definitions/manualSortOrder"
        },
        "uk": {
          "description": "Ordering of the child elements for UK centres",
          "$ref": "#/definitions/manualSortOrder"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "categoryPayload": {
      "description": "Transport object that encapsulates the Category data for creation or updating",
      "required": [
        "name"
      ],
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "description": "Default Category name, used if there is no translation",
          "example": "Handbags"
        },
        "code": {
          "type": "string",
          "description": "Category code (slug.) If not provided, one will be generated based on the supplied name",
          "example": "handbags"
        },
        "parent_id": {
          "type": "integer",
          "description": "ID of the parent Category",
          "example": 1
        },
        "translations": {
          "type": "array",
          "description": "List of translated Category names, one per WestfieldLocale",
          "items": {
            "$ref": "#/definitions/translation"
          }
        },
        "disabled_westfield_locales": {
          "description": "An optional array of `westfield_locale` strings that this category is disabled for.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ordering_of_children": {
          "description": "An ordering for the children of this class",
          "$ref": "#/definitions/childrenSortOrder"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "categoriesListResponse": {
      "description": "List of localised Categories delivered from the server",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "description": "The `data` component of the response",
          "type": "array",
          "items": {
            "$ref": "#/definitions/localisedCategory"
          }
        },
        "errors": {
          "description": "The `errors` component of the response",
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "description": "The `meta` component of the response",
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "categoryResponse": {
      "description": "Detailed Category information delivered from the server",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "description": "The `data` component of the response",
          "$ref": "#/definitions/category"
        },
        "errors": {
          "description": "The `errors` component of the response",
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "description": "The `meta` component of the response",
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "localisedCategory": {
      "description": "A localised Category",
      "required": [
        "id",
        "name",
        "code",
        "depth",
        "_links"
      ],
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "integer",
          "description": "Category ID"
        },
        "name": {
          "type": "string",
          "description": "Localised category name",
          "example": "Handbags"
        },
        "code": {
          "type": "string",
          "description": "Category code (slug)",
          "example": "handbags"
        },
        "depth": {
          "type": "integer",
          "description": "Level in the category tree (range from 1..3)",
          "example": 1
        },
        "parent_id": {
          "type": "integer",
          "description": "ID of the parent Category",
          "example": 1
        },
        "_links": {
          "description": "Links relating to the Category",
          "$ref": "#/definitions/categoryLinks"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date the category was last updated (ISO8601 Zulu Time)",
          "example": "2015-04-17T07:49:49Z"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time that the category was marked as deleted. If null then the category was not deleted"
        },
        "children": {
          "description": "A list of localised child-Categories",
          "type": "array",
          "items": {
            "$ref": "#/definitions/localisedCategory"
          }
        }
      },
      "x-services": [
        "category"
      ]
    },
    "category": {
      "description": "Detailed Category information",
      "type": "object",
      "required": [
        "id",
        "name",
        "code",
        "depth",
        "translations"
      ],
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "integer",
          "description": "Category ID"
        },
        "name": {
          "type": "string",
          "description": "Localised category name",
          "example": "Handbags"
        },
        "code": {
          "type": "string",
          "description": "Category code (slug)",
          "example": "handbags"
        },
        "depth": {
          "type": "integer",
          "description": "Level in the category tree",
          "example": 1
        },
        "_links": {
          "description": "Links relating to the Category",
          "$ref": "#/definitions/categoryLinks"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date the category was last updated",
          "example": "2015-04-17T07:49:49Z"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time that the category was marked as deleted. If null then the category was not deleted"
        },
        "translations": {
          "description": "A list of available translations of the Category name",
          "type": "array",
          "items": {
            "$ref": "#/definitions/translation"
          }
        },
        "parent_id": {
          "type": "integer",
          "description": "The ID of the Parent category if there is one"
        },
        "children": {
          "description": "A list of child-Categories",
          "type": "array",
          "items": {
            "$ref": "#/definitions/category"
          }
        },
        "disabled_westfield_locales": {
          "description": "An optional array of `westfield_locale` strings that this category is disabled for.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-services": [
        "category"
      ]
    },
    "categoryLinks": {
      "description": "Links relating to the Category",
      "required": [
        "self"
      ],
      "additionalProperties": false,
      "properties": {
        "self": {
          "description": "Canonical link to this category",
          "$ref": "#/definitions/genericLink"
        },
        "parent": {
          "description": "Link to the parent category",
          "$ref": "#/definitions/genericLink"
        },
        "children": {
          "description": "Link to the child categories",
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "Category422Response": {
      "description": "An HTTP-422 response from the server",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "description": "The `data` component of the response",
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "description": "The `errors` component of the response",
          "$ref": "#/definitions/Category422Error"
        },
        "meta": {
          "description": "The `meta` component of the response",
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "errorList": {
      "description": "A list of error strings",
      "type": "array",
      "items": {
        "type": "string"
      },
      "additionalProperties": false,
      "x-services": [
        "category"
      ]
    },
    "Category422Error": {
      "description": "Describes the HTTP-422 error",
      "additionalProperties": false,
      "properties": {
        "base": {
          "type": "array",
          "description": "Errors with the submission overall",
          "items": {
            "$ref": "#/definitions/Category422ErrorDetails"
          }
        },
        "id": {
          "$ref": "#/definitions/errorList",
          "description": "Errors with the `id` attribute"
        },
        "name": {
          "$ref": "#/definitions/errorList",
          "description": "Errors with `name` attribute"
        },
        "code": {
          "$ref": "#/definitions/errorList",
          "description": "Errors with `code` attribute"
        },
        "depth": {
          "$ref": "#/definitions/errorList",
          "description": "Errors with the `depth` attribute"
        },
        "_links": {
          "$ref": "#/definitions/errorList",
          "description": "Errors with the `_links` attribute"
        },
        "updated_at": {
          "$ref": "#/definitions/errorList",
          "description": "Errors with the `updated_at` attribute"
        },
        "deleted_at": {
          "$ref": "#/definitions/errorList",
          "description": "Errors with the `deleted_at` attribute"
        },
        "translations": {
          "$ref": "#/definitions/errorList",
          "description": "Errors with the `translations` attribute"
        },
        "children": {
          "$ref": "#/definitions/errorList",
          "description": "Errors with the `children` attribute"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "Category422ErrorDetails": {
      "description": "Details on an HTTP-422 error",
      "additionalProperties": false,
      "required": [
        "message",
        "params"
      ],
      "properties": {
        "message": {
          "description": "Description of the error that occurred",
          "type": "string"
        },
        "params": {
          "description": "Parameters which were used in the request",
          "type": "object"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "servicesListResponse": {
      "description": "List of services",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/service"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "serviceResponse": {
      "description": "Service information",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/service"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "serviceTypesListResponse": {
      "description": "List of service types",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/serviceType"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "serviceTypeResponse": {
      "description": "Service Type information",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/serviceType"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "service": {
      "type": "object",
      "required": [
        "id",
        "service_type",
        "country",
        "centre_id",
        "short_title",
        "long_title",
        "description",
        "active",
        "sort_order",
        "url",
        "service_locations",
        "service_rates",
        "service_hours",
        "_links"
      ],
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "integer",
          "description": "Service identifier"
        },
        "service_type": {
          "type": "string",
          "description": "Type of service"
        },
        "country": {
          "type": "string",
          "description": "Country in which the service is available"
        },
        "centre_id": {
          "type": "string",
          "description": "Centre in which the service is available"
        },
        "short_title": {
          "type": "string",
          "description": "Short title"
        },
        "long_title": {
          "type": "string",
          "description": "Long title"
        },
        "description": {
          "type": "string",
          "description": "Full description"
        },
        "active": {
          "type": "boolean",
          "description": "Whether the service is currently available"
        },
        "sort_order": {
          "type": "integer",
          "description": "Expected order of appearance in lists"
        },
        "url": {
          "type": "string",
          "description": "External URL"
        },
        "service_locations": {
          "description": "List of available locations",
          "type": "array",
          "items": {
            "$ref": "#/definitions/serviceLocationPayload"
          }
        },
        "service_rates": {
          "description": "List of available rates",
          "type": "array",
          "items": {
            "$ref": "#/definitions/serviceRatePayload"
          }
        },
        "service_hours": {
          "description": "List of available opening hours",
          "type": "array",
          "items": {
            "$ref": "#/definitions/serviceHourPayload"
          }
        },
        "updated_at": {
          "description": "Date and time the centre service was last updated.",
          "type": "string",
          "format": "date-time"
        },
        "_links": {
          "$ref": "#/definitions/serviceLinks"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the centre service was marked as deleted"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "serviceType": {
      "type": "object",
      "required": [
        "id",
        "name",
        "country",
        "_links"
      ],
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "integer",
          "description": "Service type identifier"
        },
        "name": {
          "type": "string",
          "description": "Service type name"
        },
        "country": {
          "type": "string",
          "description": "Country in which the service type is available"
        },
        "updated_at": {
          "description": "Date and time the service type was last updated.",
          "type": "string",
          "format": "date-time"
        },
        "_links": {
          "$ref": "#/definitions/serviceTypeLinks"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the service type was marked as deleted"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "serviceLinks": {
      "required": [
        "self",
        "image",
        "centre"
      ],
      "additionalProperties": false,
      "properties": {
        "self": {
          "description": "Canonical link to this service",
          "$ref": "#/definitions/serviceLink"
        },
        "image": {
          "description": "Cloudinary image details",
          "$ref": "#/definitions/imageLink"
        },
        "centre": {
          "description": "Canonical link to the centre",
          "$ref": "#/definitions/centreLink"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "serviceTypeLinks": {
      "required": [
        "self"
      ],
      "additionalProperties": false,
      "properties": {
        "self": {
          "description": "Canonical link to this service type",
          "$ref": "#/definitions/serviceTypeLink"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "serviceLink": {
      "required": [
        "href"
      ],
      "additionalProperties": false,
      "properties": {
        "href": {
          "type": "string"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "serviceTypeLink": {
      "required": [
        "href"
      ],
      "additionalProperties": false,
      "properties": {
        "href": {
          "type": "string"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "Service422Response": {
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/Service422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "Service422Error": {
      "additionalProperties": false,
      "properties": {
        "base": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Service422ErrorDetails"
          }
        },
        "service_type": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "short_title": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "long_title": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "active": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sort_order": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "phone_number": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "email": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "url": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "centre_id": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "image_ref": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rates": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "country": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "Service422ErrorDetails": {
      "required": [
        "message",
        "params"
      ],
      "additionalProperties": false,
      "properties": {
        "message": {
          "description": "Error description",
          "type": "string"
        },
        "params": {
          "description": "Request parameters supplied",
          "type": "object"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "ServiceType422Response": {
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/ServiceType422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "ServiceType422Error": {
      "additionalProperties": false,
      "properties": {
        "base": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceType422ErrorDetails"
          }
        },
        "name": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "country": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "ServiceType422ErrorDetails": {
      "required": [
        "message",
        "params"
      ],
      "additionalProperties": false,
      "properties": {
        "message": {
          "description": "Error description",
          "type": "string"
        },
        "params": {
          "description": "Request parameters supplied",
          "type": "object"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "servicePayload": {
      "required": [
        "centre_id",
        "country",
        "service_type",
        "short_title"
      ],
      "additionalProperties": false,
      "properties": {
        "centre_id": {
          "type": "string",
          "description": "Centre this service is available in"
        },
        "country": {
          "type": "string",
          "description": "Country this service is available in"
        },
        "service_type": {
          "type": "string",
          "description": "Type of service"
        },
        "short_title": {
          "type": "string",
          "description": "Short title for the service"
        },
        "long_title": {
          "type": "string",
          "description": "Long title for the service"
        },
        "description": {
          "type": "string",
          "description": "Full description of the service"
        },
        "active": {
          "type": "boolean",
          "description": "Whether the service is currently available"
        },
        "sort_order": {
          "type": "integer",
          "description": "Order in which the service should appear in lists"
        },
        "url": {
          "type": "string",
          "description": "URL for the service"
        },
        "rates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/serviceRatePayload"
          }
        },
        "locations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/serviceLocationPayload"
          }
        },
        "hours": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/serviceHourPayload"
          }
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "serviceRatePayload": {
      "description": "Service rates",
      "required": [
        "name",
        "label",
        "value",
        "sort_order"
      ],
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "description": "Type of rate"
        },
        "label": {
          "type": "string",
          "description": "Name of this specific rate"
        },
        "value": {
          "type": "string",
          "description": "The value of the rate"
        },
        "sort_order": {
          "type": "integer",
          "description": "Order in which this rate should be displayed"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "serviceLocationPayload": {
      "description": "Service locations",
      "required": [
        "name",
        "label",
        "value",
        "sort_order"
      ],
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "description": "Type of location"
        },
        "label": {
          "type": "string",
          "description": "Name of this specific location"
        },
        "value": {
          "type": "string",
          "description": "The value of the location"
        },
        "sort_order": {
          "type": "integer",
          "description": "Order in which this location should be displayed"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "serviceHourPayload": {
      "description": "Service opening hours",
      "required": [
        "name",
        "label",
        "value",
        "sort_order"
      ],
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "description": "Type of hour"
        },
        "label": {
          "type": "string",
          "description": "Name of this specific hour"
        },
        "value": {
          "type": "string",
          "description": "The value of the hour"
        },
        "sort_order": {
          "type": "integer",
          "description": "Order in which this hour should be displayed"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "serviceTypePayload": {
      "required": [
        "name",
        "country"
      ],
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of service type",
          "example": "car_wash"
        },
        "country": {
          "type": "string",
          "description": "Country where the service type is available",
          "maxLength": 2,
          "example": "au"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "noticeListResponse": {
      "description": "List of notices",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/noticeListInstance"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyErrorResponse"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "noticeResponse": {
      "description": "Requested notice record",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/notice"
        },
        "errors": {
          "$ref": "#/definitions/emptyErrorResponse"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "noticeCreateResponse": {
      "description": "Created notice",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/notice"
        },
        "errors": {
          "$ref": "#/definitions/emptyErrorResponse"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "notice": {
      "description": "Notice record",
      "type": "object",
      "required": [
        "attachment_ref",
        "centre_id",
        "detail",
        "expiry_date_time",
        "featured",
        "image_ref",
        "img_alt_text",
        "name",
        "notice_id",
        "publish_date_time",
        "updated_at",
        "_links"
      ],
      "additionalProperties": false,
      "properties": {
        "attachment_ref": {
          "type": "string",
          "description": "Attachment filename"
        },
        "centre_id": {
          "type": "string",
          "description": "Centre identifier"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted date"
        },
        "detail": {
          "type": "string",
          "minLength": 2,
          "description": "Notice content text"
        },
        "expiry_date_time": {
          "type": "string",
          "format": "date-time",
          "description": "Notice expiry date"
        },
        "featured": {
          "type": "boolean",
          "description": "Notice is featured (true/false)"
        },
        "image_ref": {
          "type": "string",
          "description": "Image filename"
        },
        "img_alt_text": {
          "type": "string",
          "description": "Image alternative text"
        },
        "name": {
          "type": "string",
          "minLength": 2,
          "maxLength": 40,
          "description": "Notice name"
        },
        "notice_id": {
          "type": "integer",
          "description": "Notice identifier"
        },
        "publish_date_time": {
          "type": "string",
          "format": "date-time",
          "description": "Notice publication date"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Update date"
        },
        "_links": {
          "description": "Hash of links",
          "$ref": "#/definitions/noticeLinks"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "noticeLinks": {
      "type": "object",
      "required": [
        "image",
        "self"
      ],
      "additionalProperties": false,
      "properties": {
        "image": {
          "description": "Link to image ref file",
          "$ref": "#/definitions/genericLink"
        },
        "self": {
          "description": "Canonical link to this notice",
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "noticeListInstance": {
      "type": "object",
      "required": [
        "expiry_date_time",
        "name",
        "notice_id",
        "publish_date_time",
        "updated_at",
        "_links"
      ],
      "additionalProperties": false,
      "properties": {
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted date"
        },
        "expiry_date_time": {
          "type": "string",
          "format": "date-time",
          "description": "Notice expiry date"
        },
        "name": {
          "type": "string",
          "minLength": 2,
          "maxLength": 40,
          "description": "Notice name"
        },
        "notice_id": {
          "type": "integer",
          "description": "Notice identifier"
        },
        "publish_date_time": {
          "type": "string",
          "format": "date-time",
          "description": "Notice publication date"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Update date"
        },
        "_links": {
          "description": "Hash of links",
          "$ref": "#/definitions/noticeListLinks"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "noticeListLinks": {
      "type": "object",
      "required": [
        "image",
        "self"
      ],
      "additionalProperties": false,
      "properties": {
        "image": {
          "description": "URI to obtain image ref file",
          "$ref": "#/definitions/genericLink"
        },
        "self": {
          "description": "URI to obtain this record",
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "notice_new": {
      "description": "Notice create and update parameters",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "attachment_ref": {
          "type": "string",
          "description": "Attachment filename"
        },
        "centre_id": {
          "type": "string",
          "description": "Centre identifier"
        },
        "detail": {
          "type": "string",
          "minLength": 2,
          "description": "Notice content text"
        },
        "expiry_date_time": {
          "type": "string",
          "format": "date-time",
          "description": "Notice expiry date"
        },
        "featured": {
          "type": "boolean",
          "description": "Notice is featured (true/false)"
        },
        "image_ref": {
          "type": "string",
          "description": "Image filename"
        },
        "img_alt_text": {
          "type": "string",
          "description": "Image alternative text"
        },
        "name": {
          "type": "string",
          "minLength": 2,
          "maxLength": 40,
          "description": "Notice name"
        },
        "publish_date_time": {
          "type": "string",
          "format": "date-time",
          "description": "Notice publication date"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "parkingResponse": {
      "description": "Requested parking record",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/parking"
        },
        "errors": {
          "$ref": "#/definitions/emptyErrorResponse"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "parkingCreateResponse": {
      "description": "Created parking record",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/parking"
        },
        "errors": {
          "$ref": "#/definitions/emptyErrorResponse"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "parking": {
      "description": "Parking record",
      "type": "object",
      "required": [
        "additional_parking_information",
        "centre_id",
        "credit_card_surcharge_amount",
        "flat_rate",
        "maximum_daily_rate_weekday",
        "maximum_daily_rate_weekend",
        "overnight_fee_weekday",
        "overnight_fee_weekend",
        "parking_rates",
        "pdf_ref",
        "rates_apply",
        "type_of_rate",
        "updated_at",
        "valet_parking_instructions"
      ],
      "additionalProperties": false,
      "properties": {
        "additional_parking_information": {
          "type": "string",
          "description": "Additional parking information"
        },
        "centre_id": {
          "type": "string",
          "description": "Centre identifier"
        },
        "credit_card_surcharge_amount": {
          "type": "string",
          "description": "Credit card surcharge amount"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted date"
        },
        "flat_rate": {
          "type": "string",
          "description": "Fee when parking is not hourly"
        },
        "maximum_daily_rate_weekday": {
          "type": "string",
          "description": "Maximum daily rate on weekdays"
        },
        "maximum_daily_rate_weekend": {
          "type": "string",
          "description": "Maximum daily rate on weekends"
        },
        "overnight_fee_weekday": {
          "type": "string",
          "description": "Overnight fee on weekdays"
        },
        "overnight_fee_weekend": {
          "type": "string",
          "description": "Overnight fee on weekends"
        },
        "parking_rates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/parkingRates"
          }
        },
        "pdf_ref": {
          "type": "string",
          "description": "PDF filename for terms and conditions"
        },
        "rates_apply": {
          "type": "boolean",
          "description": "Fee (true) or complimentary (false) parking"
        },
        "type_of_rate": {
          "type": "string",
          "description": "Rate type"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Update date"
        },
        "valet_parking_instructions": {
          "type": "string",
          "description": "Valet parking instructions"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "parkingRates": {
      "type": "object",
      "title": "Parking rates",
      "description": "Each n-th hour range with parking rates",
      "additionalProperties": false,
      "properties": {
        "hourly_rate_from": {
          "type": "string",
          "description": "Starting hour range"
        },
        "hourly_rate_to": {
          "type": "string",
          "description": "Ending hour range"
        },
        "hourly_rate_weekday": {
          "type": "string",
          "description": "Cost for this range on weekdays"
        },
        "hourly_rate_weekend": {
          "type": "string",
          "description": "Cost for this range on weekends"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "parking_new": {
      "type": "object",
      "title": "Parking create and update parameters",
      "additionalProperties": false,
      "properties": {
        "centre_id": {
          "type": "string",
          "description": "Centre identifier"
        },
        "additional_parking_information": {
          "type": "string",
          "description": "Additional parking information"
        },
        "valet_parking_instructions": {
          "type": "string",
          "description": "Valet parking instructions"
        },
        "pdf_ref": {
          "type": "string",
          "description": "PDF filename for terms and conditions"
        },
        "rates_apply": {
          "type": "boolean",
          "description": "Fee (true) or complimentary (false) parking"
        },
        "credit_card_surcharge_amount": {
          "type": "string",
          "description": "Credit card surcharge amount"
        },
        "type_of_rate": {
          "type": "string",
          "description": "Type of rate"
        },
        "maximum_daily_rate_weekday": {
          "type": "string",
          "description": "Maximum daily rate on weekdays"
        },
        "maximum_daily_rate_weekend": {
          "type": "string",
          "description": "Maximum daily rate on weekends"
        },
        "overnight_fee_weekday": {
          "type": "string",
          "description": "Overnight fee on weekdays"
        },
        "overnight_fee_weekend": {
          "type": "string",
          "description": "Overnight fee on weekends"
        },
        "flat_rate": {
          "type": "string",
          "description": "Fee when parking is not hourly"
        },
        "parking_rates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/parkingRates"
          }
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "centreListResponse": {
      "description": "List of centres",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/centreListInstance"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyErrorResponse"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "centreResponse": {
      "description": "Show centre response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/centre"
        },
        "errors": {
          "$ref": "#/definitions/emptyErrorResponse"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "centreCreateResponse": {
      "description": "Created centre response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/centre"
        },
        "errors": {
          "$ref": "#/definitions/emptyErrorResponse"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "geofenceList": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "building": {
          "$ref": "#/definitions/geofenceInstance"
        },
        "parking": {
          "$ref": "#/definitions/geofenceInstance"
        },
        "area": {
          "$ref": "#/definitions/geofenceInstance"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "geofenceInstance": {
      "description": "A circular region around a GPS point",
      "additionalProperties": false,
      "properties": {
        "latitude": {
          "type": "number",
          "description": "Latitude in degrees (-90 to +90)",
          "minimum": -90.0,
          "maximum": 90.0,
          "format": "double"
        },
        "longitude": {
          "type": "number",
          "description": "Longitude in degrees (-180 to +180)",
          "minimum": -180.0,
          "maximum": 180.0,
          "format": "double"
        },
        "radius": {
          "type": "number",
          "description": "Radius in metres (1 to 50,000)",
          "minimum": 1,
          "maximum": 50000,
          "format": "double"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "centreListInstance": {
      "type": "object",
      "required": [
        "centre_id",
        "country",
        "enabled",
        "features",
        "geofences",
        "hero_image_ref",
        "latitude",
        "longitude",
        "name",
        "short_name",
        "state",
        "suburb",
        "updated_at",
        "_links"
      ],
      "additionalProperties": false,
      "properties": {
        "centre_id": {
          "type": "string",
          "description": "Centre identifier"
        },
        "country": {
          "type": "string",
          "description": "Country"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted date"
        },
        "enabled": {
          "type": "boolean",
          "description": "Enabled flag (true/false)"
        },
        "features": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Features at centre"
          }
        },
        "geofences": {
          "description": "Hash of geofence information with possible keys \"building\", \"parking\", or \"area\"",
          "$ref": "#/definitions/geofenceList"
        },
        "hero_image_ref": {
          "type": "string",
          "description": "Hero image fielname"
        },
        "latitude": {
          "type": "number",
          "format": "double",
          "description": "Latitude"
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "description": "Longitude"
        },
        "micello_community": {
          "type": "integer",
          "description": "Micello community value"
        },
        "name": {
          "type": "string",
          "description": "Name"
        },
        "short_name": {
          "type": "string",
          "description": "Short name"
        },
        "state": {
          "type": "string",
          "description": "State"
        },
        "suburb": {
          "type": "string",
          "description": "City/Suburb"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated date"
        },
        "_links": {
          "description": "Hash of links",
          "$ref": "#/definitions/centreListLinks"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "centreListLinks": {
      "type": "object",
      "required": [
        "dining_image",
        "dining_image_medium",
        "dining_image_small",
        "hero_image",
        "self"
      ],
      "additionalProperties": false,
      "properties": {
        "dining_image": {
          "description": "URI to obtain dining image",
          "$ref": "#/definitions/genericLink"
        },
        "dining_image_medium": {
          "description": "URI to obtain medium-sized dining image",
          "$ref": "#/definitions/genericLink"
        },
        "dining_image_small": {
          "description": "URI to obtain small-sized dining image",
          "$ref": "#/definitions/genericLink"
        },
        "hero_image": {
          "description": "URI to obtain hero image",
          "$ref": "#/definitions/genericLink"
        },
        "self": {
          "description": "URI to obtain this record",
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "centre": {
      "type": "object",
      "description": "Centre",
      "required": [
        "business_unit_code",
        "centre_id",
        "country",
        "dining_image_ref",
        "dining_image_medium_ref",
        "dining_image_small_ref",
        "disabled_date",
        "email_address",
        "enabled",
        "enabled_date",
        "facebook",
        "features",
        "geofences",
        "google_plus",
        "hero_image_ref",
        "instagram",
        "latitude",
        "longitude",
        "micello_map_centre",
        "name",
        "number_of_levels",
        "owner",
        "phone_number",
        "pinterest",
        "postcode",
        "short_name",
        "state",
        "street_address",
        "suburb",
        "theme",
        "time_zone",
        "twitter",
        "type",
        "youtube",
        "updated_at",
        "_links"
      ],
      "additionalProperties": false,
      "properties": {
        "business_unit_code": {
          "type": "string",
          "description": "Business unit code"
        },
        "centre_id": {
          "type": "string",
          "description": "Centre identifier"
        },
        "country": {
          "type": "string",
          "description": "Country"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted date"
        },
        "dining_image_ref": {
          "type": "string",
          "description": "Dining image filename"
        },
        "dining_image_medium_ref": {
          "type": "string",
          "description": "Medium-sized dining image filename"
        },
        "dining_image_small_ref": {
          "type": "string",
          "description": "Small-sized dining image filename"
        },
        "disabled_date": {
          "type": "null",
          "format": "date-time",
          "description": "Date centre will-be/was disabled"
        },
        "email_address": {
          "type": "string",
          "description": "Email address"
        },
        "enabled": {
          "type": "boolean",
          "description": "Centre is enabled (true/false)"
        },
        "enabled_date": {
          "type": "string",
          "format": "date-time",
          "description": "Date centre is/was enabled"
        },
        "facebook": {
          "type": "string",
          "description": "URI of facebook page"
        },
        "features": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Feature at centre"
          }
        },
        "geofences": {
          "description": "Hash of geofence information with possible keys \"building\", \"parking\", or \"area\"",
          "$ref": "#/definitions/geofenceList"
        },
        "google_plus": {
          "type": "string",
          "description": "URI of Google+ page"
        },
        "hero_image_ref": {
          "type": "string",
          "description": "Hero image fielname"
        },
        "instagram": {
          "type": "string",
          "description": "URI of Instagram page"
        },
        "latitude": {
          "type": "number",
          "format": "double",
          "description": "Latitude"
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "description": "Longitude"
        },
        "micello_community": {
          "type": "integer",
          "description": "Micello community value"
        },
        "micello_map_centre": {
          "description": "Coordinate of centre of map",
          "$ref": "#/definitions/micello_map_centre"
        },
        "name": {
          "type": "string",
          "description": "Name"
        },
        "owner": {
          "type": "string",
          "description": "Owner of centre"
        },
        "number_of_levels": {
          "type": "integer",
          "description": "Number of floor levels"
        },
        "phone_number": {
          "type": "string",
          "description": "Phone number"
        },
        "pinterest": {
          "type": "string",
          "description": "URI of Pinterest page"
        },
        "postcode": {
          "type": "string",
          "description": "Postal Code"
        },
        "short_name": {
          "type": "string",
          "description": "Short name"
        },
        "state": {
          "type": "string",
          "description": "State"
        },
        "street_address": {
          "type": "string",
          "description": "Street address"
        },
        "suburb": {
          "type": "string",
          "description": "City/Suburb"
        },
        "theme": {
          "type": "string",
          "description": "Tier of Centre"
        },
        "time_zone": {
          "type": "string",
          "description": "Centre's timezone"
        },
        "today_closed": {
          "type": "boolean",
          "description": "Centre is closed today (true/false)"
        },
        "today_closing_time": {
          "type": "string",
          "format": "date-time",
          "description": "Closing time of centre today"
        },
        "today_opening_time": {
          "type": "string",
          "format": "date-time",
          "description": "Opening time of centre today"
        },
        "twitter": {
          "type": "string",
          "description": "URI of twitter page"
        },
        "type": {
          "type": "string",
          "description": "Type of asset"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated date"
        },
        "youtube": {
          "type": "string",
          "description": "URI of YouTube page"
        },
        "_links": {
          "description": "Hash of links",
          "$ref": "#/definitions/centreLinks"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "centreLinks": {
      "type": "object",
      "required": [
        "deals",
        "dining_image",
        "dining_image_medium",
        "dining_image_small",
        "events",
        "hero_image",
        "products",
        "self",
        "stores",
        "trading_hours"
      ],
      "additionalProperties": false,
      "properties": {
        "deals": {
          "description": "URI to obtain centre deals",
          "$ref": "#/definitions/genericLink"
        },
        "dining_image": {
          "description": "URI to obtain dining image",
          "$ref": "#/definitions/genericLink"
        },
        "dining_image_medium": {
          "description": "URI to obtain medium-sized dining image",
          "$ref": "#/definitions/genericLink"
        },
        "dining_image_small": {
          "description": "URI to obtain small-sized dining image",
          "$ref": "#/definitions/genericLink"
        },
        "events": {
          "description": "URI to obtain centre events",
          "$ref": "#/definitions/genericLink"
        },
        "hero_image": {
          "description": "URI to obtain hero image",
          "$ref": "#/definitions/genericLink"
        },
        "products": {
          "description": "URI to obtain centre products",
          "$ref": "#/definitions/genericLink"
        },
        "self": {
          "description": "URI to obtain this record",
          "$ref": "#/definitions/genericLink"
        },
        "stores": {
          "description": "URI to obtain centre stores",
          "$ref": "#/definitions/genericLink"
        },
        "trading_hours": {
          "description": "URI to obtain centre trading hours",
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "micello_map_centre": {
      "type": "object",
      "required": [
        "x",
        "y"
      ],
      "additionalProperties": false,
      "properties": {
        "x": {
          "type": "number",
          "format": "double",
          "description": "X-coordinate of map centre."
        },
        "y": {
          "type": "number",
          "format": "double",
          "description": "Y-coordinate of map centre."
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "centre_new": {
      "type": "object",
      "description": "Centre update and create parameters",
      "additionalProperties": false,
      "properties": {
        "api_version": {
          "type": "string",
          "description": "API Version"
        },
        "business_unit_code": {
          "type": "string",
          "description": "Business unit code"
        },
        "centre_id": {
          "type": "string",
          "description": "Centre identifier"
        },
        "country": {
          "type": "string",
          "description": "Country"
        },
        "dining_image_ref": {
          "type": "string",
          "description": "Dining image filename"
        },
        "dining_image_medium_ref": {
          "type": "string",
          "description": "Medium-sized dining image filename"
        },
        "dining_image_small_ref": {
          "type": "string",
          "description": "Small-sized dining image filename"
        },
        "disabled_date": {
          "type": "string",
          "format": "date-time",
          "description": "Date centre will-be/was disabled"
        },
        "email_address": {
          "type": "string",
          "description": "Email address"
        },
        "enabled": {
          "type": "boolean",
          "description": "Centre is enabled (true/false)"
        },
        "enabled_date": {
          "type": "string",
          "format": "date-time",
          "description": "Date centre is/was enabled"
        },
        "facebook": {
          "type": "string",
          "description": "URI of facebook page"
        },
        "features": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Feature at centre"
          }
        },
        "google_plus": {
          "type": "string",
          "description": "URI of Google+ page"
        },
        "hero_image_ref": {
          "type": "string",
          "description": "Hero image fielname"
        },
        "instagram": {
          "type": "string",
          "description": "URI of Instagram page"
        },
        "latitude": {
          "type": "number",
          "format": "double",
          "description": "Latitude"
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "description": "Longitude"
        },
        "micello_community": {
          "type": "integer",
          "description": "Micello community value"
        },
        "micello_map_centre": {
          "description": "Coordinate of centre of map",
          "$ref": "#/definitions/micello_map_centre"
        },
        "name": {
          "type": "string",
          "description": "Name"
        },
        "number_of_levels": {
          "type": "integer",
          "description": "Number of floor levels"
        },
        "owner": {
          "type": "string",
          "description": "Owner of centre"
        },
        "phone_number": {
          "type": "string",
          "description": "Phone number"
        },
        "pinterest": {
          "type": "string",
          "description": "URI of Pinterest page"
        },
        "postcode": {
          "type": "string",
          "description": "Postal Code"
        },
        "short_name": {
          "type": "string",
          "description": "Short name"
        },
        "state": {
          "type": "string",
          "description": "State"
        },
        "street_address": {
          "type": "string",
          "description": "Street address"
        },
        "suburb": {
          "type": "string",
          "description": "City/Suburb"
        },
        "time_zone": {
          "type": "string",
          "description": "Time zone of centre"
        },
        "twitter": {
          "type": "string",
          "description": "URI of twitter page"
        },
        "type": {
          "type": "string",
          "description": "Type of asset"
        },
        "youtube": {
          "type": "string",
          "description": "URI of YouTube page"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "countryListResponse": {
      "description": "List of countries",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/country"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "country": {
      "description": "Information about a country",
      "required": [
        "country_code",
        "name",
        "enabled_date"
      ],
      "additionalProperties": false,
      "properties": {
        "country_code": {
          "description": "Two-letter country code",
          "type": "string",
          "example": "AU"
        },
        "name": {
          "description": "Country name",
          "type": "string",
          "example": "Australia"
        },
        "enabled_date": {
          "description": "Date when country was enabled",
          "type": "string",
          "format": "date-time"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "stateListResponse": {
      "description": "List of states",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/state"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyErrorResponse"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "state": {
      "description": "State",
      "required": [
        "abbreviation",
        "country_code",
        "enabled_date",
        "name",
        "state_id"
      ],
      "additionalProperties": false,
      "properties": {
        "abbreviation": {
          "description": "State abbreviation",
          "type": "string"
        },
        "country_code": {
          "description": "Two-letter state code",
          "type": "string"
        },
        "enabled_date": {
          "description": "Date when state was enabled",
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "description": "State name",
          "type": "string"
        },
        "state_id": {
          "description": "State identifier",
          "type": "integer"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "422NoticeResponse": {
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/422NoticeError"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "422NoticeError": {
      "additionalProperties": false,
      "properties": {
        "centre_id": {
          "$ref": "#/definitions/centreValidationError"
        },
        "detail": {
          "$ref": "#/definitions/centreValidationError"
        },
        "expiry_date_time": {
          "$ref": "#/definitions/centreValidationError"
        },
        "image_ref": {
          "$ref": "#/definitions/centreValidationError"
        },
        "img_alt_text": {
          "$ref": "#/definitions/centreValidationError"
        },
        "name": {
          "$ref": "#/definitions/centreValidationError"
        },
        "publish_date_time": {
          "$ref": "#/definitions/centreValidationError"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "422CentreResponse": {
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/422CentreError"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "422CentreError": {
      "additionalProperties": false,
      "properties": {
        "business_unit_code": {
          "$ref": "#/definitions/centreValidationError"
        },
        "centre_id": {
          "$ref": "#/definitions/centreValidationError"
        },
        "country": {
          "$ref": "#/definitions/centreValidationError"
        },
        "email_address": {
          "$ref": "#/definitions/centreValidationError"
        },
        "latitude": {
          "$ref": "#/definitions/centreValidationError"
        },
        "longitude": {
          "$ref": "#/definitions/centreValidationError"
        },
        "micello_community": {
          "$ref": "#/definitions/centreValidationError"
        },
        "micello_map_centre_x": {
          "$ref": "#/definitions/centreValidationError"
        },
        "micello_map_centre_y": {
          "$ref": "#/definitions/centreValidationError"
        },
        "name": {
          "$ref": "#/definitions/centreValidationError"
        },
        "phone_number": {
          "$ref": "#/definitions/centreValidationError"
        },
        "postcode": {
          "$ref": "#/definitions/centreValidationError"
        },
        "state": {
          "$ref": "#/definitions/centreValidationError"
        },
        "street_address": {
          "$ref": "#/definitions/centreValidationError"
        },
        "suburb": {
          "$ref": "#/definitions/centreValidationError"
        },
        "timezone": {
          "$ref": "#/definitions/centreValidationError"
        },
        "theme": {
          "$ref": "#/definitions/centreValidationError"
        },
        "phone_no": {
          "$ref": "#/definitions/centreValidationError"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "centreValidationError": {
      "description": "Errors with this attribute",
      "type": "array",
      "items": {
        "type": "string"
      },
      "x-services": [
        "centre"
      ]
    },
    "curation": {
      "description": "Information about a curation",
      "required": [
        "id",
        "name",
        "code",
        "description"
      ],
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "integer",
          "description": "Auto generated ID"
        },
        "name": {
          "type": "string",
          "description": "Curation name"
        },
        "code": {
          "type": "string",
          "description": "Curation code",
          "example": "my-curation"
        },
        "description": {
          "type": "string",
          "description": "Description of the curation"
        },
        "seo_title": {
          "type": "string",
          "description": "SEO title"
        },
        "state": {
          "type": "string",
          "description": "State of curation",
          "example": "live"
        },
        "image_ref": {
          "type": "string",
          "description": "Code provided by image handling provider"
        },
        "available_at": {
          "type": "string",
          "format": "date",
          "description": "When the curation is available"
        },
        "ends_at": {
          "type": "string",
          "format": "date",
          "description": "When this curation expires"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "The last time this curation was updated"
        },
        "centre_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of centres this curation is available for"
        },
        "product_ids": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "List of product ids in this curation"
        },
        "category_ids": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "List of category ids"
        },
        "_embedded": {
          "$ref": "#/definitions/embeddedCurations"
        },
        "_links": {
          "$ref": "#/definitions/curationLinks"
        }
      },
      "x-services": [
        "collection"
      ]
    },
    "embeddedCurations": {
      "description": "Embedded curation",
      "additionalProperties": false,
      "properties": {
        "curations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/embeddedCuration"
          }
        }
      },
      "x-services": [
        "collection"
      ]
    },
    "embeddedCuration": {
      "description": "Curations embedded within a parent",
      "required": [
        "id",
        "name",
        "code",
        "description",
        "relationship",
        "_links"
      ],
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "integer",
          "description": "Auto generated ID"
        },
        "name": {
          "type": "string",
          "description": "Curation name"
        },
        "code": {
          "type": "string",
          "description": "Curation code"
        },
        "description": {
          "type": "string",
          "description": "Description of curation"
        },
        "relationship": {
          "type": "string",
          "description": "Relationship to parent curation"
        },
        "_links": {
          "$ref": "#/definitions/embeddedCurationLinks"
        }
      },
      "x-services": [
        "collection"
      ]
    },
    "curationLinks": {
      "required": [
        "self",
        "image"
      ],
      "properties": {
        "self": {
          "description": "Canonical URL for this curation",
          "$ref": "#/definitions/genericLink"
        },
        "image": {
          "description": "Link to the image associated with this curation",
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "collection"
      ]
    },
    "embeddedCurationLinks": {
      "required": [
        "self"
      ],
      "properties": {
        "self": {
          "description": "Canonical URL for this curation",
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "collection"
      ]
    },
    "curationPayload": {
      "description": "Payload data for creating or updating a curation",
      "required": [
        "name",
        "available_at",
        "ends_at"
      ],
      "additionalProperties": false,
      "properties": {
        "id": {
          "description": "Curation ID",
          "type": "integer",
          "example": 1
        },
        "name": {
          "description": "Curation name",
          "type": "string",
          "example": "My New Curation"
        },
        "code": {
          "description": "Code of new curation",
          "type": "string",
          "example": "my-curation"
        },
        "state": {
          "description": "State of new curation",
          "type": "string",
          "example": "live"
        },
        "description": {
          "description": "Description of new curation",
          "type": "string",
          "example": "Description of my new curation"
        },
        "image_ref": {
          "description": "Image ref of new curation",
          "type": "string"
        },
        "available_at": {
          "description": "Availability of new curation (start)",
          "type": "string",
          "format": "date",
          "example": "2016-01-01"
        },
        "ends_at": {
          "description": "Availability of new curation (finish)",
          "type": "string",
          "format": "date",
          "example": "2016-01-31"
        },
        "seo_title": {
          "description": "SEO title of new curation",
          "type": "string"
        }
      },
      "x-services": [
        "collection"
      ]
    },
    "curationsListResponse": {
      "description": "List of curations",
      "required": [
        "data",
        "meta",
        "errors"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "description": "The `data` component of the response",
          "type": "array",
          "items": {
            "$ref": "#/definitions/curation"
          }
        },
        "errors": {
          "description": "The `errors` component of the response",
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "description": "The `meta` component of the response",
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "collection"
      ]
    },
    "curationResponse": {
      "description": "Information for a specific curation",
      "required": [
        "data",
        "meta",
        "errors"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "description": "The `data` component of the response",
          "$ref": "#/definitions/curation"
        },
        "errors": {
          "description": "The `errors` component of the response",
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "description": "The `meta` component of the response",
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "collection"
      ]
    },
    "curationCreateResponse": {
      "description": "Information about the new curation",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/curation"
        },
        "errors": {
          "description": "The `errors` component of the response",
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "description": "The `meta` component of the response",
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "collection"
      ]
    },
    "curation422Response": {
      "description": "An HTTP-422 response from the server",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "description": "The `data` component of the response",
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "description": "The `errors` component of the response",
          "$ref": "#/definitions/curation422Error"
        },
        "meta": {
          "description": "The `meta` component of the response",
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "collection"
      ]
    },
    "curation422Error": {
      "description": "List of errors returned while processing the request",
      "additionalProperties": false,
      "properties": {
        "base": {
          "type": "array",
          "description": "General errors",
          "items": {
            "$ref": "#/definitions/generalError"
          }
        },
        "id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Errors with the `id` attribute"
        },
        "name": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Errors with `name` attribute"
        },
        "code": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Errors with `code` attribute"
        },
        "state": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Errors with `state` attribute"
        },
        "image_ref": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Errors with `image_ref` attribute"
        },
        "banner_wide_image_ref": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Errors with `banner_wide_image_ref` attribute"
        },
        "banner_narrow_image_ref": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Errors with `banner_narrow_image_ref` attribute"
        },
        "available_from": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Errors with `available_from` attribute"
        },
        "available_to": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Errors with `available_to` attribute"
        },
        "centre_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Errors with `centre_ids` attribute"
        },
        "product_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Errors with `product_ids` attribute"
        },
        "seo_title": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Errors with `seo_title` attribute"
        },
        "seo_description": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Errors with `seo_description` attribute"
        },
        "deleted_at": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Errors with `deleted_at` attribute"
        },
        "category_ids": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Errors with `category_ids` attribute"
        }
      },
      "x-services": [
        "collection"
      ]
    },
    "generalError": {
      "description": "Error information",
      "required": [
        "message",
        "params"
      ],
      "additionalProperties": false,
      "properties": {
        "message": {
          "description": "Error description",
          "type": "string"
        },
        "params": {
          "description": "Parameters which were used in the request",
          "type": "object"
        }
      },
      "x-services": [
        "collection"
      ]
    },
    "IndividualSearchResponse": {
      "type": "object",
      "description": "a search result",
      "x-services": [
        "search"
      ]
    },
    "SearchResponse": {
      "type": "object",
      "required": [
        "nbHits",
        "page",
        "nbPages",
        "processingTimeMS",
        "query",
        "params",
        "index",
        "hitsPerPage",
        "facets",
        "hits"
      ],
      "properties": {
        "nbHits": {
          "type": "integer",
          "description": "Total number of results for this type"
        },
        "page": {
          "type": "integer",
          "description": "Which page this response is on"
        },
        "nbPages": {
          "type": "integer",
          "description": "How many pages there are in total"
        },
        "processingTimeMS": {
          "type": "integer",
          "description": "How long this spent being processed on the backend"
        },
        "query": {
          "type": "string",
          "description": "The search term queried for"
        },
        "params": {
          "type": "string",
          "description": "The query as sent to the search backend"
        },
        "index": {
          "type": "string",
          "description": "The type of results contained in the hits key"
        },
        "hitsPerPage": {
          "type": "integer",
          "description": "The number of results per page"
        },
        "facets": {
          "type": "object",
          "description": "The facets available to filter by"
        },
        "hits": {
          "type": "array",
          "description": "An array of items that match this search",
          "items": {
            "$ref": "#/definitions/IndividualSearchResponse"
          }
        },
        "facets_stats": {
          "type": "object",
          "description": "statistics about facets"
        },
        "exhaustiveFacetsCount": {
          "type": "boolean",
          "description": "Is the facet count accurate?"
        }
      },
      "additionalProperties": false,
      "x-services": [
        "search"
      ]
    },
    "eventsListResponse": {
      "description": "List of events",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/event"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "event"
      ]
    },
    "eventResponse": {
      "description": "Information about a specific event",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/event"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "event"
      ]
    },
    "eventCreateParameters": {
      "type": "object",
      "description": "Parameters for creating an event",
      "required": [
        "name",
        "centre_id",
        "image_ref",
        "start",
        "finish",
        "published_at",
        "occurrences"
      ],
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "description": "Event name"
        },
        "description": {
          "type": "string",
          "description": "Event description"
        },
        "centre_id": {
          "type": "string",
          "description": "Centre the event belongs to"
        },
        "image_ref": {
          "type": "string",
          "description": "Image filename of event location"
        },
        "location": {
          "type": "string",
          "description": "Location of the event at the centre"
        },
        "locations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/location"
          }
        },
        "featured": {
          "type": "boolean",
          "description": "Featured"
        },
        "external_url": {
          "type": "string",
          "description": "External URL for event information"
        },
        "external_url_description": {
          "type": "string",
          "description": "External URL information description"
        },
        "external_buy_url": {
          "type": "string",
          "description": "External URL to buy tickets to event"
        },
        "occurrences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/occurence"
          },
          "description": "One ore more occurences of event"
        },
        "start": {
          "type": "string",
          "format": "date",
          "description": "Starting date"
        },
        "end_date": {
          "type": "string",
          "format": "date",
          "description": "Ending date"
        },
        "published_at": {
          "type": "string",
          "format": "date-time",
          "description": "Published date"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date the event was last updated"
        },
        "started_at": {
          "type": "string",
          "description": "Start time"
        },
        "finish": {
          "type": "string",
          "description": "End time"
        }
      },
      "x-services": [
        "event"
      ]
    },
    "eventUpdateParameters": {
      "type": "object",
      "description": "Parameters for updating an event",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "description": "Event name"
        },
        "description": {
          "type": "string",
          "description": "Event description"
        },
        "centre_id": {
          "type": "string",
          "description": "Centre the event belongs to"
        },
        "image_ref": {
          "type": "string",
          "description": "Image filename of event location"
        },
        "location": {
          "type": "string",
          "description": "Location of the event at the centre"
        },
        "locations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/location"
          }
        },
        "featured": {
          "type": "boolean",
          "description": "Featured"
        },
        "external_url": {
          "type": "string",
          "description": "External URL for event information"
        },
        "external_url_description": {
          "type": "string",
          "description": "External URL information description"
        },
        "external_buy_url": {
          "type": "string",
          "description": "External URL to buy tickets to event"
        },
        "occurrences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/occurence"
          },
          "description": "One ore more occurences of event"
        },
        "start": {
          "type": "string",
          "format": "date",
          "description": "Starting date"
        },
        "end_date": {
          "type": "string",
          "format": "date",
          "description": "Ending date"
        },
        "published_at": {
          "type": "string",
          "format": "date-time",
          "description": "Published date"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date the event was last updated"
        },
        "started_at": {
          "type": "string",
          "description": "Start time"
        },
        "finish": {
          "type": "string",
          "description": "End time"
        }
      },
      "x-services": [
        "event"
      ]
    },
    "occurence": {
      "type": "object",
      "description": "Range of time when the event is available",
      "required": [
        "start",
        "finish"
      ],
      "additionalProperties": false,
      "properties": {
        "start": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the event starts"
        },
        "finish": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the event finishes"
        }
      },
      "x-services": [
        "event"
      ]
    },
    "event": {
      "type": "object",
      "required": [
        "_embedded",
        "_links",
        "categories",
        "centre_id",
        "date",
        "description",
        "end_date",
        "external_buy_url",
        "external_url",
        "external_url_description",
        "featured",
        "id",
        "location",
        "locations",
        "name",
        "occurrences",
        "published_at",
        "retailer_codes",
        "started_at",
        "updated_at"
      ],
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "integer",
          "description": "Auto generated ID"
        },
        "name": {
          "type": "string",
          "description": "Event name"
        },
        "description": {
          "type": "string",
          "description": "Event description"
        },
        "centre_id": {
          "type": "string",
          "description": "Centre the event belongs to"
        },
        "location": {
          "type": "string",
          "description": "Location of the event at the centre"
        },
        "locations": {
          "type": "array",
          "description": "List of jibestream locations and meta data",
          "items": {
            "$ref": "#/definitions/location"
          }
        },
        "featured": {
          "type": "boolean",
          "description": "Featured"
        },
        "external_url": {
          "type": "string",
          "description": "External URL for event information"
        },
        "external_url_description": {
          "type": "string",
          "description": "External URL information description"
        },
        "external_buy_url": {
          "type": "string",
          "description": "External URL to buy tickets to event"
        },
        "occurrences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/occurence"
          },
          "description": "One ore more occurences of event"
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "Starting date"
        },
        "end_date": {
          "type": "string",
          "format": "date",
          "description": "Ending date"
        },
        "published_at": {
          "type": "string",
          "format": "date-time",
          "description": "Published date"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date the event was last updated"
        },
        "started_at": {
          "type": "string",
          "description": "Start time"
        },
        "finish": {
          "type": "string",
          "description": "End time"
        },
        "retailer_codes": {
          "description": "Retailer codes",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "categories": {
          "description": "Categories this event belongs to",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "_links": {
          "$ref": "#/definitions/eventLinks"
        },
        "_embedded": {
          "$ref": "#/definitions/eventEmbedded"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time that the event was marked as deleted."
        }
      },
      "x-services": [
        "event"
      ]
    },
    "eventEmbedded": {
      "required": [
        "retailers"
      ],
      "additionalProperties": false,
      "properties": {
        "retailers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/embeddedRetailer"
          }
        }
      },
      "x-services": [
        "event"
      ]
    },
    "embeddedRetailer": {
      "required": [
        "name",
        "_links"
      ],
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string"
        },
        "_links": {
          "$ref": "#/definitions/retailerLinks"
        }
      },
      "x-services": [
        "event"
      ]
    },
    "eventLinks": {
      "required": [
        "self",
        "image",
        "centre",
        "retailers"
      ],
      "additionalProperties": false,
      "properties": {
        "self": {
          "description": "Canonical link to this event",
          "$ref": "#/definitions/eventLink"
        },
        "image": {
          "description": "Canonical link to the event image",
          "$ref": "#/definitions/imageLink"
        },
        "centre": {
          "description": "Canonical link to the event's centre",
          "$ref": "#/definitions/centreLink"
        },
        "retailers": {
          "description": "Canonical links to retailers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/eventRetailer"
          }
        }
      },
      "x-services": [
        "event"
      ]
    },
    "eventRetailer": {
      "description": "Retailer associated with an event",
      "required": [
        "name",
        "href"
      ],
      "additionalProperties": false,
      "properties": {
        "name": {
          "description": "Retailer name",
          "type": "string"
        },
        "href": {
          "description": "Canonical link to retailer",
          "type": "string"
        }
      },
      "x-services": [
        "event"
      ]
    },
    "eventLink": {
      "required": [
        "href"
      ],
      "additionalProperties": false,
      "properties": {
        "href": {
          "type": "string"
        }
      },
      "x-services": [
        "event"
      ]
    },
    "Event422Response": {
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/Event422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "event"
      ]
    },
    "Event422Error": {
      "additionalProperties": false,
      "properties": {
        "base": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Event422ErrorDetails"
          }
        },
        "name": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Errors with name attribute"
        },
        "centre_id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Errors with the centre_id attribute"
        },
        "description": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Errors with description attribute"
        },
        "image_ref": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Errors with the image_ref attribute"
        },
        "location": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Errors with the location attribute"
        },
        "featured": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Errors with the featured attribute"
        },
        "external_url": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Errors with the external_url attribute"
        },
        "external_url_description": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Errors with the external_url_description attribute"
        },
        "external_buy_url": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Errors with the external_buy_url attribute"
        },
        "date": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Errors with the date attribute"
        },
        "end_date": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Errors with the end_date attribute"
        },
        "published_at": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Errors with the published_at attribute"
        },
        "started_at": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Errors with the started_at attribute"
        },
        "finish": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Errors with the finish attribute"
        },
        "occurrences": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Errors with the occurrences attribute"
        }
      },
      "x-services": [
        "event"
      ]
    },
    "Event422ErrorDetails": {
      "required": [
        "message",
        "params",
        "table_name"
      ],
      "additionalProperties": false,
      "properties": {
        "message": {
          "description": "Error description",
          "type": "string"
        },
        "params": {
          "description": "Request parameters supplied",
          "type": "object"
        },
        "table_name": {
          "description": "Name of the database table used for lookup",
          "type": "string"
        }
      },
      "x-services": [
        "event"
      ]
    },
    "moviesListResponse": {
      "description": "List of movies",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/movie"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "movie"
      ]
    },
    "movieResponse": {
      "description": "Information about a specific movie",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/movie"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "movie"
      ]
    },
    "movie": {
      "type": "object",
      "required": [
        "classification",
        "genres",
        "id",
        "synopsis",
        "title",
        "top_cast",
        "_links",
        "time_zone"
      ],
      "additionalProperties": false,
      "properties": {
        "classification": {
          "type": "string",
          "description": "Movie classification"
        },
        "genres": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Movie genres",
          "maxItems": 3
        },
        "id": {
          "type": "integer",
          "description": "Movie ID"
        },
        "synopsis": {
          "type": "string",
          "description": "Movie synopsis"
        },
        "title": {
          "type": "string",
          "description": "Movie title"
        },
        "top_cast": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Top cast members",
          "maxItems": 3
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the movie information was last updated"
        },
        "_links": {
          "$ref": "#/definitions/movieLinks"
        },
        "time_zone": {
          "type": "string",
          "description": "The name of the movie session's time zone (e.g. \"US/Pacific\")"
        },
        "sessions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/movieSession"
          }
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the movie was marked as deleted"
        },
        "classification_body": {
          "type": "string",
          "description": "Organisation which set the classification"
        },
        "classification_detail": {
          "type": "string",
          "description": "Information about the classification"
        },
        "run_time": {
          "type": "integer",
          "description": "Runtime of movie (in minutes)"
        }
      },
      "x-services": [
        "movie"
      ]
    },
    "movieSession": {
      "type": "object",
      "required": [
        "session_type",
        "start_time",
        "_links"
      ],
      "additionalProperties": false,
      "properties": {
        "session_type": {
          "type": "string",
          "description": "Type of movie session"
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "description": "Time the movie starts in UTC time (e.g. \"2015-01-15T06:15:00.000Z\")"
        },
        "_links": {
          "$ref": "#/definitions/movieSessionLinks"
        }
      },
      "x-services": [
        "movie"
      ]
    },
    "movieSessionLinks": {
      "required": [
        "centre",
        "booking_url"
      ],
      "additionalProperties": false,
      "properties": {
        "centre": {
          "description": "URL for the centre this session belongs to",
          "$ref": "#/definitions/centreLink"
        },
        "booking_url": {
          "$ref": "#/definitions/bookingLink",
          "description": "URL for making a booking for this session"
        }
      },
      "x-services": [
        "movie"
      ]
    },
    "movieLinks": {
      "required": [
        "self",
        "image"
      ],
      "additionalProperties": false,
      "properties": {
        "self": {
          "description": "Canonical link to this movie",
          "$ref": "#/definitions/movieLink"
        },
        "image": {
          "description": "Cloudinary image details",
          "$ref": "#/definitions/cloudinaryLink"
        },
        "trailers": {
          "description": "List of trailers for this movie",
          "type": "array",
          "items": {
            "$ref": "#/definitions/trailerLink"
          }
        },
        "trailer_low_res": {
          "description": "List of trailers for this movie",
          "$ref": "#/definitions/trailerLink"
        },
        "trailer_high_res": {
          "description": "List of trailers for this movie",
          "$ref": "#/definitions/trailerLink"
        },
        "booking_url": {
          "description": "Link to purchase tickets for this movie",
          "$ref": "#/definitions/bookingLink"
        }
      },
      "x-services": [
        "movie"
      ]
    },
    "movieLink": {
      "required": [
        "href"
      ],
      "additionalProperties": false,
      "properties": {
        "href": {
          "type": "string",
          "description": "Link to more information about the movie"
        }
      },
      "x-services": [
        "movie"
      ]
    },
    "cloudinaryLink": {
      "required": [
        "cloudinary_public_id",
        "href"
      ],
      "additionalProperties": false,
      "properties": {
        "cloudinary_public_id": {
          "type": "string",
          "description": "Cloudinary ID for the image"
        },
        "href": {
          "type": "string",
          "description": "Full URL for the image"
        }
      },
      "x-services": [
        "movie"
      ]
    },
    "trailerLink": {
      "required": [
        "quality",
        "href"
      ],
      "additionalProperties": false,
      "properties": {
        "quality": {
          "type": "string",
          "description": "Trailer quality"
        },
        "href": {
          "type": "string",
          "description": "URL for the trailer"
        },
        "run_time": {
          "type": "integer",
          "description": "Runtime of movie (in minutes)"
        }
      },
      "x-services": [
        "movie"
      ]
    },
    "bookingLink": {
      "required": [
        "href"
      ],
      "additionalProperties": false,
      "properties": {
        "href": {
          "type": "string",
          "description": "Link to purchase tickets for this session"
        }
      },
      "x-services": [
        "movie"
      ]
    },
    "Token": {
      "required": [
        "access_token",
        "token_type",
        "expires_in"
      ],
      "properties": {
        "access_token": {
          "type": "string",
          "description": "Access Token string"
        },
        "refresh_token": {
          "type": "string",
          "description": "Refresh Token string"
        },
        "token_type": {
          "type": "string",
          "description": "Token Type",
          "default": "bearer"
        },
        "expires_in": {
          "type": "integer",
          "description": "Token TTL",
          "default": 28800
        },
        "created_at": {
          "type": "integer",
          "description": "DateTime that the token was created in Unix Timestamp format"
        }
      },
      "description": "Token",
      "x-services": [
        "access"
      ]
    },
    "TokenInfo": {
      "properties": {
        "scopes": {
          "type": "array",
          "description": "OAuth Scopes",
          "items": {
            "type": "string"
          }
        },
        "expires_in_seconds": {
          "type": "integer",
          "description": "Token TTL"
        },
        "created_at": {
          "type": "string",
          "description": "DateTime that the token was created"
        },
        "expires_at": {
          "type": "integer",
          "description": "DateTime that the token will expires Unix Timestamp format"
        },
        "session_id": {
          "type": "string",
          "description": "SSO Session ID"
        },
        "uuid": {
          "type": "string",
          "description": "UUID for the account"
        },
        "application": {
          "$ref": "#/definitions/Application"
        },
        "resource_owner": {
          "type": "object"
        }
      },
      "description": "Token Info",
      "x-services": [
        "access"
      ]
    },
    "Application": {
      "required": [
        "client_id",
        "name"
      ],
      "properties": {
        "client_id": {
          "type": "string",
          "description": "OAuth Client ID"
        },
        "name": {
          "type": "string",
          "description": "Application name"
        }
      },
      "description": "Application",
      "x-services": [
        "access"
      ]
    },
    "Account": {
      "description": "Account including associated identification data.",
      "properties": {
        "uuid": {
          "type": "string",
          "description": "UUID for the account"
        },
        "first_name": {
          "type": "string",
          "description": "first name for the shopper"
        },
        "last_name": {
          "type": "string",
          "description": "last name for the shopper"
        },
        "email": {
          "type": "string",
          "description": "email address for the shopper"
        },
        "updated_at": {
          "type": "string",
          "description": "DateTime that the shopper last updated"
        },
        "created_at": {
          "type": "string",
          "description": "DateTime that the shopper was created"
        }
      },
      "x-services": [
        "access"
      ]
    },
    "AccountResponse": {
      "description": "Contains a single account",
      "properties": {
        "data": {
          "$ref": "#/definitions/Account"
        },
        "errors": {
          "type": "object"
        },
        "meta": {
          "type": "object"
        }
      },
      "x-services": [
        "access"
      ]
    },
    "Page": {
      "description": "Page information",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Account"
          }
        },
        "errors": {
          "type": "object"
        },
        "meta": {
          "type": "object",
          "properties": {
            "total": {
              "description": "Total number of items meeting the scope."
            },
            "current_page": {
              "description": "Page number for the current page."
            },
            "next_page": {
              "description": "Next page number."
            },
            "prev_page": {
              "description": "Previous page number."
            },
            "total_pages": {
              "description": "Total number of pages."
            },
            "total_count": {
              "description": "Total number of items on the page."
            },
            "api_version": {
              "description": "Version of the API used to return the information."
            }
          }
        }
      },
      "x-services": [
        "access"
      ]
    },
    "Role": {
      "required": [
        "type",
        "access_attributes"
      ],
      "properties": {
        "type": {
          "type": "string"
        },
        "access_attributes": {
          "type": "array",
          "description": "Access Attributes",
          "items": {
            "$ref": "#/definitions/AccessAttribute"
          }
        }
      },
      "x-services": [
        "access"
      ]
    },
    "AccessAttribute": {
      "properties": {
        "centres": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Centres array. (Only for centre role)"
        },
        "retailer_id": {
          "type": "integer",
          "description": "Retailer ID. (Only Retailer role)"
        }
      },
      "description": "Access Attributes",
      "x-services": [
        "access"
      ]
    },
    "passwordResetToken": {
      "required": [
        "password_reset_token"
      ],
      "properties": {
        "password_reset_token": {
          "type": "string",
          "description": "Unique password reset token which is valid for 8 hours"
        }
      },
      "x-services": [
        "access"
      ]
    },
    "passwordResetTokenResponse": {
      "properties": {
        "data": {
          "$ref": "#/definitions/passwordResetToken"
        },
        "errors": {
          "type": "object"
        },
        "meta": {
          "type": "object"
        }
      },
      "x-services": [
        "access"
      ]
    },
    "passwordResetReponse": {
      "properties": {
        "data": {
          "$ref": "#/definitions/Account"
        },
        "errors": {
          "type": "object"
        },
        "meta": {
          "type": "object"
        }
      },
      "x-services": [
        "access"
      ]
    },
    "NewAccount": {
      "required": [
        "first_name",
        "last_name",
        "email",
        "password"
      ],
      "properties": {
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "x-services": [
        "access"
      ]
    },
    "UpdateAccount": {
      "required": [
        "first_name",
        "last_name",
        "email"
      ],
      "properties": {
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      },
      "x-services": [
        "access"
      ]
    },
    "ResetAccountPassword": {
      "required": [
        "password",
        "password_confirmation"
      ],
      "properties": {
        "password": {
          "description": "The new password",
          "type": "string"
        },
        "password_confirmation": {
          "description": "The new password again",
          "type": "string"
        }
      },
      "x-services": [
        "access"
      ]
    },
    "MetadataSnapshotBulkResponse": {
      "description": "Object where each key corresponds to a UUID in the original request with metadata available. If no metadata is available then that UUID will not appear in the response. Each value for a UUID key is the same as if the same request had been made against the UUID specific endpoint.\n",
      "x-services": [
        "access"
      ]
    },
    "Metadata": {
      "description": "One or more key value pairs describing a specific UUID.\n",
      "x-services": [
        "access"
      ]
    },
    "MetadataSnapshot": {
      "description": "Object containing all of the key value pairs describing the UUID and the time stamp they were recorded.\n",
      "x-services": [
        "access"
      ]
    },
    "dealsListResponse": {
      "description": "List of deals",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/deal"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "deal"
      ]
    },
    "dealResponse": {
      "description": "Information about a specific deal",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/deal"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "deal"
      ]
    },
    "deal": {
      "description": "Deal",
      "required": [
        "_links",
        "available_from",
        "available_to",
        "campaigns",
        "deal_id",
        "description",
        "external_url",
        "featured",
        "image_ref",
        "publish_date",
        "state",
        "state_events",
        "stores",
        "subtitle",
        "tags",
        "terms_and_conditions",
        "title",
        "updated_at",
        "urgent"
      ],
      "properties": {
        "deal_id": {
          "type": "integer",
          "description": "deal ID"
        },
        "title": {
          "type": "string",
          "description": "Deal title"
        },
        "terms_and_conditions": {
          "type": "string",
          "description": "Terms and Conditions"
        },
        "stores": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/dealStore"
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "subtitle": {
          "type": "string",
          "description": "Deal subtitle"
        },
        "urgent": {
          "type": "boolean",
          "description": "Urgent or not"
        },
        "state_events": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "state": {
          "type": "string",
          "description": "Deal state"
        },
        "publish_date": {
          "type": "string",
          "format": "date",
          "description": "Deal publish date"
        },
        "available_from": {
          "type": "string",
          "format": "date",
          "description": "Deal publish date"
        },
        "available_to": {
          "type": "string",
          "format": "date",
          "description": "Deal publish date"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deal updated at"
        },
        "image_ref": {
          "type": "string",
          "description": "Image ref"
        },
        "featured": {
          "type": "boolean",
          "description": "Featured"
        },
        "external_url": {
          "type": "string",
          "description": "External URL"
        },
        "description": {
          "type": "string",
          "description": "Description"
        },
        "campaigns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/campaign"
          }
        },
        "_links": {
          "$ref": "#/definitions/dealLinks"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time that the deal was marked as deleted."
        }
      },
      "x-services": [
        "deal"
      ]
    },
    "dealImageLink": {
      "description": "Canonical link to the deal image",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "cloudinary_id": {
          "description": "Cloudinary Id",
          "type": "string"
        },
        "href": {
          "description": "Retailer URL",
          "type": "string"
        }
      },
      "x-services": [
        "deal"
      ]
    },
    "retailerLogoLink": {
      "description": "Canonical link to the retailer logo",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "href": {
          "description": "Logo URL",
          "type": "string"
        },
        "cloudinary_id": {
          "description": "Cloudinary ID of the logo",
          "type": "string"
        }
      },
      "x-services": [
        "deal"
      ]
    },
    "dealRetailerLink": {
      "description": "Retailer name and url",
      "type": "object",
      "required": [
        "href",
        "name"
      ],
      "additionalProperties": false,
      "properties": {
        "name": {
          "description": "Retailer name",
          "type": "string"
        },
        "href": {
          "description": "Retailer URL",
          "type": "string"
        }
      },
      "x-services": [
        "deal"
      ]
    },
    "dealLinks": {
      "required": [
        "image",
        "retailer_logo",
        "retailer"
      ],
      "properties": {
        "image": {
          "description": "Canonical link to the deal image",
          "$ref": "#/definitions/dealImageLink"
        },
        "retailer_logo": {
          "description": "Canonical link to the retailer logo",
          "$ref": "#/definitions/retailerLogoLink"
        },
        "retailer": {
          "description": "Retailer name and url",
          "$ref": "#/definitions/dealRetailerLink"
        }
      },
      "x-services": [
        "deal"
      ]
    },
    "campaign": {
      "description": "Campaign",
      "required": [
        "campaign_id",
        "name",
        "updated_at"
      ],
      "properties": {
        "campaign_id": {
          "type": "integer",
          "description": "campaign ID"
        },
        "name": {
          "type": "string",
          "description": "campaign name"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date the campaign was last updated"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time that the deal was marked as deleted."
        }
      },
      "x-services": [
        "deal"
      ]
    },
    "dealStore": {
      "description": "Store that a deal belongs to",
      "required": [
        "centre_id",
        "locations",
        "retailer_id",
        "store_id"
      ],
      "properties": {
        "centre_id": {
          "type": "string",
          "description": "Centre ID"
        },
        "locations": {
          "description": "List of Jibestream locations and meta data",
          "type": "array",
          "items": {
            "$ref": "#/definitions/location"
          }
        },
        "retailer_id": {
          "type": "integer",
          "description": "Retailer ID"
        },
        "store_id": {
          "type": "integer",
          "description": "Store ID"
        }
      },
      "x-services": [
        "deal"
      ]
    },
    "Deal422Response": {
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/Deal422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "deal"
      ]
    },
    "Deal422Error": {
      "properties": {
        "base": {
          "description": "Hash of errors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Deal422ErrorDetails"
          }
        },
        "title": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "publish_date": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "available_from": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "available_to": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "terms_and_conditions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "stores": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-services": [
        "deal"
      ]
    },
    "Deal422ErrorDetails": {
      "properties": {
        "key": {
          "type": "string",
          "description": "Invalid attribute name"
        },
        "value": {
          "type": "string",
          "description": "Description of error"
        }
      },
      "x-services": [
        "deal"
      ]
    },
    "dealCreateParameters": {
      "type": "object",
      "description": "Parameters for creating a Deal",
      "required": [
        "title",
        "terms_and_conditions",
        "retailer_id",
        "centre_id",
        "store_id",
        "publish_date",
        "available_from",
        "available_to"
      ],
      "additionalProperties": false,
      "properties": {
        "title": {
          "description": "Title",
          "type": "string"
        },
        "terms_and_conditions": {
          "description": "Deal terms and conditions text",
          "type": "string"
        },
        "image_ref": {
          "description": "Image ref",
          "type": "string"
        },
        "featured": {
          "description": "Featured",
          "type": "boolean"
        },
        "description": {
          "description": "Description",
          "type": "string"
        },
        "subtitle": {
          "description": "Subtitle",
          "type": "string"
        },
        "external_url": {
          "description": "External URL",
          "type": "string"
        },
        "tags": {
          "description": "Event tags",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "retailer_id": {
          "description": "Retailer ID of store",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "centre_id": {
          "description": "Centre ID of store",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "store_id": {
          "description": "Store ID of store",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "text": {
          "description": "Text content of comment",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "user_id": {
          "description": "User ID of comment",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "campaign_ids": {
          "description": "Campaign IDs",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "publish_date": {
          "description": "Publish date",
          "type": "string",
          "format": "date"
        },
        "available_from": {
          "description": "Available from",
          "type": "string",
          "format": "date"
        },
        "available_to": {
          "description": "Available to",
          "type": "string",
          "format": "date"
        }
      },
      "x-services": [
        "deal"
      ]
    },
    "dealUpdateParameters": {
      "type": "object",
      "description": "Parameters for creating a Deal",
      "additionalProperties": false,
      "properties": {
        "title": {
          "description": "Title",
          "type": "string"
        },
        "terms_and_conditions": {
          "description": "Deal terms and conditions text",
          "type": "string"
        },
        "image_ref": {
          "description": "Image ref",
          "type": "string"
        },
        "featured": {
          "description": "Featured",
          "type": "boolean"
        },
        "description": {
          "description": "Description",
          "type": "string"
        },
        "subtitle": {
          "description": "Subtitle",
          "type": "string"
        },
        "external_url": {
          "description": "External URL",
          "type": "string"
        },
        "tags": {
          "description": "Event tags",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "retailer_id": {
          "description": "Retailer ID of store",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "centre_id": {
          "description": "Centre ID of store",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "store_id": {
          "description": "Store ID of store",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "text": {
          "description": "Text content of comment",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "user_id": {
          "description": "User ID of comment",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "campaign_ids": {
          "description": "Campaign IDs",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "publish_date": {
          "description": "Publish date",
          "type": "string",
          "format": "date"
        },
        "available_from": {
          "description": "Available from",
          "type": "string",
          "format": "date"
        },
        "available_to": {
          "description": "Available to",
          "type": "string",
          "format": "date"
        }
      },
      "x-services": [
        "deal"
      ]
    },
    "centreTradingHoursListResponse": {
      "description": "List of centre trading hours",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/centreTradingHour"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "storeTradingHoursListResponse": {
      "description": "List of centre trading hours",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storeTradingHour"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "centreTradingHour": {
      "required": [
        "id",
        "centre_id",
        "hour_type"
      ],
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "integer",
          "description": "Auto generated ID"
        },
        "centre_id": {
          "type": "string",
          "description": "ID for centre"
        },
        "hour_type": {
          "type": "string",
          "description": "Type of trading hour (special or standard)"
        },
        "description": {
          "type": "string",
          "description": "Description of trading hour"
        },
        "day_of_week": {
          "type": "integer",
          "description": "0-indexed day of the week (e.g. 0: Mon, 1: Tue)"
        },
        "opening_time": {
          "type": "string",
          "description": "When the centre opens"
        },
        "closing_time": {
          "type": "string",
          "description": "When the centre closes"
        },
        "closed": {
          "type": "boolean",
          "description": "Whether the centre is open"
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "Date the trading hour is for"
        },
        "_links": {
          "$ref": "#/definitions/tradingHourLinks"
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "storeTradingHour": {
      "required": [
        "id",
        "centre_id",
        "store_id",
        "hour_type"
      ],
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "integer",
          "description": "Auto generated ID"
        },
        "centre_id": {
          "type": "string",
          "description": "ID for centre"
        },
        "store_id": {
          "type": "string",
          "description": "ID for store"
        },
        "hour_type": {
          "type": "string",
          "description": "Type of trading hour (special  or standard)"
        },
        "description": {
          "type": "string",
          "description": "Description of trading hour"
        },
        "day_of_week": {
          "type": "integer",
          "description": "0-indexed day of the week (e.g. 0: Mon, 1: Tue)"
        },
        "opening_time": {
          "type": "string",
          "description": "When the centre opens"
        },
        "closing_time": {
          "type": "string",
          "description": "When the centre closes"
        },
        "closed": {
          "type": "boolean",
          "description": "Whether the centre is open"
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "Date the trading hour is for"
        },
        "_links": {
          "$ref": "#/definitions/tradingHourLinks"
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "tradingHourLinks": {
      "required": [
        "self"
      ],
      "additionalProperties": false,
      "properties": {
        "self": {
          "description": "Canonical link to this trading hour",
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "tradingHour422Response": {
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/tradingHour422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "tradingHour422Error": {
      "additionalProperties": false,
      "properties": {
        "base": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tradingHour422ErrorDetails"
          }
        },
        "centre_id": {
          "description": "Errors with the centre_id attribute",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "date": {
          "description": "Errors with the date attribute",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "day_of_week": {
          "description": "Errors with the day_of_week attribute",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "hour_type": {
          "description": "Errors with the hour_type attribute",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "tradingHour422ErrorDetails": {
      "required": [
        "message",
        "params"
      ],
      "additionalProperties": false,
      "properties": {
        "message": {
          "description": "Description of the error that occurred",
          "type": "string"
        },
        "params": {
          "description": "Parameters which were used in the request",
          "type": "object"
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "createCentreHoursParameters": {
      "type": "object",
      "description": "Parameters for creating one or more trading hours for a centre.",
      "additionalProperties": false,
      "properties": {
        "hour_type": {
          "description": "Types of trading hours",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "description": "Descriptions of trading hours",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "day_of_week": {
          "description": "Stuff",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "opening_time": {
          "description": "Time the centre opens",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "closing_time": {
          "description": "Time the centre closes",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "closed": {
          "description": "Whether the centre is open or not",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "date": {
          "description": "Date the trading hour is for",
          "type": "array",
          "items": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "createStoreHoursParameters": {
      "type": "object",
      "description": "Parameters for creating one or more trading hours for a store.",
      "required": [
        "centre_id"
      ],
      "additionalProperties": false,
      "properties": {
        "centre_id": {
          "description": "The centre ID you'd like the hours for",
          "type": "string"
        },
        "hour_type": {
          "description": "Types of trading hours",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "description": "Descriptions of trading hours",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "day_of_week": {
          "description": "Stuff",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "opening_time": {
          "description": "Time the centre opens",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "closing_time": {
          "description": "Time the centre closes",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "closed": {
          "description": "Whether the centre is open or not",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "date": {
          "description": "Date the trading hour is for",
          "type": "array",
          "items": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "productResponse": {
      "description": "Information about a specific product",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/product"
        },
        "errors": {
          "$ref": "#/definitions/emptyErrorResponse"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "consumption"
      ]
    },
    "product": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string",
          "description": "Auto generated ID"
        },
        "item_code": {
          "type": "string",
          "description": "Retailer product id"
        },
        "retailer_code": {
          "type": "string",
          "description": "Westfield retailer code"
        },
        "brand": {
          "type": "string",
          "description": "Product Brand"
        },
        "primary_category": {
          "type": "string",
          "description": "Product primary category"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date product was created"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date product was updated"
        },
        "disabled_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date product was disabled"
        },
        "name": {
          "type": "string",
          "description": "Product name"
        },
        "short_description": {
          "type": "string",
          "description": "Short product description"
        },
        "detailed_description": {
          "type": "string",
          "description": "Detailed product description"
        },
        "is_featured": {
          "type": "boolean",
          "description": "Product featured flag"
        },
        "_links": {
          "type": "object",
          "properties": {
            "self": {
              "type": "object",
              "properties": {
                "href": {
                  "type": "string",
                  "description": "s3 ref"
                }
              }
            }
          }
        },
        "variants": {
          "type": "object",
          "properties": {
            "sku": {
              "type": "string",
              "description": "Product variant id"
            },
            "description": {
              "type": "string",
              "description": "Product description"
            },
            "attributes": {
              "type": "object",
              "properties": {
                "color": {
                  "type": "string",
                  "description": "Westfield product color"
                },
                "size": {
                  "type": "string",
                  "description": "Westfield product size"
                }
              }
            },
            "retailer_attributes": {
              "type": "object",
              "properties": {
                "color": {
                  "type": "string",
                  "description": "Retailer product color"
                },
                "size": {
                  "type": "string",
                  "description": "Retailer product size"
                }
              }
            },
            "is_default": {
              "type": "boolean",
              "description": "Default flag"
            },
            "media": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "retailer_product_url": {
              "type": "string",
              "description": "Product variant retailer url"
            },
            "price": {
              "type": "object",
              "properties": {
                "amount": {
                  "type": "integer",
                  "description": "Variant amount, in cents"
                },
                "rrp": {
                  "type": "integer",
                  "description": "Variant rrp, in cents"
                },
                "is_discounted": {
                  "type": "boolean",
                  "description": "Discounted flag"
                }
              }
            }
          }
        }
      },
      "x-services": [
        "consumption"
      ]
    },
    "retailer": {
      "description": "A retailer that has stores in Westfield centres.",
      "required": [
        "_links",
        "category_ids",
        "currency_code",
        "is_enabled",
        "name",
        "product_tier",
        "product_upload_enabled",
        "retailer_code",
        "retailer_id",
        "updated_at"
      ],
      "additionalProperties": false,
      "properties": {
        "_links": {
          "$ref": "#/definitions/retailerLinks"
        },
        "cam_ref": {
          "description": "Conversion tracking provider ID",
          "type": "string"
        },
        "campaign_id": {
          "description": "ID of a Westfield campaign for the retailer",
          "type": "string"
        },
        "category_ids": {
          "description": "List of Category IDs associated with the retailer",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "country": {
          "description": "Two letter code of the country the retailer operates in",
          "type": "string"
        },
        "currency_code": {
          "description": "Three letter code of the currency the retailer uses",
          "type": "string"
        },
        "email_address": {
          "description": "E-mail address of the retailer",
          "type": "string"
        },
        "is_enabled": {
          "description": "Flag indicating if the retailer is enabled in the Westfield system",
          "type": "boolean"
        },
        "lease_id": {
          "description": "ID of the retailer's lease with Westfield",
          "type": "string"
        },
        "name": {
          "description": "Name of the retailer",
          "type": "string"
        },
        "product_tier": {
          "description": "Tiers for grouping similar retailers",
          "type": "integer",
          "enum": [
            1,
            2,
            3
          ]
        },
        "product_upload_enabled": {
          "description": "Flag indicating if the retailer can upload products to the Westfield system",
          "type": "boolean"
        },
        "retailer_code": {
          "description": "URL-friendly code for the retailer",
          "type": "string"
        },
        "retailer_id": {
          "description": "Auto generated ID",
          "type": "integer"
        },
        "store_profile": {
          "description": "Long description of the retailer",
          "type": "string"
        },
        "updated_at": {
          "description": "Date and time the retailer was last updated, in `zulu-time` format",
          "type": "string"
        },
        "url": {
          "description": "URL of the retailer's website",
          "type": "string"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the retailer was marked as deleted, in `zulu-time` format"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "retailerCreateParameters": {
      "type": "object",
      "description": "Parameters for creating a retailer",
      "required": [
        "name",
        "product_tier",
        "retailer_code"
      ],
      "properties": {
        "cam_ref": {
          "description": "Conversion tracking provider ID",
          "type": "string"
        },
        "campaign_id": {
          "description": "ID of a Westfield campaign for the retailer",
          "type": "string"
        },
        "category_ids": {
          "description": "List of Category IDs associated with the retailer",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "country": {
          "description": "Two letter code of the country the retailer operates in",
          "type": "string"
        },
        "currency_code": {
          "description": "Three letter code of the currency the retailer uses",
          "type": "string"
        },
        "email_address": {
          "description": "E-mail address of the retailer",
          "type": "string"
        },
        "is_enabled": {
          "description": "Flag indicating if the retailer is enabled in the Westfield system",
          "type": "boolean"
        },
        "lease_id": {
          "description": "ID of the retailer's lease with Westfield",
          "type": "string"
        },
        "logo_ref": {
          "description": "Storage provider ID of the retailer's logo image",
          "type": "string"
        },
        "name": {
          "description": "Name of the retailer",
          "type": "string"
        },
        "product_tier": {
          "description": "Tiers for grouping similar retailers",
          "type": "integer",
          "enum": [
            1,
            2,
            3
          ]
        },
        "product_upload_enabled": {
          "description": "Flag indicating if the retailer can upload products to the Westfield system",
          "type": "boolean"
        },
        "retailer_code": {
          "description": "Code of the retailer, generally its lowercase, dasherized name",
          "type": "string",
          "pattern": "/\\A[-0-9a-z]*\\z/"
        },
        "store_profile": {
          "description": "Long description of the retailer",
          "type": "string"
        },
        "storefront_ref": {
          "description": "Storage provider ID of the image of a store front of the retailer",
          "type": "string"
        },
        "updated_at": {
          "description": "Date and time the retailer was last updated",
          "type": "string",
          "format": "date-time"
        },
        "url": {
          "description": "URL of the retailer's website",
          "type": "string"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "retailerUpdateParameters": {
      "type": "object",
      "description": "Parameters for updating a retailer",
      "properties": {
        "cam_ref": {
          "description": "Conversion tracking provider ID",
          "type": "string"
        },
        "campaign_id": {
          "description": "ID of a Westfield campaign for the retailer",
          "type": "string"
        },
        "category_ids": {
          "description": "List of Category IDs associated with the retailer",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "country": {
          "description": "Two letter code of the country the retailer operates in",
          "type": "string"
        },
        "currency_code": {
          "description": "Three letter code of the currency the retailer uses",
          "type": "string"
        },
        "email_address": {
          "description": "E-mail address of the retailer",
          "type": "string"
        },
        "is_enabled": {
          "description": "Flag indicating if the retailer is enabled in the Westfield system",
          "type": "boolean"
        },
        "lease_id": {
          "description": "ID of the retailer's lease with Westfield",
          "type": "string"
        },
        "logo_ref": {
          "description": "Storage provider ID of the retailer's logo image",
          "type": "string"
        },
        "name": {
          "description": "Name of the retailer",
          "type": "string"
        },
        "product_tier": {
          "description": "Tiers for grouping similar retailers",
          "type": "integer",
          "enum": [
            1,
            2,
            3
          ]
        },
        "product_upload_enabled": {
          "description": "Flag indicating if the retailer can upload products to the Westfield system",
          "type": "boolean"
        },
        "store_profile": {
          "description": "Long description of the retailer",
          "type": "string"
        },
        "storefront_ref": {
          "description": "Storage provider ID of the image of a store front of the retailer",
          "type": "string"
        },
        "updated_at": {
          "description": "Date and time the retailer was last updated",
          "type": "string",
          "format": "date-time"
        },
        "url": {
          "description": "URL of the retailer's website",
          "type": "string"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "retailerResponse": {
      "description": "Information about a specific retailer",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/retailer"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "retailersListResponse": {
      "description": "List of retailers",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/retailer"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "store": {
      "description": "A store belonging to a retailer in a Westfield centre.",
      "required": [
        "_links",
        "category_ids",
        "centre_id",
        "description",
        "enabled",
        "featured",
        "features",
        "locations",
        "major",
        "name",
        "phone_number",
        "retailer_code",
        "retailer_id",
        "salience",
        "store_id"
      ],
      "additionalProperties": false,
      "properties": {
        "_links": {
          "$ref": "#/definitions/storeLinks"
        },
        "category_ids": {
          "description": "List of categories the store belongs to",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "centre_id": {
          "description": "ID of the Westfield centre the store is in",
          "type": "string"
        },
        "description": {
          "description": "Long description of the store's retailer",
          "type": "string"
        },
        "dining_cuisine": {
          "description": "Cuisine offered by the store if it provides dining facilities",
          "type": "string"
        },
        "dining_price_guide": {
          "description": "Number indicating the relative price of dining at the store",
          "type": "integer"
        },
        "disabled_date": {
          "description": "Date the store was disabled in the Westfield system",
          "type": "string",
          "format": "date-time"
        },
        "email_address": {
          "description": "E-mail address of the store",
          "type": "string"
        },
        "enabled": {
          "description": "Flag indicating if the store is enabled in the Westfield system",
          "type": "boolean"
        },
        "enabled_date": {
          "description": "Date the store was enabled in the Westfield system",
          "type": "string",
          "format": "date-time"
        },
        "featured": {
          "description": "Flag indicating if the store is currently being promoted on the website",
          "type": "boolean"
        },
        "features": {
          "description": "List of features the store has.\nIf \"foodordering\" is present the store supports ordering food via the Food App.\nIf \"products\" is present the retailer has products on the website.\nIf \"giftcards\" is present the store accepts giftcards",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "foodordering",
              "products",
              "giftcards"
            ]
          }
        },
        "lease_number": {
          "description": "Number of the store's lease with Westfield",
          "type": "string"
        },
        "locations": {
          "description": "List of Jibestream locations and meta data",
          "type": "array",
          "items": {
            "$ref": "#/definitions/location"
          }
        },
        "major": {
          "description": "Flag indicating that stores, such as anchor stores, are major in their centre",
          "type": "boolean"
        },
        "name": {
          "description": "Name of the store",
          "type": "string"
        },
        "phone_number": {
          "description": "Phone number of the store",
          "type": "string"
        },
        "retailer_code": {
          "description": "Code of the retailer the store belongs to",
          "type": "string"
        },
        "retailer_id": {
          "description": "ID of the retailer the store belongs to",
          "type": "integer"
        },
        "salience": {
          "description": "Numeric value used for wayfinding applications",
          "type": "integer"
        },
        "shop_number": {
          "description": "The shop number in the Westfield centre the store occupies",
          "type": "string"
        },
        "store_id": {
          "description": "Auto generated ID",
          "type": "integer"
        },
        "updated_at": {
          "description": "Date and time the retailer was last updated.",
          "type": "string",
          "format": "date-time"
        },
        "url": {
          "description": "URL of the store's website",
          "type": "string"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the store was marked as deleted"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "storeCreateParameters": {
      "type": "object",
      "description": "Parameters for creating a store",
      "required": [
        "centre_id",
        "name",
        "phone_number",
        "retailer_id",
        "salience"
      ],
      "properties": {
        "category_ids": {
          "description": "List of Category IDs associated with the store",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "centre_id": {
          "description": "ID of the Westfield centre the store is in",
          "type": "string"
        },
        "description": {
          "description": "Long description of the store's retailer",
          "type": "string"
        },
        "dining_cuisine": {
          "description": "Cuisine offered by the store if it provides dining facilities",
          "type": "string"
        },
        "dining_image_ref": {
          "description": "Storage provider ID of the dining image of the store if it provides dining facilities",
          "type": "string"
        },
        "dining_menu_ref": {
          "description": "Storage provider ID of the menu of the store if it provides dining facilities",
          "type": "string"
        },
        "dining_price_guide": {
          "description": "Number indicating the relative price of dining at the store",
          "type": "integer"
        },
        "disabled_date": {
          "description": "Date the store was disabled in the Westfield system",
          "type": "string",
          "format": "date-time"
        },
        "email_address": {
          "description": "E-mail address of the store",
          "type": "string"
        },
        "enabled": {
          "description": "Flag indicating if the store is enabled in the Westfield system",
          "type": "boolean"
        },
        "enabled_date": {
          "description": "Date the store was enabled in the Westfield system",
          "type": "string",
          "format": "date-time"
        },
        "featured": {
          "description": "Flag indicating if the store is currently being promoted on the website",
          "type": "boolean"
        },
        "features": {
          "description": "List of features the store has.\nIf \"foodordering\" is present the store supports ordering food via the Food App.\nIf \"giftcards\" is present the store accepts giftcards",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "foodordering",
              "giftcards"
            ]
          }
        },
        "lease_number": {
          "description": "Number of the store's lease with Westfield",
          "type": "string"
        },
        "locations": {
          "description": "List of jibestream locations and meta data",
          "type": "array",
          "items": {
            "$ref": "#/definitions/location"
          }
        },
        "major": {
          "description": "Flag indicating that stores, such as anchor stores, are major in their centre",
          "type": "boolean"
        },
        "name": {
          "description": "Name of the store",
          "type": "string"
        },
        "phone_number": {
          "description": "Phone number of the store",
          "type": "string"
        },
        "retailer_id": {
          "description": "ID of the retailer the store belongs to",
          "type": "integer"
        },
        "salience": {
          "description": "Numeric value used for wayfinding applications",
          "type": "integer"
        },
        "shop_number": {
          "description": "The shop number in the Westfield centre the store occupies",
          "type": "string"
        },
        "store_front_image_ref": {
          "description": "Storage provider ID of the store's store front image",
          "type": "string"
        },
        "url": {
          "description": "URL of the store's website",
          "type": "string"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "storeUpdateParameters": {
      "type": "object",
      "description": "Parameters for updating a store",
      "properties": {
        "category_ids": {
          "description": "List of Category IDs associated with the store",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "centre_id": {
          "description": "ID of the Westfield centre the store is in",
          "type": "string"
        },
        "description": {
          "description": "Long description of the store's retailer",
          "type": "string"
        },
        "dining_cuisine": {
          "description": "Cuisine offered by the store if it provides dining facilities",
          "type": "string"
        },
        "dining_image_ref": {
          "description": "Storage provider ID of the dining image of the store if it provides dining facilities",
          "type": "string"
        },
        "dining_menu_ref": {
          "description": "Storage provider ID of the menu of the store if it provides dining facilities",
          "type": "string"
        },
        "dining_price_guide": {
          "description": "Number indicating the relative price of dining at the store",
          "type": "integer"
        },
        "disabled_date": {
          "description": "Date the store was disabled in the Westfield system",
          "type": "string",
          "format": "date-time"
        },
        "email_address": {
          "description": "E-mail address of the store",
          "type": "string"
        },
        "enabled": {
          "description": "Flag indicating if the store is enabled in the Westfield system",
          "type": "boolean"
        },
        "enabled_date": {
          "description": "Date the store was enabled in the Westfield system",
          "type": "string",
          "format": "date-time"
        },
        "featured": {
          "description": "Flag indicating if the store is currently being promoted on the website",
          "type": "boolean"
        },
        "features": {
          "description": "List of features the store has.\nIf \"foodordering\" is present the store supports ordering food via the Food App.\nIf \"giftcards\" is present the store accepts giftcards",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "foodordering",
              "giftcards"
            ]
          }
        },
        "lease_number": {
          "description": "Number of the store's lease with Westfield",
          "type": "string"
        },
        "locations": {
          "description": "List of jibestream locations and meta data",
          "type": "array",
          "items": {
            "$ref": "#/definitions/location"
          }
        },
        "major": {
          "description": "Flag indicating that stores, such as anchor stores, are major in their centre",
          "type": "boolean"
        },
        "name": {
          "description": "Name of the store",
          "type": "string"
        },
        "phone_number": {
          "description": "Phone number of the store",
          "type": "string"
        },
        "retailer_id": {
          "description": "ID of the retailer the store belongs to",
          "type": "integer"
        },
        "salience": {
          "description": "Numeric value used for wayfinding applications",
          "type": "integer"
        },
        "shop_number": {
          "description": "The shop number in the Westfield centre the store occupies",
          "type": "string"
        },
        "store_front_image_ref": {
          "description": "Storage provider ID of the store's store front image",
          "type": "string"
        },
        "url": {
          "description": "URL of the store's website",
          "type": "string"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "diningLink": {
      "description": "Links for stores that provide dining facilities",
      "type": "object",
      "properties": {
        "image": {
          "description": "The link to the dining image of the store",
          "$ref": "#/definitions/imageLink"
        },
        "menu": {
          "description": "The link to the menu of the store",
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "storeLinks": {
      "description": "Relevant links for the store",
      "required": [
        "dining",
        "logo",
        "self",
        "store_front"
      ],
      "additionalProperties": false,
      "properties": {
        "dining": {
          "description": "Links for stores that provide dining facilities",
          "$ref": "#/definitions/diningLink"
        },
        "logo": {
          "description": "The link to the logo image of the store's retailer",
          "$ref": "#/definitions/imageLink"
        },
        "self": {
          "description": "The link for details about this store",
          "$ref": "#/definitions/genericLink"
        },
        "store_front": {
          "description": "The link to the store front image of the store",
          "$ref": "#/definitions/imageLink"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "storeResponse": {
      "description": "Information about a specific store",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/store"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "storesListResponse": {
      "description": "List of stores",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/store"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "401Error": {
      "required": [
        "access_token"
      ],
      "additionalProperties": false,
      "properties": {
        "access_token": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Authentication failure message"
          }
        }
      },
      "x-services": [
        "store"
      ]
    },
    "401Response": {
      "required": [
        "errors"
      ],
      "additionalProperties": false,
      "properties": {
        "errors": {
          "$ref": "#/definitions/401Error"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "Retailer422Error": {
      "additionalProperties": false,
      "properties": {
        "email_address": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "product_tier": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "retailer_code": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "store_profile": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-services": [
        "store"
      ]
    },
    "Retailer422Response": {
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/Retailer422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "Store422Error": {
      "additionalProperties": false,
      "properties": {
        "centre_id": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "phone_number": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "retailer_id": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "salience": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-services": [
        "store"
      ]
    },
    "Store422Response": {
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/Store422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "store"
      ]
    }
  }
}
